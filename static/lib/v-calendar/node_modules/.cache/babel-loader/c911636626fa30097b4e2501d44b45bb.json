{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/DatePicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/DatePicker.vue","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Calendar from './Calendar';\nimport Popover from './Popover';\nimport PopoverRef from './PopoverRef';\nimport SinglePicker from '../utils/pickers/single';\nimport MultiplePicker from '../utils/pickers/multiple';\nimport RangePicker from '../utils/pickers/range';\nimport { rootMixin, propOrDefaultMixin, safeScopedSlotMixin } from '../utils/mixins';\nimport { addTapOrClickHandler } from '../utils/touch';\nimport { createGuid, elementContains, on, off } from '../utils/helpers';\nimport { isString, isArray } from '../utils/_';\nimport '../styles/tailwind-lib.css';\nexport default {\n  name: 'DatePicker',\n\n  render(h) {\n    const calendar = () => h(Calendar, {\n      attrs: { ...this.$attrs,\n        attributes: this.attributes_,\n        theme: this.$theme,\n        locale: this.$locale\n      },\n      props: {\n        minDate: this.minDate,\n        maxDate: this.maxDate,\n        disabledDates: this.disabledDates,\n        availableDates: this.availableDates\n      },\n      on: { ...this.$listeners,\n        dayclick: this.onDayClick,\n        daymouseenter: this.onDayMouseEnter,\n        daykeydown: this.onDayKeydown,\n        dayfocusin: this.onDayFocusIn\n      },\n      scopedSlots: this.$scopedSlots,\n      ref: 'calendar'\n    }); // If inline just return the calendar\n\n\n    if (this.isInline) return calendar(); // Render the slot or ihput\n\n    const inputSlot = this.safeScopedSlot('default', {\n      inputClass: this.inputClass,\n      inputValue: this.inputValue,\n      inputProps: this.inputProps_,\n      inputEvents: this.inputEvents,\n      isDragging: !!this.dragValue,\n      updateValue: this.updateValue,\n      hidePopover: this.hidePopover\n    }) || h('input', {\n      class: this.inputClass,\n      attrs: this.inputProps_,\n      domProps: {\n        value: this.inputValue\n      },\n      on: this.inputEvents\n    }); // Convert this span to a fragment when supported in Vue\n\n    return h('span', [h(PopoverRef, {\n      props: { ...this.popover_,\n        id: this.datePickerPopoverId,\n        isInteractive: true\n      }\n    }, [inputSlot]), // Picker popover\n    h(Popover, {\n      props: {\n        id: this.datePickerPopoverId,\n        placement: 'bottom-start',\n        contentClass: this.$theme.container\n      },\n      on: {\n        beforeShow: e => this.$emit('popoverWillShow', e),\n        afterShow: e => this.$emit('popoverDidShow', e),\n        beforeHide: e => this.$emit('popoverWillHide', e),\n        afterHide: e => this.$emit('popoverDidHide', e)\n      },\n      scopedSlots: {\n        default() {\n          return calendar();\n        }\n\n      },\n      ref: 'popover'\n    })]);\n  },\n\n  mixins: [rootMixin, propOrDefaultMixin, safeScopedSlotMixin],\n  props: {\n    mode: {\n      type: String,\n      default: 'single'\n    },\n    value: {\n      type: null,\n      required: true\n    },\n    isRequired: Boolean,\n    isInline: Boolean,\n    updateOnInput: Boolean,\n    inputDebounce: Number,\n    inputProps: {\n      type: Object,\n      default: () => ({})\n    },\n    popover: {\n      type: Object,\n      default: () => ({})\n    },\n    dragAttribute: Object,\n    selectAttribute: Object,\n    attributes: Array\n  },\n\n  data() {\n    return {\n      value_: null,\n      dragValue: null,\n      inputValue: '',\n      doFormatInput: true,\n      doHidePopover: false,\n      doAdjustPageRange: false,\n      updateTimeout: null,\n      datePickerPopoverId: createGuid()\n    };\n  },\n\n  computed: {\n    updateOnInput_() {\n      return this.propOrDefault('updateOnInput', 'datePicker.updateOnInput');\n    },\n\n    inputDebounce_() {\n      return this.propOrDefault('inputDebounce', 'datePicker.inputDebounce');\n    },\n\n    inputMasks() {\n      const inputFormat = this.$locale.masks.input;\n      return isArray(inputFormat) && inputFormat || [inputFormat];\n    },\n\n    inputClass() {\n      const inputClass = this.inputProps.class || this.$theme.datePickerInput;\n      const inputDragClass = this.inputProps.dragClass || this.$theme.datePickerInputDrag;\n      return this.picker.hasValue(this.dragValue) ? inputDragClass || inputClass : inputClass;\n    },\n\n    inputProps_() {\n      // Merge the user props with local\n      const props = { ...this.inputProps,\n        value: this.inputValue,\n        type: 'input'\n      }; // Delete class properties\n\n      delete props.class;\n      delete props.dragClass;\n      return props;\n    },\n\n    inputEvents() {\n      return {\n        input: this.inputInput,\n        change: this.inputChange,\n        // keydown: this.inputKeydown,\n        keyup: this.inputKeyup\n      };\n    },\n\n    popover_() {\n      return this.propOrDefault('popover', 'datePicker.popover', 'merge');\n    },\n\n    canHidePopover() {\n      return !(this.popover.keepVisibleOnInput || this.popover_.visibility !== 'visible');\n    },\n\n    selectAttribute_() {\n      if (!this.picker.hasValue(this.value_)) return null;\n      const attribute = {\n        key: 'select-drag',\n        ...this.selectAttribute,\n        dates: this.value_,\n        pinPage: true\n      };\n      const {\n        dot,\n        bar,\n        highlight,\n        content\n      } = attribute;\n\n      if (!dot && !bar && !highlight && !content) {\n        attribute.highlight = true;\n      }\n\n      return attribute;\n    },\n\n    dragAttribute_() {\n      if (this.mode !== 'range' || !this.picker.hasValue(this.dragValue)) {\n        return null;\n      }\n\n      const attribute = {\n        key: 'select-drag',\n        ...this.dragAttribute,\n        dates: this.dragValue\n      };\n      const {\n        dot,\n        bar,\n        highlight,\n        content\n      } = attribute;\n\n      if (!dot && !bar && !highlight && !content) {\n        attribute.highlight = {\n          startEnd: {\n            fillMode: 'none'\n          }\n        };\n      }\n\n      return attribute;\n    },\n\n    attributes_() {\n      const attrs = isArray(this.attributes) ? [...this.attributes] : [];\n\n      if (this.dragAttribute_) {\n        attrs.push(this.dragAttribute_);\n      } else if (this.selectAttribute_) {\n        attrs.push(this.selectAttribute_);\n      }\n\n      return attrs;\n    },\n\n    picker() {\n      const opts = {\n        locale: this.$locale,\n        format: d => this.$locale.format(d, this.inputMasks[0]),\n        parse: s => this.$locale.parse(s, this.inputMasks)\n      };\n\n      switch (this.mode) {\n        case 'multiple':\n          return new MultiplePicker(opts);\n\n        case 'range':\n          return new RangePicker(opts);\n\n        default:\n          return new SinglePicker(opts);\n      }\n    }\n\n  },\n  watch: {\n    mode() {\n      // Clear value on select mode change\n      this.value_ = null;\n    },\n\n    value: {\n      handler() {\n        this.value_ = this.picker.filterDisabled({\n          value: this.value,\n          isRequired: this.isRequired,\n          disabled: this.disabledAttribute,\n          fallbackValue: null\n        });\n\n        if (this.value && !this.value_) {\n          this.$emit('input', null);\n        }\n      },\n\n      immediate: true\n    },\n    value_: {\n      handler(val) {\n        // Only emit events for internal updates and value changes\n        if (!this.picker.valuesAreEqual(val, this.value)) {\n          this.$emit('input', val);\n        } // Execute side-effects for non-inline pickers\n\n\n        if (!this.isInline) {\n          if (this.doFormatInput) this.formatInput();\n          if (this.doHidePopover) this.hidePopover();\n          if (this.doAdjustPageRange) this.adjustPageRange();\n        }\n\n        this.doFormatInput = true;\n        this.doHidePopover = false;\n        this.doAdjustPageRange = false;\n      },\n\n      immediate: true\n    },\n\n    dragValue(val) {\n      this.formatInput();\n      this.$emit('drag', this.picker.normalize(val));\n    }\n\n  },\n\n  mounted() {\n    // Handle escape key presses\n    on(document, 'keydown', this.onDocumentKeyDown); // Clear drag on background click\n\n    const offTapOrClickHandler = addTapOrClickHandler(document, e => {\n      if (document.body.contains(e.target) && !elementContains(this.$el, e.target) && this.dragValue) {\n        this.dragValue = null;\n      }\n    }); // Clean up handlers\n\n    this.$once('beforeDestroy', () => {\n      off(document, 'keydown', this.onDocumentKeyDown);\n      offTapOrClickHandler();\n    });\n  },\n\n  methods: {\n    dateIsValid(date) {\n      if (!date) return true;\n      return !!this.disabledAttribute && !this.disabledAttribute.intersectsDate(date);\n    },\n\n    onDocumentKeyDown(e) {\n      // Clear drag on escape keydown\n      if (this.dragValue && e.keyCode === 27) {\n        this.dragValue = null;\n      }\n    },\n\n    onDayClick(day) {\n      this.picker.handleDayClick(day, this); // Re-emit event\n\n      this.$emit('dayclick', day);\n    },\n\n    onDayMouseEnter(day) {\n      this.picker.handleDayMouseEnter(day, this); // Re-emit event\n\n      this.$emit('daymouseenter', day);\n    },\n\n    onDayFocusIn(day) {\n      this.picker.handleDayMouseEnter(day, this); // Re-emit event\n\n      this.$emit('dayfocusin', day);\n    },\n\n    onDayKeydown(day) {\n      switch (day.event.key) {\n        case ' ':\n        case 'Enter':\n          {\n            this.picker.handleDayClick(day, this);\n            day.event.preventDefault();\n            break;\n          }\n\n        case 'Escape':\n          {\n            this.hidePopover();\n          }\n      } // Re-emit event\n\n\n      this.$emit('daykeydown', day);\n    },\n\n    inputInput(e) {\n      this.inputValue = e.target.value;\n\n      if (this.updateOnInput_) {\n        this.updateValue(this.inputValue, {\n          formatInput: false,\n          hidePopover: false,\n          adjustPageRange: true,\n          debounce: this.inputDebounce_\n        });\n      }\n    },\n\n    inputChange() {\n      this.updateValue(this.inputValue, {\n        formatInput: true,\n        hidePopover: false,\n        adjustPageRange: false\n      });\n    },\n\n    inputKeyup(e) {\n      // Escape key\n      if (e.keyCode === 27) {\n        this.updateValue(this.value_, {\n          formatInput: true,\n          hidePopover: true,\n          adjustPageRange: false\n        });\n      }\n    },\n\n    updateValue(value = this.inputValue, {\n      formatInput,\n      hidePopover,\n      adjustPageRange,\n      debounce\n    } = {}) {\n      clearTimeout(this.updateTimeout);\n\n      if (debounce === undefined || debounce < 0) {\n        this.forceUpdateValue(value, {\n          formatInput,\n          hidePopover,\n          adjustPageRange\n        });\n      } else {\n        this.updateTimeout = setTimeout(() => {\n          this.updateTimeout = null;\n          this.forceUpdateValue(value, {\n            formatInput,\n            hidePopover,\n            adjustPageRange\n          });\n        }, debounce);\n      }\n    },\n\n    forceUpdateValue(value, {\n      formatInput,\n      hidePopover,\n      adjustPageRange\n    }) {\n      // Reassign input value for good measure\n      this.inputValue = isString(value) ? value : this.inputValue; // Parse value if needed\n\n      const userValue = isString(value) ? this.picker.parse(value) : value; // Set state for handling value change\n\n      this.doFormatInput = formatInput;\n      this.doHidePopover = hidePopover;\n      this.doAdjustPageRange = adjustPageRange; // Sanitize and assign new value\n\n      this.value_ = this.picker.filterDisabled({\n        value: this.picker.normalize(userValue),\n        disabled: this.disabledAttribute,\n        fallbackValue: this.value_\n      });\n    },\n\n    formatInput() {\n      this.$nextTick(() => {\n        const value = this.picker.hasValue(this.dragValue) ? this.dragValue : this.value_;\n        this.inputValue = this.picker.format(value);\n      });\n    },\n\n    hidePopover() {\n      const popover = this.$refs.popover;\n\n      if (popover) {\n        popover.hide({\n          priority: 10,\n          delay: 250\n        });\n      }\n    },\n\n    adjustPageRange() {\n      if (this.picker.hasValue(this.value_) && this.$refs.calendar) {\n        this.$refs.calendar.showPageRange(this.picker.getPageRange(this.value_));\n      }\n    }\n\n  }\n};",{"version":3,"sources":["DatePicker.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport Calendar from './Calendar';\r\nimport Popover from './Popover';\r\nimport PopoverRef from './PopoverRef';\r\nimport SinglePicker from '../utils/pickers/single';\r\nimport MultiplePicker from '../utils/pickers/multiple';\r\nimport RangePicker from '../utils/pickers/range';\r\nimport {\r\n  rootMixin,\r\n  propOrDefaultMixin,\r\n  safeScopedSlotMixin,\r\n} from '../utils/mixins';\r\nimport { addTapOrClickHandler } from '../utils/touch';\r\nimport { createGuid, elementContains, on, off } from '../utils/helpers';\r\nimport { isString, isArray } from '../utils/_';\r\nimport '../styles/tailwind-lib.css';\r\n\r\nexport default {\r\n  name: 'DatePicker',\r\n  render(h) {\r\n    const calendar = () =>\r\n      h(Calendar, {\r\n        attrs: {\r\n          ...this.$attrs,\r\n          attributes: this.attributes_,\r\n          theme: this.$theme,\r\n          locale: this.$locale,\r\n        },\r\n        props: {\r\n          minDate: this.minDate,\r\n          maxDate: this.maxDate,\r\n          disabledDates: this.disabledDates,\r\n          availableDates: this.availableDates,\r\n        },\r\n        on: {\r\n          ...this.$listeners,\r\n          dayclick: this.onDayClick,\r\n          daymouseenter: this.onDayMouseEnter,\r\n          daykeydown: this.onDayKeydown,\r\n          dayfocusin: this.onDayFocusIn,\r\n        },\r\n        scopedSlots: this.$scopedSlots,\r\n        ref: 'calendar',\r\n      });\r\n    // If inline just return the calendar\r\n    if (this.isInline) return calendar();\r\n    // Render the slot or ihput\r\n    const inputSlot =\r\n      this.safeScopedSlot('default', {\r\n        inputClass: this.inputClass,\r\n        inputValue: this.inputValue,\r\n        inputProps: this.inputProps_,\r\n        inputEvents: this.inputEvents,\r\n        isDragging: !!this.dragValue,\r\n        updateValue: this.updateValue,\r\n        hidePopover: this.hidePopover,\r\n      }) ||\r\n      h('input', {\r\n        class: this.inputClass,\r\n        attrs: this.inputProps_,\r\n        domProps: {\r\n          value: this.inputValue,\r\n        },\r\n        on: this.inputEvents,\r\n      });\r\n    // Convert this span to a fragment when supported in Vue\r\n    return h('span', [\r\n      h(\r\n        PopoverRef,\r\n        {\r\n          props: {\r\n            ...this.popover_,\r\n            id: this.datePickerPopoverId,\r\n            isInteractive: true,\r\n          },\r\n        },\r\n        [inputSlot],\r\n      ),\r\n      // Picker popover\r\n      h(Popover, {\r\n        props: {\r\n          id: this.datePickerPopoverId,\r\n          placement: 'bottom-start',\r\n          contentClass: this.$theme.container,\r\n        },\r\n        on: {\r\n          beforeShow: e => this.$emit('popoverWillShow', e),\r\n          afterShow: e => this.$emit('popoverDidShow', e),\r\n          beforeHide: e => this.$emit('popoverWillHide', e),\r\n          afterHide: e => this.$emit('popoverDidHide', e),\r\n        },\r\n        scopedSlots: {\r\n          default() {\r\n            return calendar();\r\n          },\r\n        },\r\n        ref: 'popover',\r\n      }),\r\n    ]);\r\n  },\r\n  mixins: [rootMixin, propOrDefaultMixin, safeScopedSlotMixin],\r\n  props: {\r\n    mode: { type: String, default: 'single' },\r\n    value: { type: null, required: true },\r\n    isRequired: Boolean,\r\n    isInline: Boolean,\r\n    updateOnInput: Boolean,\r\n    inputDebounce: Number,\r\n    inputProps: { type: Object, default: () => ({}) },\r\n    popover: { type: Object, default: () => ({}) },\r\n    dragAttribute: Object,\r\n    selectAttribute: Object,\r\n    attributes: Array,\r\n  },\r\n  data() {\r\n    return {\r\n      value_: null,\r\n      dragValue: null,\r\n      inputValue: '',\r\n      doFormatInput: true,\r\n      doHidePopover: false,\r\n      doAdjustPageRange: false,\r\n      updateTimeout: null,\r\n      datePickerPopoverId: createGuid(),\r\n    };\r\n  },\r\n  computed: {\r\n    updateOnInput_() {\r\n      return this.propOrDefault('updateOnInput', 'datePicker.updateOnInput');\r\n    },\r\n    inputDebounce_() {\r\n      return this.propOrDefault('inputDebounce', 'datePicker.inputDebounce');\r\n    },\r\n    inputMasks() {\r\n      const inputFormat = this.$locale.masks.input;\r\n      return (isArray(inputFormat) && inputFormat) || [inputFormat];\r\n    },\r\n    inputClass() {\r\n      const inputClass = this.inputProps.class || this.$theme.datePickerInput;\r\n      const inputDragClass =\r\n        this.inputProps.dragClass || this.$theme.datePickerInputDrag;\r\n      return this.picker.hasValue(this.dragValue)\r\n        ? inputDragClass || inputClass\r\n        : inputClass;\r\n    },\r\n    inputProps_() {\r\n      // Merge the user props with local\r\n      const props = {\r\n        ...this.inputProps,\r\n        value: this.inputValue,\r\n        type: 'input',\r\n      };\r\n      // Delete class properties\r\n      delete props.class;\r\n      delete props.dragClass;\r\n      return props;\r\n    },\r\n    inputEvents() {\r\n      return {\r\n        input: this.inputInput,\r\n        change: this.inputChange,\r\n        // keydown: this.inputKeydown,\r\n        keyup: this.inputKeyup,\r\n      };\r\n    },\r\n    popover_() {\r\n      return this.propOrDefault('popover', 'datePicker.popover', 'merge');\r\n    },\r\n    canHidePopover() {\r\n      return !(\r\n        this.popover.keepVisibleOnInput ||\r\n        this.popover_.visibility !== 'visible'\r\n      );\r\n    },\r\n    selectAttribute_() {\r\n      if (!this.picker.hasValue(this.value_)) return null;\r\n      const attribute = {\r\n        key: 'select-drag',\r\n        ...this.selectAttribute,\r\n        dates: this.value_,\r\n        pinPage: true,\r\n      };\r\n      const { dot, bar, highlight, content } = attribute;\r\n      if (!dot && !bar && !highlight && !content) {\r\n        attribute.highlight = true;\r\n      }\r\n      return attribute;\r\n    },\r\n    dragAttribute_() {\r\n      if (this.mode !== 'range' || !this.picker.hasValue(this.dragValue)) {\r\n        return null;\r\n      }\r\n      const attribute = {\r\n        key: 'select-drag',\r\n        ...this.dragAttribute,\r\n        dates: this.dragValue,\r\n      };\r\n      const { dot, bar, highlight, content } = attribute;\r\n      if (!dot && !bar && !highlight && !content) {\r\n        attribute.highlight = {\r\n          startEnd: {\r\n            fillMode: 'none',\r\n          },\r\n        };\r\n      }\r\n      return attribute;\r\n    },\r\n    attributes_() {\r\n      const attrs = isArray(this.attributes) ? [...this.attributes] : [];\r\n      if (this.dragAttribute_) {\r\n        attrs.push(this.dragAttribute_);\r\n      } else if (this.selectAttribute_) {\r\n        attrs.push(this.selectAttribute_);\r\n      }\r\n      return attrs;\r\n    },\r\n    picker() {\r\n      const opts = {\r\n        locale: this.$locale,\r\n        format: d => this.$locale.format(d, this.inputMasks[0]),\r\n        parse: s => this.$locale.parse(s, this.inputMasks),\r\n      };\r\n      switch (this.mode) {\r\n        case 'multiple':\r\n          return new MultiplePicker(opts);\r\n        case 'range':\r\n          return new RangePicker(opts);\r\n        default:\r\n          return new SinglePicker(opts);\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    mode() {\r\n      // Clear value on select mode change\r\n      this.value_ = null;\r\n    },\r\n    value: {\r\n      handler() {\r\n        this.value_ = this.picker.filterDisabled({\r\n          value: this.value,\r\n          isRequired: this.isRequired,\r\n          disabled: this.disabledAttribute,\r\n          fallbackValue: null,\r\n        });\r\n        if (this.value && !this.value_) {\r\n          this.$emit('input', null);\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n    value_: {\r\n      handler(val) {\r\n        // Only emit events for internal updates and value changes\r\n        if (!this.picker.valuesAreEqual(val, this.value)) {\r\n          this.$emit('input', val);\r\n        }\r\n        // Execute side-effects for non-inline pickers\r\n        if (!this.isInline) {\r\n          if (this.doFormatInput) this.formatInput();\r\n          if (this.doHidePopover) this.hidePopover();\r\n          if (this.doAdjustPageRange) this.adjustPageRange();\r\n        }\r\n        this.doFormatInput = true;\r\n        this.doHidePopover = false;\r\n        this.doAdjustPageRange = false;\r\n      },\r\n      immediate: true,\r\n    },\r\n    dragValue(val) {\r\n      this.formatInput();\r\n      this.$emit('drag', this.picker.normalize(val));\r\n    },\r\n  },\r\n  mounted() {\r\n    // Handle escape key presses\r\n    on(document, 'keydown', this.onDocumentKeyDown);\r\n    // Clear drag on background click\r\n    const offTapOrClickHandler = addTapOrClickHandler(document, e => {\r\n      if (\r\n        document.body.contains(e.target) &&\r\n        !elementContains(this.$el, e.target) &&\r\n        this.dragValue\r\n      ) {\r\n        this.dragValue = null;\r\n      }\r\n    });\r\n    // Clean up handlers\r\n    this.$once('beforeDestroy', () => {\r\n      off(document, 'keydown', this.onDocumentKeyDown);\r\n      offTapOrClickHandler();\r\n    });\r\n  },\r\n  methods: {\r\n    dateIsValid(date) {\r\n      if (!date) return true;\r\n      return (\r\n        !!this.disabledAttribute && !this.disabledAttribute.intersectsDate(date)\r\n      );\r\n    },\r\n    onDocumentKeyDown(e) {\r\n      // Clear drag on escape keydown\r\n      if (this.dragValue && e.keyCode === 27) {\r\n        this.dragValue = null;\r\n      }\r\n    },\r\n    onDayClick(day) {\r\n      this.picker.handleDayClick(day, this);\r\n      // Re-emit event\r\n      this.$emit('dayclick', day);\r\n    },\r\n    onDayMouseEnter(day) {\r\n      this.picker.handleDayMouseEnter(day, this);\r\n      // Re-emit event\r\n      this.$emit('daymouseenter', day);\r\n    },\r\n    onDayFocusIn(day) {\r\n      this.picker.handleDayMouseEnter(day, this);\r\n      // Re-emit event\r\n      this.$emit('dayfocusin', day);\r\n    },\r\n    onDayKeydown(day) {\r\n      switch (day.event.key) {\r\n        case ' ':\r\n        case 'Enter': {\r\n          this.picker.handleDayClick(day, this);\r\n          day.event.preventDefault();\r\n          break;\r\n        }\r\n        case 'Escape': {\r\n          this.hidePopover();\r\n        }\r\n      }\r\n      // Re-emit event\r\n      this.$emit('daykeydown', day);\r\n    },\r\n    inputInput(e) {\r\n      this.inputValue = e.target.value;\r\n      if (this.updateOnInput_) {\r\n        this.updateValue(this.inputValue, {\r\n          formatInput: false,\r\n          hidePopover: false,\r\n          adjustPageRange: true,\r\n          debounce: this.inputDebounce_,\r\n        });\r\n      }\r\n    },\r\n    inputChange() {\r\n      this.updateValue(this.inputValue, {\r\n        formatInput: true,\r\n        hidePopover: false,\r\n        adjustPageRange: false,\r\n      });\r\n    },\r\n    inputKeyup(e) {\r\n      // Escape key\r\n      if (e.keyCode === 27) {\r\n        this.updateValue(this.value_, {\r\n          formatInput: true,\r\n          hidePopover: true,\r\n          adjustPageRange: false,\r\n        });\r\n      }\r\n    },\r\n    updateValue(\r\n      value = this.inputValue,\r\n      { formatInput, hidePopover, adjustPageRange, debounce } = {},\r\n    ) {\r\n      clearTimeout(this.updateTimeout);\r\n      if (debounce === undefined || debounce < 0) {\r\n        this.forceUpdateValue(value, {\r\n          formatInput,\r\n          hidePopover,\r\n          adjustPageRange,\r\n        });\r\n      } else {\r\n        this.updateTimeout = setTimeout(() => {\r\n          this.updateTimeout = null;\r\n          this.forceUpdateValue(value, {\r\n            formatInput,\r\n            hidePopover,\r\n            adjustPageRange,\r\n          });\r\n        }, debounce);\r\n      }\r\n    },\r\n    forceUpdateValue(value, { formatInput, hidePopover, adjustPageRange }) {\r\n      // Reassign input value for good measure\r\n      this.inputValue = isString(value) ? value : this.inputValue;\r\n      // Parse value if needed\r\n      const userValue = isString(value) ? this.picker.parse(value) : value;\r\n      // Set state for handling value change\r\n      this.doFormatInput = formatInput;\r\n      this.doHidePopover = hidePopover;\r\n      this.doAdjustPageRange = adjustPageRange;\r\n      // Sanitize and assign new value\r\n      this.value_ = this.picker.filterDisabled({\r\n        value: this.picker.normalize(userValue),\r\n        disabled: this.disabledAttribute,\r\n        fallbackValue: this.value_,\r\n      });\r\n    },\r\n    formatInput() {\r\n      this.$nextTick(() => {\r\n        const value = this.picker.hasValue(this.dragValue)\r\n          ? this.dragValue\r\n          : this.value_;\r\n        this.inputValue = this.picker.format(value);\r\n      });\r\n    },\r\n    hidePopover() {\r\n      const popover = this.$refs.popover;\r\n      if (popover) {\r\n        popover.hide({ priority: 10, delay: 250 });\r\n      }\r\n    },\r\n    adjustPageRange() {\r\n      if (this.picker.hasValue(this.value_) && this.$refs.calendar) {\r\n        this.$refs.calendar.showPageRange(\r\n          this.picker.getPageRange(this.value_),\r\n        );\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"postcss\" scoped>\r\n::v-deep .vc-container {\r\n  border: none;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"}]}