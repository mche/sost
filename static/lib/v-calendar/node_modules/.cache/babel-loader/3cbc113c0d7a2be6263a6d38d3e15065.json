{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js??ref--13-0!/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/touch.js","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/touch.js","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { on, off } from './helpers';\nimport { isFunction } from './_'; // This function detects taps or clicks\n// Can't just rely on 'click' event because of oddities in mobile Safari\n\nexport const addTapOrClickHandler = (element, handler) => {\n  if (!element || !element.addEventListener || !isFunction(handler)) {\n    return null;\n  } // State variables\n\n\n  let tap = false;\n  let disableClick = false;\n\n  const touchstart = () => tap = true;\n\n  const touchmove = () => tap = false;\n\n  const touchend = event => {\n    if (tap) {\n      // Reset state\n      tap = false; // Disable click so we don't call handler twice\n\n      disableClick = true;\n      handler(event);\n      return;\n    } // Make sure tap event hasn't disabled click\n\n\n    if (event.type === 'click' && !disableClick) {\n      handler(event);\n    } // Reset state\n\n\n    disableClick = false;\n  }; // Add event handlers\n\n\n  on(element, 'touchstart', touchstart);\n  on(element, 'touchmove', touchmove);\n  on(element, 'click', touchend);\n  on(element, 'touchend', touchend); // Return function that removes event handlers\n\n  return () => {\n    off(element, 'touchstart', touchstart);\n    off(element, 'touchmove', touchmove);\n    off(element, 'click', touchend);\n    off(element, 'touchend', touchend);\n  };\n};\nexport const addHorizontalSwipeHandler = (element, handler, {\n  maxSwipeTime,\n  minHorizontalSwipeDistance,\n  maxVerticalSwipeDistance\n}) => {\n  if (!element || !element.addEventListener || !isFunction(handler)) {\n    return null;\n  } // State variables\n\n\n  let startX = 0;\n  let startY = 0;\n  let startTime = null;\n  let isSwiping = false; // Touch start handler\n\n  function touchStart(e) {\n    const t = e.changedTouches[0];\n    startX = t.screenX;\n    startY = t.screenY;\n    startTime = new Date().getTime();\n    isSwiping = true;\n  } // Touch end handler\n\n\n  function touchEnd(e) {\n    if (!isSwiping) return;\n    isSwiping = false;\n    const t = e.changedTouches[0];\n    const deltaX = t.screenX - startX;\n    const deltaY = t.screenY - startY;\n    const deltaTime = new Date().getTime() - startTime;\n\n    if (deltaTime < maxSwipeTime) {\n      if (Math.abs(deltaX) >= minHorizontalSwipeDistance && Math.abs(deltaY) <= maxVerticalSwipeDistance) {\n        const arg = {\n          toLeft: false,\n          toRight: false\n        };\n\n        if (deltaX < 0) {\n          // Swipe to the left\n          arg.toLeft = true;\n        } else {\n          // Swipe to the right\n          arg.toRight = true;\n        }\n\n        handler(arg);\n      }\n    }\n  } // Add event handlers\n\n\n  on(element, 'touchstart', touchStart); // on(element, 'touchmove', touchmove);\n\n  on(element, 'touchend', touchEnd); // Return function that removes event handlers\n\n  return () => {\n    off(element, 'touchstart', touchStart); // off(element, 'touchmove', touchmove);\n\n    off(element, 'touchend', touchEnd);\n  };\n};",{"version":3,"sources":["/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/touch.js"],"names":["on","off","isFunction","addTapOrClickHandler","element","handler","addEventListener","tap","disableClick","touchstart","touchmove","touchend","event","type","addHorizontalSwipeHandler","maxSwipeTime","minHorizontalSwipeDistance","maxVerticalSwipeDistance","startX","startY","startTime","isSwiping","touchStart","e","t","changedTouches","screenX","screenY","Date","getTime","touchEnd","deltaX","deltaY","deltaTime","Math","abs","arg","toLeft","toRight"],"mappings":"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","sourcesContent":["import { on, off } from './helpers';\nimport { isFunction } from './_';\n\n// This function detects taps or clicks\n// Can't just rely on 'click' event because of oddities in mobile Safari\nexport const addTapOrClickHandler = (element, handler) => {\n  if (!element || !element.addEventListener || !isFunction(handler)) {\n    return null;\n  }\n  // State variables\n  let tap = false;\n  let disableClick = false;\n  const touchstart = () => (tap = true);\n  const touchmove = () => (tap = false);\n  const touchend = event => {\n    if (tap) {\n      // Reset state\n      tap = false;\n      // Disable click so we don't call handler twice\n      disableClick = true;\n      handler(event);\n      return;\n    }\n    // Make sure tap event hasn't disabled click\n    if (event.type === 'click' && !disableClick) {\n      handler(event);\n    }\n    // Reset state\n    disableClick = false;\n  };\n  // Add event handlers\n  on(element, 'touchstart', touchstart);\n  on(element, 'touchmove', touchmove);\n  on(element, 'click', touchend);\n  on(element, 'touchend', touchend);\n  // Return function that removes event handlers\n  return () => {\n    off(element, 'touchstart', touchstart);\n    off(element, 'touchmove', touchmove);\n    off(element, 'click', touchend);\n    off(element, 'touchend', touchend);\n  };\n};\n\nexport const addHorizontalSwipeHandler = (\n  element,\n  handler,\n  { maxSwipeTime, minHorizontalSwipeDistance, maxVerticalSwipeDistance },\n) => {\n  if (!element || !element.addEventListener || !isFunction(handler)) {\n    return null;\n  }\n  // State variables\n  let startX = 0;\n  let startY = 0;\n  let startTime = null;\n  let isSwiping = false;\n  // Touch start handler\n  function touchStart(e) {\n    const t = e.changedTouches[0];\n    startX = t.screenX;\n    startY = t.screenY;\n    startTime = new Date().getTime();\n    isSwiping = true;\n  }\n  // Touch end handler\n  function touchEnd(e) {\n    if (!isSwiping) return;\n    isSwiping = false;\n    const t = e.changedTouches[0];\n    const deltaX = t.screenX - startX;\n    const deltaY = t.screenY - startY;\n    const deltaTime = new Date().getTime() - startTime;\n    if (deltaTime < maxSwipeTime) {\n      if (\n        Math.abs(deltaX) >= minHorizontalSwipeDistance &&\n        Math.abs(deltaY) <= maxVerticalSwipeDistance\n      ) {\n        const arg = { toLeft: false, toRight: false };\n        if (deltaX < 0) {\n          // Swipe to the left\n          arg.toLeft = true;\n        } else {\n          // Swipe to the right\n          arg.toRight = true;\n        }\n        handler(arg);\n      }\n    }\n  }\n  // Add event handlers\n  on(element, 'touchstart', touchStart);\n  // on(element, 'touchmove', touchmove);\n  on(element, 'touchend', touchEnd);\n  // Return function that removes event handlers\n  return () => {\n    off(element, 'touchstart', touchStart);\n    // off(element, 'touchmove', touchmove);\n    off(element, 'touchend', touchEnd);\n  };\n};\n"]}]}