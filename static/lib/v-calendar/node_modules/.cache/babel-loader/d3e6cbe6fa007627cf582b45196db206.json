{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js??ref--13-0!/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/pickers/range.js","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/pickers/range.js","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { pageForDate, getMaxPage, addPages, datesAreEqual } from '../helpers';\nimport DateInfo from '../dateInfo';\nimport { isDate, isObject } from '../_';\nexport default class RangePicker {\n  constructor({\n    locale,\n    format,\n    parse\n  }) {\n    this._locale = locale;\n    this._format = format;\n    this._parse = parse;\n  }\n\n  hasValue(value) {\n    return isObject(value) && isDate(value.start) && isDate(value.end);\n  }\n\n  normalize(value) {\n    if (!this.hasValue(value)) return null;\n    const {\n      start,\n      end\n    } = new DateInfo({\n      start: new Date(value.start),\n      end: new Date(value.end)\n    }, {\n      locale: this._locale\n    });\n    return {\n      start,\n      end\n    };\n  }\n\n  format(value) {\n    const nValue = this.normalize(value);\n    if (!nValue) return '';\n    const {\n      start,\n      end\n    } = nValue;\n\n    const startText = this._format(start);\n\n    const endText = this._format(end);\n\n    if (!startText || !endText) return '';\n    return `${startText} - ${endText}`;\n  }\n\n  parse(text) {\n    let start;\n    let end;\n    const separator = [' - ', '-'].find(s => text.includes(s));\n    const dateTexts = text.split(separator).map(s => s.trim());\n\n    if (dateTexts.length >= 2) {\n      start = this._parse(dateTexts[0]);\n      end = this._parse(dateTexts[1]);\n    }\n\n    return start && end ? this.normalize({\n      start,\n      end\n    }) : null;\n  }\n\n  filterDisabled({\n    value,\n    isRequired,\n    disabled,\n    fallbackValue\n  }) {\n    let newValue = isRequired ? fallbackValue : null;\n\n    if (this.hasValue(value) && (!disabled || !disabled.intersectsDate(value))) {\n      newValue = value;\n    }\n\n    return newValue;\n  }\n\n  valuesAreEqual(a, b) {\n    const aHasValue = this.hasValue(a);\n    const bHasValue = this.hasValue(b);\n    if (!aHasValue && !bHasValue) return true;\n    if (aHasValue !== bHasValue) return false;\n    return datesAreEqual(a.start, b.start) && datesAreEqual(a.end, b.end);\n  }\n\n  getPageRange(value) {\n    if (!this.hasValue(value)) return null;\n    const from = pageForDate(value.start);\n    const to = getMaxPage(pageForDate(value.end), addPages(from, 1));\n    return {\n      from,\n      to\n    };\n  }\n\n  handleDayClick(day, picker) {\n    const {\n      dateTime\n    } = day; // Start new drag selection if not dragging\n\n    if (!picker.dragValue) {\n      // Update drag value if it is valid\n      const newDragValue = {\n        start: new Date(dateTime),\n        end: new Date(dateTime)\n      }; // Assign drag value if it is valid\n\n      if (picker.dateIsValid(newDragValue)) {\n        picker.dragValue = newDragValue;\n      }\n    } else {\n      // Update selected value if it is valid\n      const newValue = this.normalize({\n        start: new Date(picker.dragValue.start.getTime()),\n        end: new Date(dateTime)\n      }); // Assign new value if it is valid\n\n      if (picker.dateIsValid(newValue)) {\n        picker.doFormatInput = true;\n        picker.doHidePopover = true; // Clear drag selection\n\n        picker.dragValue = null;\n        picker.value_ = newValue;\n      }\n    }\n  }\n\n  handleDayMouseEnter(day, picker) {\n    const {\n      dateTime\n    } = day; // Make sure drag has been initialized\n\n    if (picker.dragValue) {\n      // Calculate the new dragged value\n      const newDragValue = {\n        start: new Date(picker.dragValue.start.getTime()),\n        end: new Date(dateTime)\n      }; // Assign drag value if it is valid\n\n      if (picker.dateIsValid(newDragValue)) {\n        picker.dragValue = newDragValue;\n      }\n    }\n  }\n\n}",{"version":3,"sources":["/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/pickers/range.js"],"names":["pageForDate","getMaxPage","addPages","datesAreEqual","DateInfo","isDate","isObject","RangePicker","constructor","locale","format","parse","_locale","_format","_parse","hasValue","value","start","end","normalize","Date","nValue","startText","endText","text","separator","find","s","includes","dateTexts","split","map","trim","length","filterDisabled","isRequired","disabled","fallbackValue","newValue","intersectsDate","valuesAreEqual","a","b","aHasValue","bHasValue","getPageRange","from","to","handleDayClick","day","picker","dateTime","dragValue","newDragValue","dateIsValid","getTime","doFormatInput","doHidePopover","value_","handleDayMouseEnter"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,QAAlC,EAA4CC,aAA5C,QAAiE,YAAjE;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,MAAjC;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC/BC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,GAAD,EAA4B;AACrC,SAAKC,OAAL,GAAeH,MAAf;AACA,SAAKI,OAAL,GAAeH,MAAf;AACA,SAAKI,MAAL,GAAcH,KAAd;AACD;;AAEDI,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,WAAOV,QAAQ,CAACU,KAAD,CAAR,IAAmBX,MAAM,CAACW,KAAK,CAACC,KAAP,CAAzB,IAA0CZ,MAAM,CAACW,KAAK,CAACE,GAAP,CAAvD;AACD;;AAEDC,EAAAA,SAAS,CAACH,KAAD,EAAQ;AACf,QAAI,CAAC,KAAKD,QAAL,CAAcC,KAAd,CAAL,EAA2B,OAAO,IAAP;AAC3B,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAiB,IAAId,QAAJ,CACrB;AACEa,MAAAA,KAAK,EAAE,IAAIG,IAAJ,CAASJ,KAAK,CAACC,KAAf,CADT;AAEEC,MAAAA,GAAG,EAAE,IAAIE,IAAJ,CAASJ,KAAK,CAACE,GAAf;AAFP,KADqB,EAKrB;AAAET,MAAAA,MAAM,EAAE,KAAKG;AAAf,KALqB,CAAvB;AAOA,WAAO;AAAEK,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAP;AACD;;AAEDR,EAAAA,MAAM,CAACM,KAAD,EAAQ;AACZ,UAAMK,MAAM,GAAG,KAAKF,SAAL,CAAeH,KAAf,CAAf;AACA,QAAI,CAACK,MAAL,EAAa,OAAO,EAAP;AACb,UAAM;AAAEJ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAiBG,MAAvB;;AACA,UAAMC,SAAS,GAAG,KAAKT,OAAL,CAAaI,KAAb,CAAlB;;AACA,UAAMM,OAAO,GAAG,KAAKV,OAAL,CAAaK,GAAb,CAAhB;;AACA,QAAI,CAACI,SAAD,IAAc,CAACC,OAAnB,EAA4B,OAAO,EAAP;AAC5B,WAAQ,GAAED,SAAU,MAAKC,OAAQ,EAAjC;AACD;;AAEDZ,EAAAA,KAAK,CAACa,IAAD,EAAO;AACV,QAAIP,KAAJ;AACA,QAAIC,GAAJ;AACA,UAAMO,SAAS,GAAG,CAAC,KAAD,EAAQ,GAAR,EAAaC,IAAb,CAAkBC,CAAC,IAAIH,IAAI,CAACI,QAAL,CAAcD,CAAd,CAAvB,CAAlB;AACA,UAAME,SAAS,GAAGL,IAAI,CAACM,KAAL,CAAWL,SAAX,EAAsBM,GAAtB,CAA0BJ,CAAC,IAAIA,CAAC,CAACK,IAAF,EAA/B,CAAlB;;AACA,QAAIH,SAAS,CAACI,MAAV,IAAoB,CAAxB,EAA2B;AACzBhB,MAAAA,KAAK,GAAG,KAAKH,MAAL,CAAYe,SAAS,CAAC,CAAD,CAArB,CAAR;AACAX,MAAAA,GAAG,GAAG,KAAKJ,MAAL,CAAYe,SAAS,CAAC,CAAD,CAArB,CAAN;AACD;;AACD,WAAOZ,KAAK,IAAIC,GAAT,GAAe,KAAKC,SAAL,CAAe;AAAEF,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf,CAAf,GAAgD,IAAvD;AACD;;AAEDgB,EAAAA,cAAc,CAAC;AAAElB,IAAAA,KAAF;AAASmB,IAAAA,UAAT;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,GAAD,EAAiD;AAC7D,QAAIC,QAAQ,GAAGH,UAAU,GAAGE,aAAH,GAAmB,IAA5C;;AACA,QACE,KAAKtB,QAAL,CAAcC,KAAd,MACC,CAACoB,QAAD,IAAa,CAACA,QAAQ,CAACG,cAAT,CAAwBvB,KAAxB,CADf,CADF,EAGE;AACAsB,MAAAA,QAAQ,GAAGtB,KAAX;AACD;;AACD,WAAOsB,QAAP;AACD;;AAEDE,EAAAA,cAAc,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACnB,UAAMC,SAAS,GAAG,KAAK5B,QAAL,CAAc0B,CAAd,CAAlB;AACA,UAAMG,SAAS,GAAG,KAAK7B,QAAL,CAAc2B,CAAd,CAAlB;AACA,QAAI,CAACC,SAAD,IAAc,CAACC,SAAnB,EAA8B,OAAO,IAAP;AAC9B,QAAID,SAAS,KAAKC,SAAlB,EAA6B,OAAO,KAAP;AAC7B,WAAOzC,aAAa,CAACsC,CAAC,CAACxB,KAAH,EAAUyB,CAAC,CAACzB,KAAZ,CAAb,IAAmCd,aAAa,CAACsC,CAAC,CAACvB,GAAH,EAAQwB,CAAC,CAACxB,GAAV,CAAvD;AACD;;AAED2B,EAAAA,YAAY,CAAC7B,KAAD,EAAQ;AAClB,QAAI,CAAC,KAAKD,QAAL,CAAcC,KAAd,CAAL,EAA2B,OAAO,IAAP;AAC3B,UAAM8B,IAAI,GAAG9C,WAAW,CAACgB,KAAK,CAACC,KAAP,CAAxB;AACA,UAAM8B,EAAE,GAAG9C,UAAU,CAACD,WAAW,CAACgB,KAAK,CAACE,GAAP,CAAZ,EAAyBhB,QAAQ,CAAC4C,IAAD,EAAO,CAAP,CAAjC,CAArB;AACA,WAAO;AAAEA,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAP;AACD;;AAEDC,EAAAA,cAAc,CAACC,GAAD,EAAMC,MAAN,EAAc;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAeF,GAArB,CAD0B,CAE1B;;AACA,QAAI,CAACC,MAAM,CAACE,SAAZ,EAAuB;AACrB;AACA,YAAMC,YAAY,GAAG;AACnBpC,QAAAA,KAAK,EAAE,IAAIG,IAAJ,CAAS+B,QAAT,CADY;AAEnBjC,QAAAA,GAAG,EAAE,IAAIE,IAAJ,CAAS+B,QAAT;AAFc,OAArB,CAFqB,CAMrB;;AACA,UAAID,MAAM,CAACI,WAAP,CAAmBD,YAAnB,CAAJ,EAAsC;AACpCH,QAAAA,MAAM,CAACE,SAAP,GAAmBC,YAAnB;AACD;AACF,KAVD,MAUO;AACL;AACA,YAAMf,QAAQ,GAAG,KAAKnB,SAAL,CAAe;AAC9BF,QAAAA,KAAK,EAAE,IAAIG,IAAJ,CAAS8B,MAAM,CAACE,SAAP,CAAiBnC,KAAjB,CAAuBsC,OAAvB,EAAT,CADuB;AAE9BrC,QAAAA,GAAG,EAAE,IAAIE,IAAJ,CAAS+B,QAAT;AAFyB,OAAf,CAAjB,CAFK,CAML;;AACA,UAAID,MAAM,CAACI,WAAP,CAAmBhB,QAAnB,CAAJ,EAAkC;AAChCY,QAAAA,MAAM,CAACM,aAAP,GAAuB,IAAvB;AACAN,QAAAA,MAAM,CAACO,aAAP,GAAuB,IAAvB,CAFgC,CAGhC;;AACAP,QAAAA,MAAM,CAACE,SAAP,GAAmB,IAAnB;AACAF,QAAAA,MAAM,CAACQ,MAAP,GAAgBpB,QAAhB;AACD;AACF;AACF;;AAEDqB,EAAAA,mBAAmB,CAACV,GAAD,EAAMC,MAAN,EAAc;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAeF,GAArB,CAD+B,CAE/B;;AACA,QAAIC,MAAM,CAACE,SAAX,EAAsB;AACpB;AACA,YAAMC,YAAY,GAAG;AACnBpC,QAAAA,KAAK,EAAE,IAAIG,IAAJ,CAAS8B,MAAM,CAACE,SAAP,CAAiBnC,KAAjB,CAAuBsC,OAAvB,EAAT,CADY;AAEnBrC,QAAAA,GAAG,EAAE,IAAIE,IAAJ,CAAS+B,QAAT;AAFc,OAArB,CAFoB,CAMpB;;AACA,UAAID,MAAM,CAACI,WAAP,CAAmBD,YAAnB,CAAJ,EAAsC;AACpCH,QAAAA,MAAM,CAACE,SAAP,GAAmBC,YAAnB;AACD;AACF;AACF;;AAnH8B","sourcesContent":["import { pageForDate, getMaxPage, addPages, datesAreEqual } from '../helpers';\nimport DateInfo from '../dateInfo';\nimport { isDate, isObject } from '../_';\n\nexport default class RangePicker {\n  constructor({ locale, format, parse }) {\n    this._locale = locale;\n    this._format = format;\n    this._parse = parse;\n  }\n\n  hasValue(value) {\n    return isObject(value) && isDate(value.start) && isDate(value.end);\n  }\n\n  normalize(value) {\n    if (!this.hasValue(value)) return null;\n    const { start, end } = new DateInfo(\n      {\n        start: new Date(value.start),\n        end: new Date(value.end),\n      },\n      { locale: this._locale },\n    );\n    return { start, end };\n  }\n\n  format(value) {\n    const nValue = this.normalize(value);\n    if (!nValue) return '';\n    const { start, end } = nValue;\n    const startText = this._format(start);\n    const endText = this._format(end);\n    if (!startText || !endText) return '';\n    return `${startText} - ${endText}`;\n  }\n\n  parse(text) {\n    let start;\n    let end;\n    const separator = [' - ', '-'].find(s => text.includes(s));\n    const dateTexts = text.split(separator).map(s => s.trim());\n    if (dateTexts.length >= 2) {\n      start = this._parse(dateTexts[0]);\n      end = this._parse(dateTexts[1]);\n    }\n    return start && end ? this.normalize({ start, end }) : null;\n  }\n\n  filterDisabled({ value, isRequired, disabled, fallbackValue }) {\n    let newValue = isRequired ? fallbackValue : null;\n    if (\n      this.hasValue(value) &&\n      (!disabled || !disabled.intersectsDate(value))\n    ) {\n      newValue = value;\n    }\n    return newValue;\n  }\n\n  valuesAreEqual(a, b) {\n    const aHasValue = this.hasValue(a);\n    const bHasValue = this.hasValue(b);\n    if (!aHasValue && !bHasValue) return true;\n    if (aHasValue !== bHasValue) return false;\n    return datesAreEqual(a.start, b.start) && datesAreEqual(a.end, b.end);\n  }\n\n  getPageRange(value) {\n    if (!this.hasValue(value)) return null;\n    const from = pageForDate(value.start);\n    const to = getMaxPage(pageForDate(value.end), addPages(from, 1));\n    return { from, to };\n  }\n\n  handleDayClick(day, picker) {\n    const { dateTime } = day;\n    // Start new drag selection if not dragging\n    if (!picker.dragValue) {\n      // Update drag value if it is valid\n      const newDragValue = {\n        start: new Date(dateTime),\n        end: new Date(dateTime),\n      };\n      // Assign drag value if it is valid\n      if (picker.dateIsValid(newDragValue)) {\n        picker.dragValue = newDragValue;\n      }\n    } else {\n      // Update selected value if it is valid\n      const newValue = this.normalize({\n        start: new Date(picker.dragValue.start.getTime()),\n        end: new Date(dateTime),\n      });\n      // Assign new value if it is valid\n      if (picker.dateIsValid(newValue)) {\n        picker.doFormatInput = true;\n        picker.doHidePopover = true;\n        // Clear drag selection\n        picker.dragValue = null;\n        picker.value_ = newValue;\n      }\n    }\n  }\n\n  handleDayMouseEnter(day, picker) {\n    const { dateTime } = day;\n    // Make sure drag has been initialized\n    if (picker.dragValue) {\n      // Calculate the new dragged value\n      const newDragValue = {\n        start: new Date(picker.dragValue.start.getTime()),\n        end: new Date(dateTime),\n      };\n      // Assign drag value if it is valid\n      if (picker.dateIsValid(newDragValue)) {\n        picker.dragValue = newDragValue;\n      }\n    }\n  }\n}\n"]}]}