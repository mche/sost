{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js??ref--13-0!/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/attributeStore.js","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/attributeStore.js","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Attribute from './attribute';\nimport { arrayHasItems, hash } from './helpers';\nexport default class AttributeStore {\n  constructor(theme, locale, attrs) {\n    this.theme = theme;\n    this.locale = locale;\n    this.map = {};\n    this.refresh(attrs, true);\n  }\n\n  refresh(attrs, reset) {\n    const map = {};\n    const list = [];\n    let pinAttr = null; // Keep record of added and deleted attributes\n\n    const adds = [];\n    const deletes = reset ? new Set() : new Set(Object.keys(this.map));\n\n    if (arrayHasItems(attrs)) {\n      attrs.forEach((attr, i) => {\n        if (!attr || !attr.dates) return;\n        const key = attr.key ? attr.key.toString() : i.toString();\n        const order = attr.order || 0;\n        const hashcode = hash(JSON.stringify(attr));\n        let exAttr = this.map[key]; // If just tracking delta changes and attribute hash hasn't changed\n\n        if (!reset && exAttr && exAttr.hashcode === hashcode) {\n          // ...don't need to replace the attribute\n          deletes.delete(key);\n        } else {\n          // Otherwise, create attribute and add to the list of adds\n          exAttr = new Attribute({\n            key,\n            order,\n            hashcode,\n            ...attr\n          }, this.theme, this.locale);\n          adds.push(exAttr);\n        } // Keep track of attribute to pin for initial page\n\n\n        if (exAttr && exAttr.pinPage) {\n          pinAttr = exAttr;\n        } // Add attribute to map and list\n\n\n        map[key] = exAttr;\n        list.push(exAttr);\n      });\n    }\n\n    this.map = map;\n    this.list = list;\n    this.pinAttr = pinAttr;\n    return {\n      adds,\n      deletes: Array.from(deletes)\n    };\n  }\n\n}",{"version":3,"sources":["/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/attributeStore.js"],"names":["Attribute","arrayHasItems","hash","AttributeStore","constructor","theme","locale","attrs","map","refresh","reset","list","pinAttr","adds","deletes","Set","Object","keys","forEach","attr","i","dates","key","toString","order","hashcode","JSON","stringify","exAttr","delete","push","pinPage","Array","from"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,aAAT,EAAwBC,IAAxB,QAAoC,WAApC;AAEA,eAAe,MAAMC,cAAN,CAAqB;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgBC,KAAhB,EAAuB;AAChC,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKE,GAAL,GAAW,EAAX;AACA,SAAKC,OAAL,CAAaF,KAAb,EAAoB,IAApB;AACD;;AAEDE,EAAAA,OAAO,CAACF,KAAD,EAAQG,KAAR,EAAe;AACpB,UAAMF,GAAG,GAAG,EAAZ;AACA,UAAMG,IAAI,GAAG,EAAb;AACA,QAAIC,OAAO,GAAG,IAAd,CAHoB,CAIpB;;AACA,UAAMC,IAAI,GAAG,EAAb;AACA,UAAMC,OAAO,GAAGJ,KAAK,GAAG,IAAIK,GAAJ,EAAH,GAAe,IAAIA,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAY,KAAKT,GAAjB,CAAR,CAApC;;AACA,QAAIP,aAAa,CAACM,KAAD,CAAjB,EAA0B;AACxBA,MAAAA,KAAK,CAACW,OAAN,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AACzB,YAAI,CAACD,IAAD,IAAS,CAACA,IAAI,CAACE,KAAnB,EAA0B;AAC1B,cAAMC,GAAG,GAAGH,IAAI,CAACG,GAAL,GAAWH,IAAI,CAACG,GAAL,CAASC,QAAT,EAAX,GAAiCH,CAAC,CAACG,QAAF,EAA7C;AACA,cAAMC,KAAK,GAAGL,IAAI,CAACK,KAAL,IAAc,CAA5B;AACA,cAAMC,QAAQ,GAAGvB,IAAI,CAACwB,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAD,CAArB;AACA,YAAIS,MAAM,GAAG,KAAKpB,GAAL,CAASc,GAAT,CAAb,CALyB,CAMzB;;AACA,YAAI,CAACZ,KAAD,IAAUkB,MAAV,IAAoBA,MAAM,CAACH,QAAP,KAAoBA,QAA5C,EAAsD;AACpD;AACAX,UAAAA,OAAO,CAACe,MAAR,CAAeP,GAAf;AACD,SAHD,MAGO;AACL;AACAM,UAAAA,MAAM,GAAG,IAAI5B,SAAJ,CACP;AACEsB,YAAAA,GADF;AAEEE,YAAAA,KAFF;AAGEC,YAAAA,QAHF;AAIE,eAAGN;AAJL,WADO,EAOP,KAAKd,KAPE,EAQP,KAAKC,MARE,CAAT;AAUAO,UAAAA,IAAI,CAACiB,IAAL,CAAUF,MAAV;AACD,SAvBwB,CAwBzB;;;AACA,YAAIA,MAAM,IAAIA,MAAM,CAACG,OAArB,EAA8B;AAC5BnB,UAAAA,OAAO,GAAGgB,MAAV;AACD,SA3BwB,CA4BzB;;;AACApB,QAAAA,GAAG,CAACc,GAAD,CAAH,GAAWM,MAAX;AACAjB,QAAAA,IAAI,CAACmB,IAAL,CAAUF,MAAV;AACD,OA/BD;AAgCD;;AACD,SAAKpB,GAAL,GAAWA,GAAX;AACA,SAAKG,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,WAAO;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAO,EAAEkB,KAAK,CAACC,IAAN,CAAWnB,OAAX;AAAjB,KAAP;AACD;;AArDiC","sourcesContent":["import Attribute from './attribute';\nimport { arrayHasItems, hash } from './helpers';\n\nexport default class AttributeStore {\n  constructor(theme, locale, attrs) {\n    this.theme = theme;\n    this.locale = locale;\n    this.map = {};\n    this.refresh(attrs, true);\n  }\n\n  refresh(attrs, reset) {\n    const map = {};\n    const list = [];\n    let pinAttr = null;\n    // Keep record of added and deleted attributes\n    const adds = [];\n    const deletes = reset ? new Set() : new Set(Object.keys(this.map));\n    if (arrayHasItems(attrs)) {\n      attrs.forEach((attr, i) => {\n        if (!attr || !attr.dates) return;\n        const key = attr.key ? attr.key.toString() : i.toString();\n        const order = attr.order || 0;\n        const hashcode = hash(JSON.stringify(attr));\n        let exAttr = this.map[key];\n        // If just tracking delta changes and attribute hash hasn't changed\n        if (!reset && exAttr && exAttr.hashcode === hashcode) {\n          // ...don't need to replace the attribute\n          deletes.delete(key);\n        } else {\n          // Otherwise, create attribute and add to the list of adds\n          exAttr = new Attribute(\n            {\n              key,\n              order,\n              hashcode,\n              ...attr,\n            },\n            this.theme,\n            this.locale,\n          );\n          adds.push(exAttr);\n        }\n        // Keep track of attribute to pin for initial page\n        if (exAttr && exAttr.pinPage) {\n          pinAttr = exAttr;\n        }\n        // Add attribute to map and list\n        map[key] = exAttr;\n        list.push(exAttr);\n      });\n    }\n    this.map = map;\n    this.list = list;\n    this.pinAttr = pinAttr;\n    return { adds, deletes: Array.from(deletes) };\n  }\n}\n"]}]}