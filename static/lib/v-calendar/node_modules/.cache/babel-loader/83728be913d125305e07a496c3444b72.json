{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/Calendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/Calendar.vue","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { addDays, addMonths, addYears } from 'date-fns';\nimport Popover from './Popover';\nimport PopoverRow from './PopoverRow';\nimport Grid from './Grid';\nimport CalendarPane from './CalendarPane';\nimport CustomTransition from './CustomTransition';\nimport SvgIcon from './SvgIcon';\nimport AttributeStore from '../utils/attributeStore';\nimport { propOrDefaultMixin, rootMixin, safeScopedSlotMixin } from '../utils/mixins';\nimport { addHorizontalSwipeHandler } from '../utils/touch';\nimport { pageForDate, pageForThisMonth, addPages, pageIsValid, pageIsEqualToPage, pageIsBeforePage, pageIsAfterPage, pageIsBetweenPages, createGuid, arrayHasItems, onSpaceOrEnter } from '../utils/helpers';\nimport { isNumber, isDate, isObject, hasAny, omit, head, last } from '../utils/_';\nimport '../styles/tailwind-lib.css';\nexport default {\n  name: 'Calendar',\n\n  render(h) {\n    // Renderer for calendar panes\n    const panes = this.pages.map((page, i) => h(CalendarPane, {\n      attrs: { ...this.$attrs,\n        attributes: this.store\n      },\n      props: {\n        titlePosition: this.titlePosition_,\n        page,\n        minPage: this.minPage_,\n        maxPage: this.maxPage_,\n        canMove: this.canMove\n      },\n      on: { ...this.$listeners,\n        'update:page': e => this.refreshPages({\n          page: e,\n          position: i + 1\n        }),\n        dayfocusin: e => {\n          this.lastFocusedDay = e;\n          this.$emit('dayfocusin', e);\n        },\n        dayfocusout: e => {\n          this.lastFocusedDay = null;\n          this.$emit('dayfocusout', e);\n        }\n      },\n      scopedSlots: this.$scopedSlots,\n      key: page.key,\n      ref: 'pages',\n      refInFor: true\n    })); // Renderer for calendar arrows\n\n    const getArrowButton = isPrev => {\n      const click = () => this.move(isPrev ? -this.step_ : this.step_);\n\n      const keydown = e => onSpaceOrEnter(e, click);\n\n      const isDisabled = isPrev ? !this.canMovePrev : !this.canMoveNext;\n      return h('div', {\n        class: [`vc-flex vc-justify-center vc-items-center vc-cursor-pointer vc-select-none ${isDisabled ? 'vc-opacity-25 vc-pointer-events-none vc-cursor-not-allowed' : 'vc-pointer-events-auto'}`, this.$theme.arrows],\n        attrs: {\n          role: 'button'\n        },\n        on: {\n          click,\n          keydown\n        }\n      }, [(isPrev ? this.safeScopedSlot('header-left-button', {\n        click\n      }) : this.safeScopedSlot('header-right-button', {\n        click\n      })) || h(SvgIcon, {\n        props: {\n          name: isPrev ? 'left-arrow' : 'right-arrow'\n        }\n      })]);\n    }; // Day popover\n\n\n    const getDayPopover = () => h(Popover, {\n      props: {\n        id: this.sharedState.dayPopoverId,\n        contentClass: this.$theme.dayPopoverContainer\n      },\n      scopedSlots: {\n        default: ({\n          args: day,\n          updateLayout,\n          hide\n        }) => {\n          const attributes = Object.values(day.attributes).filter(a => a.popover);\n          const masks = this.$locale.masks;\n          const format = this.format;\n          const dayTitle = format(day.date, masks.dayPopover);\n          return this.safeScopedSlot('day-popover', {\n            day,\n            attributes,\n            masks,\n            format,\n            dayTitle,\n            updateLayout,\n            hide\n          }) || h('div', [// Show popover header only if format is defined\n          masks.dayPopover && h('div', {\n            class: ['vc-text-center', this.$theme.dayPopoverHeader]\n          }, [dayTitle]), attributes.map(attribute => h(PopoverRow, {\n            key: attribute.key,\n            props: {\n              attribute\n            }\n          }))]);\n        }\n      }\n    }); // Renderer for calendar container\n\n\n    const getContainerGrid = () => h('div', {\n      attrs: {\n        'data-helptext': 'Press the arrow keys to navigate by day, Home and End to navigate to week ends, PageUp and PageDown to navigate by month, Alt+PageUp and Alt+PageDown to navigate by year'\n      },\n      class: ['vc-container', 'vc-reset', {\n        'vc-min-w-full': this.isExpanded\n      }, this.$theme.container],\n      on: {\n        keydown: this.handleKeydown,\n        mouseup: e => e.preventDefault()\n      },\n      ref: 'container'\n    }, [h('div', {\n      class: ['vc-w-full vc-relative', {\n        'vc-overflow-hidden': this.inTransition\n      }]\n    }, [h(CustomTransition, {\n      props: {\n        name: this.transitionName\n      },\n      on: {\n        beforeEnter: () => {\n          this.inTransition = true;\n        },\n        afterEnter: () => {\n          this.inTransition = false;\n        }\n      }\n    }, [h(Grid, {\n      class: 'grid',\n      props: {\n        rows: this.rows,\n        columns: this.columns,\n        columnWidth: 'minmax(256px, 1fr)',\n        disableFocus: true\n      },\n      attrs: { ...this.$attrs\n      },\n      key: arrayHasItems(this.pages) ? this.pages[0].key : ''\n    }, panes)]), h('div', {\n      class: [`vc-arrows-container title-${this.titlePosition_}`]\n    }, [getArrowButton(true), getArrowButton(false)])]), getDayPopover()]);\n\n    return getContainerGrid();\n  },\n\n  mixins: [propOrDefaultMixin, rootMixin, safeScopedSlotMixin],\n\n  provide() {\n    return {\n      sharedState: this.sharedState\n    };\n  },\n\n  props: {\n    rows: {\n      type: Number,\n      default: 1\n    },\n    columns: {\n      type: Number,\n      default: 1\n    },\n    step: Number,\n    titlePosition: String,\n    isExpanded: Boolean,\n    fromDate: Date,\n    toDate: Date,\n    fromPage: Object,\n    toPage: Object,\n    minPage: Object,\n    maxPage: Object,\n    transition: String,\n    attributes: [Object, Array],\n    disablePageSwipe: Boolean\n  },\n\n  data() {\n    return {\n      pages: [],\n      store: null,\n      lastFocusedDay: null,\n      focusableDay: new Date().getDate(),\n      transitionName: '',\n      inTransition: false,\n      sharedState: {\n        dayPopoverId: createGuid(),\n        theme: {},\n        masks: {},\n        locale: {}\n      }\n    };\n  },\n\n  computed: {\n    titlePosition_() {\n      return this.propOrDefault('titlePosition', 'titlePosition');\n    },\n\n    minPage_() {\n      return this.minPage || pageForDate(this.$locale.toDate(this.minDate));\n    },\n\n    maxPage_() {\n      return this.maxPage || pageForDate(this.$locale.toDate(this.maxDate));\n    },\n\n    count() {\n      return this.rows * this.columns;\n    },\n\n    step_() {\n      return this.step || this.count;\n    },\n\n    canMovePrev() {\n      return !pageIsValid(this.minPage_) || pageIsAfterPage(this.pages[0], this.minPage_);\n    },\n\n    canMoveNext() {\n      return !pageIsValid(this.maxPage_) || pageIsBeforePage(this.pages[this.pages.length - 1], this.maxPage_);\n    }\n\n  },\n  watch: {\n    $locale() {\n      this.refreshLocale();\n      this.refreshPages({\n        page: head(this.pages),\n        ignoreCache: true\n      });\n      this.initStore();\n    },\n\n    $theme() {\n      this.refreshTheme();\n      this.initStore();\n    },\n\n    fromDate() {\n      this.refreshPages();\n    },\n\n    fromPage(val) {\n      const firstPage = this.pages && this.pages[0];\n      if (pageIsEqualToPage(val, firstPage)) return;\n      this.refreshPages();\n    },\n\n    toPage(val) {\n      const lastPage = this.pages && this.pages[this.pages.length - 1];\n      if (pageIsEqualToPage(val, lastPage)) return;\n      this.refreshPages();\n    },\n\n    count() {\n      this.refreshPages();\n    },\n\n    attributes(val) {\n      const {\n        adds,\n        deletes\n      } = this.store.refresh(val);\n      this.refreshAttrs(this.pages, adds, deletes);\n    },\n\n    pages(val) {\n      this.refreshAttrs(val, this.store.list, null, true);\n    },\n\n    disabledAttribute() {\n      this.refreshDisabledDays();\n    },\n\n    lastFocusedDay(val) {\n      if (val) {\n        this.focusableDay = val.day;\n        this.refreshFocusableDays();\n      }\n    },\n\n    inTransition(val) {\n      if (val) {\n        this.$emit('transition-start');\n      } else {\n        this.$emit('transition-end');\n\n        if (this.transitionPromise) {\n          this.transitionPromise.resolve();\n          this.transitionPromise = null;\n        }\n      }\n    }\n\n  },\n\n  created() {\n    this.refreshLocale();\n    this.refreshTheme();\n    this.initStore();\n    this.refreshPages();\n  },\n\n  mounted() {\n    if (!this.disablePageSwipe) {\n      // Add swipe handler to move to next and previous pages\n      const removeHandlers = addHorizontalSwipeHandler(this.$refs.container, ({\n        toLeft,\n        toRight\n      }) => {\n        if (toLeft) {\n          this.moveNext();\n        } else if (toRight) {\n          this.movePrev();\n        }\n      }, this.$defaults.touch); // Clean up on destroy\n\n      this.$once('beforeDestroy', () => removeHandlers());\n    }\n  },\n\n  methods: {\n    refreshLocale() {\n      this.sharedState.locale = this.$locale;\n      this.sharedState.masks = this.$locale.masks;\n    },\n\n    refreshTheme() {\n      this.sharedState.theme = this.$theme;\n    },\n\n    canMove(page) {\n      return pageIsBetweenPages(page, this.minPage_, this.maxPage_);\n    },\n\n    async movePrev(opts) {\n      const result = await this.move(-this.step_, opts);\n      return result;\n    },\n\n    async moveNext(opts) {\n      const result = this.move(this.step_, opts);\n      return result;\n    },\n\n    async move(arg, opts) {\n      const page = this.$locale.toPage(arg, this.pages[0]);\n\n      if (!page) {\n        return null;\n      }\n\n      const result = await this.refreshPages({ ...opts,\n        page\n      });\n      return result;\n    },\n\n    async focusDate(date, opts = {}) {\n      const page = pageForDate(date); // Calculate new fromPage\n\n      let fromPage = null;\n\n      if (opts.position) {\n        fromPage = this.getTargetPageRange(page, opts.position).fromPage;\n      } else if (pageIsBeforePage(page, this.pages[0])) {\n        fromPage = this.getTargetPageRange(page, -1).fromPage;\n      } else if (pageIsAfterPage(page, last(this.pages))) {\n        fromPage = this.getTargetPageRange(page, 1).fromPage;\n      } // Move to new fromPage if it's different from the current one\n\n\n      if (fromPage && !pageIsEqualToPage(fromPage, this.pages[0])) {\n        await this.refreshPages({ ...opts,\n          position: 1,\n          page: fromPage\n        });\n      } // Set focus on the element for the date\n\n\n      const focusableEl = this.$el.querySelector(`.id-${this.$locale.format(date, 'YYYY-MM-DD')}.in-month .vc-focusable`);\n\n      if (focusableEl) {\n        focusableEl.focus();\n      }\n    },\n\n    async showPageRange(range, opts) {\n      let fromPage;\n      let toPage;\n\n      if (isDate(range)) {\n        fromPage = pageForDate(range);\n      } else if (isObject(range)) {\n        const {\n          month,\n          year\n        } = range;\n        const {\n          from,\n          to\n        } = range;\n\n        if (isNumber(month) && isNumber(year)) {\n          fromPage = range;\n        } else if (from || to) {\n          fromPage = isDate(from) ? pageForDate(from) : from;\n          toPage = isDate(to) ? pageForDate(to) : to;\n        }\n      } else {\n        return;\n      }\n\n      const lastPage = last(this.pages);\n      let page = fromPage; // Offset page from the desired `toPage`\n\n      if (pageIsAfterPage(toPage, lastPage)) {\n        page = addPages(toPage, -(this.pages.length - 1));\n      } // But no earlier than the desired `fromPage`\n\n\n      if (pageIsBeforePage(fromPage, page)) {\n        page = fromPage;\n      }\n\n      await this.refreshPages({ ...opts,\n        page\n      });\n    },\n\n    getTargetPageRange(page, position) {\n      // Calculate the page to start displaying from\n      let fromPage = null; // 1. Try the page parameter\n\n      if (pageIsValid(page)) {\n        const pagesToAdd = position > 0 ? 1 - position : -(this.count + position);\n        fromPage = addPages(page, pagesToAdd);\n      } else {\n        // 2. Try the fromPage prop\n        fromPage = this.fromPage || pageForDate(this.$locale.toDate(this.fromDate));\n\n        if (!pageIsValid(fromPage)) {\n          // 3. Try the toPage prop\n          const toPage = this.toPage || pageForDate(this.$locale.toDate(this.toPage));\n\n          if (pageIsValid(toPage)) {\n            fromPage = addPages(toPage, 1 - this.count);\n          } else {\n            // 4. Try the first attribute\n            fromPage = this.getPageForAttributes();\n          }\n        }\n      } // 5. Fall back to today's page\n\n\n      fromPage = pageIsValid(fromPage) ? fromPage : pageForThisMonth(); // Adjust from page within allowed min/max pages\n\n      const toPage = addPages(fromPage, this.count - 1);\n\n      if (pageIsBeforePage(fromPage, this.minPage_)) {\n        fromPage = this.minPage_;\n      } else if (pageIsAfterPage(toPage, this.maxPage_)) {\n        fromPage = addPages(this.maxPage_, 1 - this.count);\n      }\n\n      return {\n        fromPage,\n        toPage\n      };\n    },\n\n    async refreshPages({\n      page,\n      position = 1,\n      transition,\n      ignoreCache\n    } = {}) {\n      return new Promise((resolve, reject) => {\n        const {\n          fromPage,\n          toPage\n        } = this.getTargetPageRange(page, position); // Create the new pages\n\n        const pages = [];\n\n        for (let i = 0; i < this.count; i++) {\n          pages.push(this.buildPage(addPages(fromPage, i), ignoreCache));\n        } // Refresh disabled days for new pages\n\n\n        this.refreshDisabledDays(pages); // Refresh focusable days for new pages\n\n        this.refreshFocusableDays(pages); // Assign the transition\n\n        this.transitionName = this.getPageTransition(this.pages[0], pages[0], transition); // Assign the new pages\n\n        this.pages = pages; // Emit page update events\n\n        this.$emit('update:from-page', fromPage);\n        this.$emit('update:to-page', toPage);\n\n        if (this.transitionName && this.transitionName !== 'none') {\n          this.transitionPromise = {\n            resolve,\n            reject\n          };\n        } else {\n          resolve();\n        }\n      });\n    },\n\n    refreshDisabledDays(pages) {\n      this.getPageDays(pages).forEach(d => {\n        d.isDisabled = !!this.disabledAttribute && this.disabledAttribute.includesDay(d);\n      });\n    },\n\n    refreshFocusableDays(pages) {\n      this.getPageDays(pages).forEach(d => {\n        d.isFocusable = d.inMonth && d.day === this.focusableDay;\n      });\n    },\n\n    getPageDays(pages = this.pages) {\n      return pages.reduce((prev, curr) => prev.concat(curr.days), []);\n    },\n\n    getPageTransition(oldPage, newPage, transition = this.transition) {\n      if (transition === 'none') return transition;\n\n      if (transition === 'fade' || !transition && this.count > 1 || !pageIsValid(oldPage) || !pageIsValid(newPage)) {\n        return 'fade';\n      } // Moving to a previous page\n\n\n      const movePrev = pageIsBeforePage(newPage, oldPage); // Vertical slide\n\n      if (transition === 'slide-v') {\n        return movePrev ? 'slide-down' : 'slide-up';\n      } // Horizontal slide\n\n\n      return movePrev ? 'slide-right' : 'slide-left';\n    },\n\n    getPageForAttributes() {\n      let page = null;\n      const attr = this.store.pinAttr;\n\n      if (attr && attr.hasDates) {\n        let [date] = attr.dates;\n        date = date.start || date.date;\n        page = pageForDate(this.$locale.toDate(date));\n      }\n\n      return page;\n    },\n\n    buildPage({\n      month,\n      year\n    }, ignoreCache) {\n      const key = `${year.toString()}-${month.toString()}`;\n      let page = this.pages.find(p => p.key === key);\n\n      if (!page || ignoreCache) {\n        const date = new Date(year, month - 1, 15);\n        const monthComps = this.$locale.getMonthComps(month, year);\n        const prevMonthComps = this.$locale.getPrevMonthComps(month, year);\n        const nextMonthComps = this.$locale.getNextMonthComps(month, year);\n        page = {\n          key,\n          month,\n          year,\n          title: this.$locale.format(date, this.$locale.masks.title),\n          shortMonthLabel: this.$locale.format(date, 'MMM'),\n          monthLabel: this.$locale.format(date, 'MMMM'),\n          shortYearLabel: year.toString().substring(2),\n          yearLabel: year.toString(),\n          monthComps,\n          prevMonthComps,\n          nextMonthComps,\n          canMove: pg => this.canMove(pg),\n          move: pg => this.move(pg),\n          moveThisMonth: () => this.moveThisMonth(),\n          movePrevMonth: () => this.move(prevMonthComps),\n          moveNextMonth: () => this.move(nextMonthComps),\n          refresh: true\n        }; // Assign day info\n\n        page.days = this.$locale.getCalendarDays(page);\n      }\n\n      return page;\n    },\n\n    initStore() {\n      // Create a new attribute store\n      this.store = new AttributeStore(this.$theme, this.$locale, this.attributes); // Refresh attributes for existing pages\n\n      this.refreshAttrs(this.pages, this.store.list, [], true);\n    },\n\n    refreshAttrs(pages = [], adds = [], deletes = [], reset) {\n      if (!arrayHasItems(pages)) return; // For each page...\n\n      pages.forEach(p => {\n        // For each day...\n        p.days.forEach(d => {\n          let map = {}; // If resetting...\n\n          if (reset) {\n            // Flag day for refresh if it has attributes\n            d.refresh = arrayHasItems(d.attributes);\n          } else if (hasAny(d.attributesMap, deletes)) {\n            // Delete attributes from the delete list\n            map = omit(d.attributesMap, deletes); // Flag day for refresh\n\n            d.refresh = true;\n          } else {\n            // Get the existing attributes\n            map = d.attributesMap || {};\n          } // For each attribute to add...\n\n\n          adds.forEach(attr => {\n            // Add it if it includes the current day\n            const targetDate = attr.includesDay(d);\n\n            if (targetDate) {\n              const newAttr = { ...attr,\n                targetDate\n              };\n              map[attr.key] = newAttr; // Flag day for refresh\n\n              d.refresh = true;\n            }\n          }); // Reassign day attributes\n\n          if (d.refresh) {\n            d.attributesMap = map;\n          }\n        });\n      }); // Refresh pages\n\n      this.$nextTick(() => {\n        this.$refs.pages.forEach(p => p.refresh());\n      });\n    },\n\n    handleKeydown(e) {\n      const day = this.lastFocusedDay;\n\n      if (day != null) {\n        day.event = e;\n        this.handleDayKeydown(day);\n      }\n    },\n\n    handleDayKeydown(day) {\n      const {\n        date,\n        event\n      } = day;\n      let newDate = null;\n\n      switch (event.key) {\n        case 'ArrowLeft':\n          {\n            // Move to previous day\n            newDate = addDays(date, -1);\n            break;\n          }\n\n        case 'ArrowRight':\n          {\n            // Move to next day\n            newDate = addDays(date, 1);\n            break;\n          }\n\n        case 'ArrowUp':\n          {\n            // Move to previous week\n            newDate = addDays(date, -7);\n            break;\n          }\n\n        case 'ArrowDown':\n          {\n            // Move to next week\n            newDate = addDays(date, 7);\n            break;\n          }\n\n        case 'Home':\n          {\n            // Move to first weekday position\n            newDate = addDays(date, -day.weekdayPosition + 1);\n            break;\n          }\n\n        case 'End':\n          {\n            // Move to last weekday position\n            newDate = addDays(date, day.weekdayPositionFromEnd);\n            break;\n          }\n\n        case 'PageUp':\n          {\n            if (event.altKey) {\n              // Move to previous year w/ Alt/Option key\n              newDate = addYears(date, -1);\n            } else {\n              // Move to previous month\n              newDate = addMonths(date, -1);\n            }\n\n            break;\n          }\n\n        case 'PageDown':\n          {\n            if (event.altKey) {\n              // Move to next year w/ Alt/Option key\n              newDate = addYears(date, 1);\n            } else {\n              // Move to next month\n              newDate = addMonths(date, 1);\n            }\n\n            break;\n          }\n      }\n\n      if (newDate) {\n        event.preventDefault();\n        this.focusDate(newDate);\n      }\n    }\n\n  }\n};",{"version":3,"sources":["Calendar.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { addDays, addMonths, addYears } from 'date-fns';\r\nimport Popover from './Popover';\r\nimport PopoverRow from './PopoverRow';\r\nimport Grid from './Grid';\r\nimport CalendarPane from './CalendarPane';\r\nimport CustomTransition from './CustomTransition';\r\nimport SvgIcon from './SvgIcon';\r\nimport AttributeStore from '../utils/attributeStore';\r\nimport {\r\n  propOrDefaultMixin,\r\n  rootMixin,\r\n  safeScopedSlotMixin,\r\n} from '../utils/mixins';\r\nimport { addHorizontalSwipeHandler } from '../utils/touch';\r\nimport {\r\n  pageForDate,\r\n  pageForThisMonth,\r\n  addPages,\r\n  pageIsValid,\r\n  pageIsEqualToPage,\r\n  pageIsBeforePage,\r\n  pageIsAfterPage,\r\n  pageIsBetweenPages,\r\n  createGuid,\r\n  arrayHasItems,\r\n  onSpaceOrEnter,\r\n} from '../utils/helpers';\r\nimport {\r\n  isNumber,\r\n  isDate,\r\n  isObject,\r\n  hasAny,\r\n  omit,\r\n  head,\r\n  last,\r\n} from '../utils/_';\r\nimport '../styles/tailwind-lib.css';\r\n\r\nexport default {\r\n  name: 'Calendar',\r\n  render(h) {\r\n    // Renderer for calendar panes\r\n    const panes = this.pages.map((page, i) =>\r\n      h(CalendarPane, {\r\n        attrs: {\r\n          ...this.$attrs,\r\n          attributes: this.store,\r\n        },\r\n        props: {\r\n          titlePosition: this.titlePosition_,\r\n          page,\r\n          minPage: this.minPage_,\r\n          maxPage: this.maxPage_,\r\n          canMove: this.canMove,\r\n        },\r\n        on: {\r\n          ...this.$listeners,\r\n          'update:page': e => this.refreshPages({ page: e, position: i + 1 }),\r\n          dayfocusin: e => {\r\n            this.lastFocusedDay = e;\r\n            this.$emit('dayfocusin', e);\r\n          },\r\n          dayfocusout: e => {\r\n            this.lastFocusedDay = null;\r\n            this.$emit('dayfocusout', e);\r\n          },\r\n        },\r\n        scopedSlots: this.$scopedSlots,\r\n        key: page.key,\r\n        ref: 'pages',\r\n        refInFor: true,\r\n      }),\r\n    );\r\n\r\n    // Renderer for calendar arrows\r\n    const getArrowButton = isPrev => {\r\n      const click = () => this.move(isPrev ? -this.step_ : this.step_);\r\n      const keydown = e => onSpaceOrEnter(e, click);\r\n      const isDisabled = isPrev ? !this.canMovePrev : !this.canMoveNext;\r\n      return h(\r\n        'div',\r\n        {\r\n          class: [\r\n            `vc-flex vc-justify-center vc-items-center vc-cursor-pointer vc-select-none ${\r\n              isDisabled\r\n                ? 'vc-opacity-25 vc-pointer-events-none vc-cursor-not-allowed'\r\n                : 'vc-pointer-events-auto'\r\n            }`,\r\n            this.$theme.arrows,\r\n          ],\r\n          attrs: {\r\n            role: 'button',\r\n          },\r\n          on: {\r\n            click,\r\n            keydown,\r\n          },\r\n        },\r\n        [\r\n          (isPrev\r\n            ? this.safeScopedSlot('header-left-button', { click })\r\n            : this.safeScopedSlot('header-right-button', { click })) ||\r\n            h(SvgIcon, {\r\n              props: {\r\n                name: isPrev ? 'left-arrow' : 'right-arrow',\r\n              },\r\n            }),\r\n        ],\r\n      );\r\n    };\r\n\r\n    // Day popover\r\n    const getDayPopover = () =>\r\n      h(Popover, {\r\n        props: {\r\n          id: this.sharedState.dayPopoverId,\r\n          contentClass: this.$theme.dayPopoverContainer,\r\n        },\r\n        scopedSlots: {\r\n          default: ({ args: day, updateLayout, hide }) => {\r\n            const attributes = Object.values(day.attributes).filter(\r\n              a => a.popover,\r\n            );\r\n            const masks = this.$locale.masks;\r\n            const format = this.format;\r\n            const dayTitle = format(day.date, masks.dayPopover);\r\n            return (\r\n              this.safeScopedSlot('day-popover', {\r\n                day,\r\n                attributes,\r\n                masks,\r\n                format,\r\n                dayTitle,\r\n                updateLayout,\r\n                hide,\r\n              }) ||\r\n              h('div', [\r\n                // Show popover header only if format is defined\r\n                masks.dayPopover &&\r\n                  h(\r\n                    'div',\r\n                    {\r\n                      class: ['vc-text-center', this.$theme.dayPopoverHeader],\r\n                    },\r\n                    [dayTitle],\r\n                  ),\r\n                attributes.map(attribute =>\r\n                  h(PopoverRow, {\r\n                    key: attribute.key,\r\n                    props: {\r\n                      attribute,\r\n                    },\r\n                  }),\r\n                ),\r\n              ])\r\n            );\r\n          },\r\n        },\r\n      });\r\n\r\n    // Renderer for calendar container\r\n    const getContainerGrid = () =>\r\n      h(\r\n        'div',\r\n        {\r\n          attrs: {\r\n            'data-helptext':\r\n              'Press the arrow keys to navigate by day, Home and End to navigate to week ends, PageUp and PageDown to navigate by month, Alt+PageUp and Alt+PageDown to navigate by year',\r\n          },\r\n          class: [\r\n            'vc-container',\r\n            'vc-reset',\r\n            {\r\n              'vc-min-w-full': this.isExpanded,\r\n            },\r\n            this.$theme.container,\r\n          ],\r\n          on: {\r\n            keydown: this.handleKeydown,\r\n            mouseup: e => e.preventDefault(),\r\n          },\r\n          ref: 'container',\r\n        },\r\n        [\r\n          h(\r\n            'div',\r\n            {\r\n              class: [\r\n                'vc-w-full vc-relative',\r\n                { 'vc-overflow-hidden': this.inTransition },\r\n              ],\r\n            },\r\n            [\r\n              h(\r\n                CustomTransition,\r\n                {\r\n                  props: {\r\n                    name: this.transitionName,\r\n                  },\r\n                  on: {\r\n                    beforeEnter: () => {\r\n                      this.inTransition = true;\r\n                    },\r\n                    afterEnter: () => {\r\n                      this.inTransition = false;\r\n                    },\r\n                  },\r\n                },\r\n                [\r\n                  h(\r\n                    Grid,\r\n                    {\r\n                      class: 'grid',\r\n                      props: {\r\n                        rows: this.rows,\r\n                        columns: this.columns,\r\n                        columnWidth: 'minmax(256px, 1fr)',\r\n                        disableFocus: true,\r\n                      },\r\n                      attrs: {\r\n                        ...this.$attrs,\r\n                      },\r\n                      key: arrayHasItems(this.pages) ? this.pages[0].key : '',\r\n                    },\r\n                    panes,\r\n                  ),\r\n                ],\r\n              ),\r\n              h(\r\n                'div',\r\n                {\r\n                  class: [`vc-arrows-container title-${this.titlePosition_}`],\r\n                },\r\n                [getArrowButton(true), getArrowButton(false)],\r\n              ),\r\n            ],\r\n          ),\r\n          getDayPopover(),\r\n        ],\r\n      );\r\n\r\n    return getContainerGrid();\r\n  },\r\n  mixins: [propOrDefaultMixin, rootMixin, safeScopedSlotMixin],\r\n  provide() {\r\n    return {\r\n      sharedState: this.sharedState,\r\n    };\r\n  },\r\n  props: {\r\n    rows: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    columns: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    step: Number,\r\n    titlePosition: String,\r\n    isExpanded: Boolean,\r\n    fromDate: Date,\r\n    toDate: Date,\r\n    fromPage: Object,\r\n    toPage: Object,\r\n    minPage: Object,\r\n    maxPage: Object,\r\n    transition: String,\r\n    attributes: [Object, Array],\r\n    disablePageSwipe: Boolean,\r\n  },\r\n  data() {\r\n    return {\r\n      pages: [],\r\n      store: null,\r\n      lastFocusedDay: null,\r\n      focusableDay: new Date().getDate(),\r\n      transitionName: '',\r\n      inTransition: false,\r\n      sharedState: {\r\n        dayPopoverId: createGuid(),\r\n        theme: {},\r\n        masks: {},\r\n        locale: {},\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    titlePosition_() {\r\n      return this.propOrDefault('titlePosition', 'titlePosition');\r\n    },\r\n    minPage_() {\r\n      return this.minPage || pageForDate(this.$locale.toDate(this.minDate));\r\n    },\r\n    maxPage_() {\r\n      return this.maxPage || pageForDate(this.$locale.toDate(this.maxDate));\r\n    },\r\n    count() {\r\n      return this.rows * this.columns;\r\n    },\r\n    step_() {\r\n      return this.step || this.count;\r\n    },\r\n    canMovePrev() {\r\n      return (\r\n        !pageIsValid(this.minPage_) ||\r\n        pageIsAfterPage(this.pages[0], this.minPage_)\r\n      );\r\n    },\r\n    canMoveNext() {\r\n      return (\r\n        !pageIsValid(this.maxPage_) ||\r\n        pageIsBeforePage(this.pages[this.pages.length - 1], this.maxPage_)\r\n      );\r\n    },\r\n  },\r\n  watch: {\r\n    $locale() {\r\n      this.refreshLocale();\r\n      this.refreshPages({ page: head(this.pages), ignoreCache: true });\r\n      this.initStore();\r\n    },\r\n    $theme() {\r\n      this.refreshTheme();\r\n      this.initStore();\r\n    },\r\n    fromDate() {\r\n      this.refreshPages();\r\n    },\r\n    fromPage(val) {\r\n      const firstPage = this.pages && this.pages[0];\r\n      if (pageIsEqualToPage(val, firstPage)) return;\r\n      this.refreshPages();\r\n    },\r\n    toPage(val) {\r\n      const lastPage = this.pages && this.pages[this.pages.length - 1];\r\n      if (pageIsEqualToPage(val, lastPage)) return;\r\n      this.refreshPages();\r\n    },\r\n    count() {\r\n      this.refreshPages();\r\n    },\r\n    attributes(val) {\r\n      const { adds, deletes } = this.store.refresh(val);\r\n      this.refreshAttrs(this.pages, adds, deletes);\r\n    },\r\n    pages(val) {\r\n      this.refreshAttrs(val, this.store.list, null, true);\r\n    },\r\n    disabledAttribute() {\r\n      this.refreshDisabledDays();\r\n    },\r\n    lastFocusedDay(val) {\r\n      if (val) {\r\n        this.focusableDay = val.day;\r\n        this.refreshFocusableDays();\r\n      }\r\n    },\r\n    inTransition(val) {\r\n      if (val) {\r\n        this.$emit('transition-start');\r\n      } else {\r\n        this.$emit('transition-end');\r\n        if (this.transitionPromise) {\r\n          this.transitionPromise.resolve();\r\n          this.transitionPromise = null;\r\n        }\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.refreshLocale();\r\n    this.refreshTheme();\r\n    this.initStore();\r\n    this.refreshPages();\r\n  },\r\n  mounted() {\r\n    if (!this.disablePageSwipe) {\r\n      // Add swipe handler to move to next and previous pages\r\n      const removeHandlers = addHorizontalSwipeHandler(\r\n        this.$refs.container,\r\n        ({ toLeft, toRight }) => {\r\n          if (toLeft) {\r\n            this.moveNext();\r\n          } else if (toRight) {\r\n            this.movePrev();\r\n          }\r\n        },\r\n        this.$defaults.touch,\r\n      );\r\n      // Clean up on destroy\r\n      this.$once('beforeDestroy', () => removeHandlers());\r\n    }\r\n  },\r\n  methods: {\r\n    refreshLocale() {\r\n      this.sharedState.locale = this.$locale;\r\n      this.sharedState.masks = this.$locale.masks;\r\n    },\r\n    refreshTheme() {\r\n      this.sharedState.theme = this.$theme;\r\n    },\r\n    canMove(page) {\r\n      return pageIsBetweenPages(page, this.minPage_, this.maxPage_);\r\n    },\r\n    async movePrev(opts) {\r\n      const result = await this.move(-this.step_, opts);\r\n      return result;\r\n    },\r\n    async moveNext(opts) {\r\n      const result = this.move(this.step_, opts);\r\n      return result;\r\n    },\r\n    async move(arg, opts) {\r\n      const page = this.$locale.toPage(arg, this.pages[0]);\r\n      if (!page) {\r\n        return null;\r\n      }\r\n      const result = await this.refreshPages({\r\n        ...opts,\r\n        page,\r\n      });\r\n      return result;\r\n    },\r\n    async focusDate(date, opts = {}) {\r\n      const page = pageForDate(date);\r\n      // Calculate new fromPage\r\n      let fromPage = null;\r\n      if (opts.position) {\r\n        fromPage = this.getTargetPageRange(page, opts.position).fromPage;\r\n      } else if (pageIsBeforePage(page, this.pages[0])) {\r\n        fromPage = this.getTargetPageRange(page, -1).fromPage;\r\n      } else if (pageIsAfterPage(page, last(this.pages))) {\r\n        fromPage = this.getTargetPageRange(page, 1).fromPage;\r\n      }\r\n      // Move to new fromPage if it's different from the current one\r\n      if (fromPage && !pageIsEqualToPage(fromPage, this.pages[0])) {\r\n        await this.refreshPages({\r\n          ...opts,\r\n          position: 1,\r\n          page: fromPage,\r\n        });\r\n      }\r\n      // Set focus on the element for the date\r\n      const focusableEl = this.$el.querySelector(\r\n        `.id-${this.$locale.format(date, 'YYYY-MM-DD')}.in-month .vc-focusable`,\r\n      );\r\n      if (focusableEl) {\r\n        focusableEl.focus();\r\n      }\r\n    },\r\n    async showPageRange(range, opts) {\r\n      let fromPage;\r\n      let toPage;\r\n      if (isDate(range)) {\r\n        fromPage = pageForDate(range);\r\n      } else if (isObject(range)) {\r\n        const { month, year } = range;\r\n        const { from, to } = range;\r\n        if (isNumber(month) && isNumber(year)) {\r\n          fromPage = range;\r\n        } else if (from || to) {\r\n          fromPage = isDate(from) ? pageForDate(from) : from;\r\n          toPage = isDate(to) ? pageForDate(to) : to;\r\n        }\r\n      } else {\r\n        return;\r\n      }\r\n      const lastPage = last(this.pages);\r\n      let page = fromPage;\r\n      // Offset page from the desired `toPage`\r\n      if (pageIsAfterPage(toPage, lastPage)) {\r\n        page = addPages(toPage, -(this.pages.length - 1));\r\n      }\r\n      // But no earlier than the desired `fromPage`\r\n      if (pageIsBeforePage(fromPage, page)) {\r\n        page = fromPage;\r\n      }\r\n      await this.refreshPages({ ...opts, page });\r\n    },\r\n    getTargetPageRange(page, position) {\r\n      // Calculate the page to start displaying from\r\n      let fromPage = null;\r\n      // 1. Try the page parameter\r\n      if (pageIsValid(page)) {\r\n        const pagesToAdd =\r\n          position > 0 ? 1 - position : -(this.count + position);\r\n        fromPage = addPages(page, pagesToAdd);\r\n      } else {\r\n        // 2. Try the fromPage prop\r\n        fromPage =\r\n          this.fromPage || pageForDate(this.$locale.toDate(this.fromDate));\r\n        if (!pageIsValid(fromPage)) {\r\n          // 3. Try the toPage prop\r\n          const toPage =\r\n            this.toPage || pageForDate(this.$locale.toDate(this.toPage));\r\n          if (pageIsValid(toPage)) {\r\n            fromPage = addPages(toPage, 1 - this.count);\r\n          } else {\r\n            // 4. Try the first attribute\r\n            fromPage = this.getPageForAttributes();\r\n          }\r\n        }\r\n      }\r\n      // 5. Fall back to today's page\r\n      fromPage = pageIsValid(fromPage) ? fromPage : pageForThisMonth();\r\n      // Adjust from page within allowed min/max pages\r\n      const toPage = addPages(fromPage, this.count - 1);\r\n      if (pageIsBeforePage(fromPage, this.minPage_)) {\r\n        fromPage = this.minPage_;\r\n      } else if (pageIsAfterPage(toPage, this.maxPage_)) {\r\n        fromPage = addPages(this.maxPage_, 1 - this.count);\r\n      }\r\n      return { fromPage, toPage };\r\n    },\r\n    async refreshPages({ page, position = 1, transition, ignoreCache } = {}) {\r\n      return new Promise((resolve, reject) => {\r\n        const { fromPage, toPage } = this.getTargetPageRange(page, position);\r\n        // Create the new pages\r\n        const pages = [];\r\n        for (let i = 0; i < this.count; i++) {\r\n          pages.push(this.buildPage(addPages(fromPage, i), ignoreCache));\r\n        }\r\n        // Refresh disabled days for new pages\r\n        this.refreshDisabledDays(pages);\r\n        // Refresh focusable days for new pages\r\n        this.refreshFocusableDays(pages);\r\n        // Assign the transition\r\n        this.transitionName = this.getPageTransition(\r\n          this.pages[0],\r\n          pages[0],\r\n          transition,\r\n        );\r\n        // Assign the new pages\r\n        this.pages = pages;\r\n        // Emit page update events\r\n        this.$emit('update:from-page', fromPage);\r\n        this.$emit('update:to-page', toPage);\r\n        if (this.transitionName && this.transitionName !== 'none') {\r\n          this.transitionPromise = {\r\n            resolve,\r\n            reject,\r\n          };\r\n        } else {\r\n          resolve();\r\n        }\r\n      });\r\n    },\r\n    refreshDisabledDays(pages) {\r\n      this.getPageDays(pages).forEach(d => {\r\n        d.isDisabled =\r\n          !!this.disabledAttribute && this.disabledAttribute.includesDay(d);\r\n      });\r\n    },\r\n    refreshFocusableDays(pages) {\r\n      this.getPageDays(pages).forEach(d => {\r\n        d.isFocusable = d.inMonth && d.day === this.focusableDay;\r\n      });\r\n    },\r\n    getPageDays(pages = this.pages) {\r\n      return pages.reduce((prev, curr) => prev.concat(curr.days), []);\r\n    },\r\n    getPageTransition(oldPage, newPage, transition = this.transition) {\r\n      if (transition === 'none') return transition;\r\n      if (\r\n        transition === 'fade' ||\r\n        (!transition && this.count > 1) ||\r\n        !pageIsValid(oldPage) ||\r\n        !pageIsValid(newPage)\r\n      ) {\r\n        return 'fade';\r\n      }\r\n      // Moving to a previous page\r\n      const movePrev = pageIsBeforePage(newPage, oldPage);\r\n      // Vertical slide\r\n      if (transition === 'slide-v') {\r\n        return movePrev ? 'slide-down' : 'slide-up';\r\n      }\r\n      // Horizontal slide\r\n      return movePrev ? 'slide-right' : 'slide-left';\r\n    },\r\n    getPageForAttributes() {\r\n      let page = null;\r\n      const attr = this.store.pinAttr;\r\n      if (attr && attr.hasDates) {\r\n        let [date] = attr.dates;\r\n        date = date.start || date.date;\r\n        page = pageForDate(this.$locale.toDate(date));\r\n      }\r\n      return page;\r\n    },\r\n    buildPage({ month, year }, ignoreCache) {\r\n      const key = `${year.toString()}-${month.toString()}`;\r\n      let page = this.pages.find(p => p.key === key);\r\n      if (!page || ignoreCache) {\r\n        const date = new Date(year, month - 1, 15);\r\n        const monthComps = this.$locale.getMonthComps(month, year);\r\n        const prevMonthComps = this.$locale.getPrevMonthComps(month, year);\r\n        const nextMonthComps = this.$locale.getNextMonthComps(month, year);\r\n        page = {\r\n          key,\r\n          month,\r\n          year,\r\n          title: this.$locale.format(date, this.$locale.masks.title),\r\n          shortMonthLabel: this.$locale.format(date, 'MMM'),\r\n          monthLabel: this.$locale.format(date, 'MMMM'),\r\n          shortYearLabel: year.toString().substring(2),\r\n          yearLabel: year.toString(),\r\n          monthComps,\r\n          prevMonthComps,\r\n          nextMonthComps,\r\n          canMove: pg => this.canMove(pg),\r\n          move: pg => this.move(pg),\r\n          moveThisMonth: () => this.moveThisMonth(),\r\n          movePrevMonth: () => this.move(prevMonthComps),\r\n          moveNextMonth: () => this.move(nextMonthComps),\r\n          refresh: true,\r\n        };\r\n        // Assign day info\r\n        page.days = this.$locale.getCalendarDays(page);\r\n      }\r\n      return page;\r\n    },\r\n    initStore() {\r\n      // Create a new attribute store\r\n      this.store = new AttributeStore(\r\n        this.$theme,\r\n        this.$locale,\r\n        this.attributes,\r\n      );\r\n      // Refresh attributes for existing pages\r\n      this.refreshAttrs(this.pages, this.store.list, [], true);\r\n    },\r\n    refreshAttrs(pages = [], adds = [], deletes = [], reset) {\r\n      if (!arrayHasItems(pages)) return;\r\n      // For each page...\r\n      pages.forEach(p => {\r\n        // For each day...\r\n        p.days.forEach(d => {\r\n          let map = {};\r\n          // If resetting...\r\n          if (reset) {\r\n            // Flag day for refresh if it has attributes\r\n            d.refresh = arrayHasItems(d.attributes);\r\n          } else if (hasAny(d.attributesMap, deletes)) {\r\n            // Delete attributes from the delete list\r\n            map = omit(d.attributesMap, deletes);\r\n            // Flag day for refresh\r\n            d.refresh = true;\r\n          } else {\r\n            // Get the existing attributes\r\n            map = d.attributesMap || {};\r\n          }\r\n          // For each attribute to add...\r\n          adds.forEach(attr => {\r\n            // Add it if it includes the current day\r\n            const targetDate = attr.includesDay(d);\r\n            if (targetDate) {\r\n              const newAttr = {\r\n                ...attr,\r\n                targetDate,\r\n              };\r\n              map[attr.key] = newAttr;\r\n              // Flag day for refresh\r\n              d.refresh = true;\r\n            }\r\n          });\r\n          // Reassign day attributes\r\n          if (d.refresh) {\r\n            d.attributesMap = map;\r\n          }\r\n        });\r\n      });\r\n      // Refresh pages\r\n      this.$nextTick(() => {\r\n        this.$refs.pages.forEach(p => p.refresh());\r\n      });\r\n    },\r\n    handleKeydown(e) {\r\n      const day = this.lastFocusedDay;\r\n      if (day != null) {\r\n        day.event = e;\r\n        this.handleDayKeydown(day);\r\n      }\r\n    },\r\n    handleDayKeydown(day) {\r\n      const { date, event } = day;\r\n      let newDate = null;\r\n      switch (event.key) {\r\n        case 'ArrowLeft': {\r\n          // Move to previous day\r\n          newDate = addDays(date, -1);\r\n          break;\r\n        }\r\n        case 'ArrowRight': {\r\n          // Move to next day\r\n          newDate = addDays(date, 1);\r\n          break;\r\n        }\r\n        case 'ArrowUp': {\r\n          // Move to previous week\r\n          newDate = addDays(date, -7);\r\n          break;\r\n        }\r\n        case 'ArrowDown': {\r\n          // Move to next week\r\n          newDate = addDays(date, 7);\r\n          break;\r\n        }\r\n        case 'Home': {\r\n          // Move to first weekday position\r\n          newDate = addDays(date, -day.weekdayPosition + 1);\r\n          break;\r\n        }\r\n        case 'End': {\r\n          // Move to last weekday position\r\n          newDate = addDays(date, day.weekdayPositionFromEnd);\r\n          break;\r\n        }\r\n        case 'PageUp': {\r\n          if (event.altKey) {\r\n            // Move to previous year w/ Alt/Option key\r\n            newDate = addYears(date, -1);\r\n          } else {\r\n            // Move to previous month\r\n            newDate = addMonths(date, -1);\r\n          }\r\n          break;\r\n        }\r\n        case 'PageDown': {\r\n          if (event.altKey) {\r\n            // Move to next year w/ Alt/Option key\r\n            newDate = addYears(date, 1);\r\n          } else {\r\n            // Move to next month\r\n            newDate = addMonths(date, 1);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (newDate) {\r\n        event.preventDefault();\r\n        this.focusDate(newDate);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.vc-container {\r\n  --slide-translate: 22px;\r\n  --slide-duration: 0.15s;\r\n  --slide-timing: ease;\r\n\r\n  --header-padding: 10px 10px 0 10px;\r\n  --title-padding: 0 8px;\r\n  --arrows-padding: 8px 10px;\r\n  --arrow-font-size: 26px;\r\n  --weekday-padding: 5px 0;\r\n  --weeks-padding: 5px 6px 7px 6px;\r\n\r\n  --nav-container-width: 170px;\r\n\r\n  --day-min-height: 28px;\r\n  --day-content-width: 28px;\r\n  --day-content-height: 28px;\r\n  --day-content-margin: 1.6px auto;\r\n  --day-content-transition-time: 0.13s ease-in;\r\n  --day-content-bg-color-hover: hsla(211, 25%, 84%, 0.3);\r\n  --day-content-dark-bg-color-hover: hsla(216, 15%, 52%, 0.3);\r\n  --day-content-bg-color-focus: hsla(211, 25%, 84%, 0.4);\r\n  --day-content-dark-bg-color-focus: hsla(216, 15%, 52%, 0.4);\r\n\r\n  --highlight-height: 28px;\r\n\r\n  --dot-diameter: 5px;\r\n  --dot-border-radius: 50%;\r\n  --dot-spacing: 3px;\r\n\r\n  --bar-height: 3px;\r\n  --bars-width: 75%;\r\n\r\n  font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    'Helvetica', 'Arial', sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  position: relative;\r\n  width: max-content;\r\n  -webkit-tap-highlight-color: transparent;\r\n}\r\n\r\n.vc-arrows-container {\r\n  width: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: var(--arrows-padding);\r\n  pointer-events: none;\r\n  &.title-left {\r\n    justify-content: flex-end;\r\n  }\r\n  &.title-right {\r\n    justify-content: flex-start;\r\n  }\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"}]}