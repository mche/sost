{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js??ref--13-0!/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/attribute.js","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/attribute.js","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import DateInfo from './dateInfo';\nimport { arrayHasItems, createGuid } from './helpers';\nimport { isUndefined, isArray, some } from './_';\nexport default class Attribute {\n  constructor({\n    key,\n    hashcode,\n    highlight,\n    content,\n    dot,\n    bar,\n    popover,\n    dates,\n    excludeDates,\n    excludeMode,\n    customData,\n    order,\n    pinPage\n  }, theme, locale) {\n    this.key = isUndefined(key) ? createGuid() : key;\n    this.hashcode = hashcode;\n    this.customData = customData;\n    this.order = order || 0;\n    this.dateOpts = {\n      order,\n      locale\n    };\n    this.pinPage = pinPage; // Normalize attribute types\n\n    if (highlight) {\n      this.highlight = theme.normalizeHighlight(highlight);\n    }\n\n    if (content) {\n      this.content = theme.normalizeContent(content);\n    }\n\n    if (dot) {\n      this.dot = theme.normalizeDot(dot);\n    }\n\n    if (bar) {\n      this.bar = theme.normalizeBar(bar);\n    }\n\n    if (popover) {\n      this.popover = popover;\n    } // Wrap dates in array if needed\n\n\n    if (dates) {\n      this.dates = isArray(dates) ? dates : [dates];\n    }\n\n    this.hasDates = arrayHasItems(this.dates); // Wrap exclude dates in array if needed\n\n    if (excludeDates) {\n      this.excludeDates = isArray(excludeDates) ? excludeDates : [excludeDates];\n    }\n\n    this.hasExcludeDates = arrayHasItems(this.excludeDates);\n    this.excludeMode = excludeMode || 'intersects'; // Assign final dates\n\n    this.dates = (this.hasDates && this.dates || this.hasExcludeDates && [{}] || []).map(d => d && (d instanceof DateInfo ? d : new DateInfo(d, this.dateOpts))).filter(d => d); // Assign final exclude dates\n\n    this.excludeDates = (this.hasExcludeDates && this.excludeDates || []).map(d => d && (d instanceof DateInfo ? d : new DateInfo(d, this.dateOpts))).filter(d => d);\n    this.isComplex = some(this.dates, d => d.isComplex);\n  } // Accepts: Date or date range object\n  // Returns: First date that partially intersects the given date\n\n\n  intersectsDate(date) {\n    return !this.excludesDate(date) && (this.dates.find(d => d.intersectsDate(date)) || false);\n  } // Accepts: Date or date range object\n  // Returns: First date that completely includes the given date\n\n\n  includesDate(date) {\n    date = date instanceof DateInfo ? date : new DateInfo(date, this.dateOpts);\n    return !this.excludesDate(date) && (this.dates.find(d => d.includesDate(date)) || false);\n  }\n\n  excludesDate(date) {\n    date = date instanceof DateInfo ? date : new DateInfo(date, this.dateOpts);\n    return this.hasExcludeDates && this.excludeDates.find(ed => this.excludeMode === 'intersects' && ed.intersectsDate(date) || this.excludeMode === 'includes' && ed.includesDate(date));\n  } // Accepts: Day object\n  // Returns: First attribute date info that occurs on given day.\n\n\n  includesDay(day) {\n    return !this.excludesDay(day) && (this.dates.find(d => d.includesDay(day)) || false);\n  }\n\n  excludesDay(day) {\n    return this.hasExcludeDates && this.excludeDates.find(ed => ed.includesDay(day));\n  }\n\n}",{"version":3,"sources":["/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/attribute.js"],"names":["DateInfo","arrayHasItems","createGuid","isUndefined","isArray","some","Attribute","constructor","key","hashcode","highlight","content","dot","bar","popover","dates","excludeDates","excludeMode","customData","order","pinPage","theme","locale","dateOpts","normalizeHighlight","normalizeContent","normalizeDot","normalizeBar","hasDates","hasExcludeDates","map","d","filter","isComplex","intersectsDate","date","excludesDate","find","includesDate","ed","includesDay","day","excludesDay"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,WAA1C;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,IAA/B,QAA2C,KAA3C;AAEA,eAAe,MAAMC,SAAN,CAAgB;AAC7BC,EAAAA,WAAW,CACT;AACEC,IAAAA,GADF;AAEEC,IAAAA,QAFF;AAGEC,IAAAA,SAHF;AAIEC,IAAAA,OAJF;AAKEC,IAAAA,GALF;AAMEC,IAAAA,GANF;AAOEC,IAAAA,OAPF;AAQEC,IAAAA,KARF;AASEC,IAAAA,YATF;AAUEC,IAAAA,WAVF;AAWEC,IAAAA,UAXF;AAYEC,IAAAA,KAZF;AAaEC,IAAAA;AAbF,GADS,EAgBTC,KAhBS,EAiBTC,MAjBS,EAkBT;AACA,SAAKd,GAAL,GAAWL,WAAW,CAACK,GAAD,CAAX,GAAmBN,UAAU,EAA7B,GAAkCM,GAA7C;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKS,UAAL,GAAkBA,UAAlB;AACA,SAAKC,KAAL,GAAaA,KAAK,IAAI,CAAtB;AACA,SAAKI,QAAL,GAAgB;AAAEJ,MAAAA,KAAF;AAASG,MAAAA;AAAT,KAAhB;AACA,SAAKF,OAAL,GAAeA,OAAf,CANA,CAOA;;AACA,QAAIV,SAAJ,EAAe;AACb,WAAKA,SAAL,GAAiBW,KAAK,CAACG,kBAAN,CAAyBd,SAAzB,CAAjB;AACD;;AACD,QAAIC,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAeU,KAAK,CAACI,gBAAN,CAAuBd,OAAvB,CAAf;AACD;;AACD,QAAIC,GAAJ,EAAS;AACP,WAAKA,GAAL,GAAWS,KAAK,CAACK,YAAN,CAAmBd,GAAnB,CAAX;AACD;;AACD,QAAIC,GAAJ,EAAS;AACP,WAAKA,GAAL,GAAWQ,KAAK,CAACM,YAAN,CAAmBd,GAAnB,CAAX;AACD;;AACD,QAAIC,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAeA,OAAf;AACD,KAtBD,CAuBA;;;AACA,QAAIC,KAAJ,EAAW;AACT,WAAKA,KAAL,GAAaX,OAAO,CAACW,KAAD,CAAP,GAAiBA,KAAjB,GAAyB,CAACA,KAAD,CAAtC;AACD;;AACD,SAAKa,QAAL,GAAgB3B,aAAa,CAAC,KAAKc,KAAN,CAA7B,CA3BA,CA4BA;;AACA,QAAIC,YAAJ,EAAkB;AAChB,WAAKA,YAAL,GAAoBZ,OAAO,CAACY,YAAD,CAAP,GAAwBA,YAAxB,GAAuC,CAACA,YAAD,CAA3D;AACD;;AACD,SAAKa,eAAL,GAAuB5B,aAAa,CAAC,KAAKe,YAAN,CAApC;AACA,SAAKC,WAAL,GAAmBA,WAAW,IAAI,YAAlC,CAjCA,CAkCA;;AACA,SAAKF,KAAL,GAAa,CACV,KAAKa,QAAL,IAAiB,KAAKb,KAAvB,IACC,KAAKc,eAAL,IAAwB,CAAC,EAAD,CADzB,IAEA,EAHW,EAKVC,GALU,CAMTC,CAAC,IAAIA,CAAC,KAAKA,CAAC,YAAY/B,QAAb,GAAwB+B,CAAxB,GAA4B,IAAI/B,QAAJ,CAAa+B,CAAb,EAAgB,KAAKR,QAArB,CAAjC,CANG,EAQVS,MARU,CAQHD,CAAC,IAAIA,CARF,CAAb,CAnCA,CA4CA;;AACA,SAAKf,YAAL,GAAoB,CAAE,KAAKa,eAAL,IAAwB,KAAKb,YAA9B,IAA+C,EAAhD,EACjBc,GADiB,CAEhBC,CAAC,IAAIA,CAAC,KAAKA,CAAC,YAAY/B,QAAb,GAAwB+B,CAAxB,GAA4B,IAAI/B,QAAJ,CAAa+B,CAAb,EAAgB,KAAKR,QAArB,CAAjC,CAFU,EAIjBS,MAJiB,CAIVD,CAAC,IAAIA,CAJK,CAApB;AAKA,SAAKE,SAAL,GAAiB5B,IAAI,CAAC,KAAKU,KAAN,EAAagB,CAAC,IAAIA,CAAC,CAACE,SAApB,CAArB;AACD,GAtE4B,CAwE7B;AACA;;;AACAC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,WACE,CAAC,KAAKC,YAAL,CAAkBD,IAAlB,CAAD,KACC,KAAKpB,KAAL,CAAWsB,IAAX,CAAgBN,CAAC,IAAIA,CAAC,CAACG,cAAF,CAAiBC,IAAjB,CAArB,KAAgD,KADjD,CADF;AAID,GA/E4B,CAiF7B;AACA;;;AACAG,EAAAA,YAAY,CAACH,IAAD,EAAO;AACjBA,IAAAA,IAAI,GAAGA,IAAI,YAAYnC,QAAhB,GAA2BmC,IAA3B,GAAkC,IAAInC,QAAJ,CAAamC,IAAb,EAAmB,KAAKZ,QAAxB,CAAzC;AACA,WACE,CAAC,KAAKa,YAAL,CAAkBD,IAAlB,CAAD,KACC,KAAKpB,KAAL,CAAWsB,IAAX,CAAgBN,CAAC,IAAIA,CAAC,CAACO,YAAF,CAAeH,IAAf,CAArB,KAA8C,KAD/C,CADF;AAID;;AAEDC,EAAAA,YAAY,CAACD,IAAD,EAAO;AACjBA,IAAAA,IAAI,GAAGA,IAAI,YAAYnC,QAAhB,GAA2BmC,IAA3B,GAAkC,IAAInC,QAAJ,CAAamC,IAAb,EAAmB,KAAKZ,QAAxB,CAAzC;AACA,WACE,KAAKM,eAAL,IACA,KAAKb,YAAL,CAAkBqB,IAAlB,CACEE,EAAE,IACC,KAAKtB,WAAL,KAAqB,YAArB,IAAqCsB,EAAE,CAACL,cAAH,CAAkBC,IAAlB,CAAtC,IACC,KAAKlB,WAAL,KAAqB,UAArB,IAAmCsB,EAAE,CAACD,YAAH,CAAgBH,IAAhB,CAHxC,CAFF;AAQD,GArG4B,CAuG7B;AACA;;;AACAK,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,WACE,CAAC,KAAKC,WAAL,CAAiBD,GAAjB,CAAD,KACC,KAAK1B,KAAL,CAAWsB,IAAX,CAAgBN,CAAC,IAAIA,CAAC,CAACS,WAAF,CAAcC,GAAd,CAArB,KAA4C,KAD7C,CADF;AAID;;AAEDC,EAAAA,WAAW,CAACD,GAAD,EAAM;AACf,WACE,KAAKZ,eAAL,IAAwB,KAAKb,YAAL,CAAkBqB,IAAlB,CAAuBE,EAAE,IAAIA,EAAE,CAACC,WAAH,CAAeC,GAAf,CAA7B,CAD1B;AAGD;;AApH4B","sourcesContent":["import DateInfo from './dateInfo';\nimport { arrayHasItems, createGuid } from './helpers';\nimport { isUndefined, isArray, some } from './_';\n\nexport default class Attribute {\n  constructor(\n    {\n      key,\n      hashcode,\n      highlight,\n      content,\n      dot,\n      bar,\n      popover,\n      dates,\n      excludeDates,\n      excludeMode,\n      customData,\n      order,\n      pinPage,\n    },\n    theme,\n    locale,\n  ) {\n    this.key = isUndefined(key) ? createGuid() : key;\n    this.hashcode = hashcode;\n    this.customData = customData;\n    this.order = order || 0;\n    this.dateOpts = { order, locale };\n    this.pinPage = pinPage;\n    // Normalize attribute types\n    if (highlight) {\n      this.highlight = theme.normalizeHighlight(highlight);\n    }\n    if (content) {\n      this.content = theme.normalizeContent(content);\n    }\n    if (dot) {\n      this.dot = theme.normalizeDot(dot);\n    }\n    if (bar) {\n      this.bar = theme.normalizeBar(bar);\n    }\n    if (popover) {\n      this.popover = popover;\n    }\n    // Wrap dates in array if needed\n    if (dates) {\n      this.dates = isArray(dates) ? dates : [dates];\n    }\n    this.hasDates = arrayHasItems(this.dates);\n    // Wrap exclude dates in array if needed\n    if (excludeDates) {\n      this.excludeDates = isArray(excludeDates) ? excludeDates : [excludeDates];\n    }\n    this.hasExcludeDates = arrayHasItems(this.excludeDates);\n    this.excludeMode = excludeMode || 'intersects';\n    // Assign final dates\n    this.dates = (\n      (this.hasDates && this.dates) ||\n      (this.hasExcludeDates && [{}]) ||\n      []\n    )\n      .map(\n        d => d && (d instanceof DateInfo ? d : new DateInfo(d, this.dateOpts)),\n      )\n      .filter(d => d);\n    // Assign final exclude dates\n    this.excludeDates = ((this.hasExcludeDates && this.excludeDates) || [])\n      .map(\n        d => d && (d instanceof DateInfo ? d : new DateInfo(d, this.dateOpts)),\n      )\n      .filter(d => d);\n    this.isComplex = some(this.dates, d => d.isComplex);\n  }\n\n  // Accepts: Date or date range object\n  // Returns: First date that partially intersects the given date\n  intersectsDate(date) {\n    return (\n      !this.excludesDate(date) &&\n      (this.dates.find(d => d.intersectsDate(date)) || false)\n    );\n  }\n\n  // Accepts: Date or date range object\n  // Returns: First date that completely includes the given date\n  includesDate(date) {\n    date = date instanceof DateInfo ? date : new DateInfo(date, this.dateOpts);\n    return (\n      !this.excludesDate(date) &&\n      (this.dates.find(d => d.includesDate(date)) || false)\n    );\n  }\n\n  excludesDate(date) {\n    date = date instanceof DateInfo ? date : new DateInfo(date, this.dateOpts);\n    return (\n      this.hasExcludeDates &&\n      this.excludeDates.find(\n        ed =>\n          (this.excludeMode === 'intersects' && ed.intersectsDate(date)) ||\n          (this.excludeMode === 'includes' && ed.includesDate(date)),\n      )\n    );\n  }\n\n  // Accepts: Day object\n  // Returns: First attribute date info that occurs on given day.\n  includesDay(day) {\n    return (\n      !this.excludesDay(day) &&\n      (this.dates.find(d => d.includesDay(day)) || false)\n    );\n  }\n\n  excludesDay(day) {\n    return (\n      this.hasExcludeDates && this.excludeDates.find(ed => ed.includesDay(day))\n    );\n  }\n}\n"]}]}