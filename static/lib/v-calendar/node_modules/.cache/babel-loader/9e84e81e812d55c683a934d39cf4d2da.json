{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js??ref--13-0!/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/theme.js","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/theme.js","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { isObject, isString, isUndefined, has, hasAny, get, set, toPairs, defaults, defaultsDeep, upperFirst } from './_';\nimport defConfig from './defaults/theme';\nconst targetProps = ['base', 'start', 'end', 'startEnd'];\nconst displayProps = ['class', 'color', 'fillMode'];\n\nfunction concatClass(obj, prop, className) {\n  if (!obj || !prop || !className) return;\n  obj[prop] = `${obj[prop] ? `${obj[prop]} ` : ''}${className}`;\n}\n\nexport default class Theme {\n  constructor(config) {\n    this._config = defaults(config, defConfig); // Make properties of config appear as properties of theme\n\n    toPairs(this._config).forEach(([prop]) => {\n      Object.defineProperty(this, prop, {\n        enumerable: true,\n\n        get() {\n          return this.getConfig(prop, {});\n        }\n\n      });\n    }); // Build and cache normalized attributes\n\n    this.buildNormalizedAttrs();\n  }\n\n  buildNormalizedAttrs() {\n    this.normalizedAttrs = {\n      highlight: {\n        opts: ['fillMode', 'class', 'contentClass']\n      },\n      dot: {\n        opts: ['class']\n      },\n      bar: {\n        opts: ['class']\n      },\n      content: {\n        opts: ['class']\n      }\n    };\n    toPairs(this.normalizedAttrs).forEach(([type, config]) => {\n      const attr = {\n        base: {},\n        start: {},\n        end: {}\n      };\n      config.opts.forEach(opt => {\n        const prefix = type;\n        const suffix = upperFirst(opt);\n        const base = this[`${prefix}Base${suffix}`];\n        const startEnd = this[`${prefix}StartEnd${suffix}`] || base;\n        const start = this[`${prefix}Start${suffix}`] || startEnd;\n        const end = this[`${prefix}End${suffix}`] || start;\n\n        if (!isUndefined(base)) {\n          attr.base[opt] = base;\n        }\n\n        if (!isUndefined(start)) {\n          attr.start[opt] = start;\n        }\n\n        if (!isUndefined(end)) {\n          attr.end[opt] = end;\n        }\n      });\n      config.attr = attr;\n    });\n  }\n\n  getConfig(prop, {\n    color = this._config.color,\n    isDark = this._config.isDark\n  }) {\n    if (!has(this._config, prop)) return undefined;\n    let propVal = get(this._config, prop);\n\n    if (isObject(propVal) && hasAny(propVal, ['light', 'dark'])) {\n      propVal = isDark ? propVal.dark : propVal.light;\n    }\n\n    if (isString(propVal)) {\n      return propVal.replace(/{color}/g, color);\n    }\n\n    return propVal;\n  }\n\n  mergeTargets(to, from) {\n    const config = {};\n    defaultsDeep(config, to, from); // Combine target classes together\n\n    if (to.class && from.class && !to.class.includes(from.class)) {\n      config.class = `${to.class} ${from.class}`;\n    }\n\n    return config;\n  } // Normalizes attribute config to the structure defined by the properties\n\n\n  normalizeAttr({\n    config,\n    type\n  }) {\n    let rootColor = this.color;\n    let root = {}; // Get the normalized root config\n\n    const normAttr = this.normalizedAttrs[type].attr;\n\n    if (config === true || isString(config)) {\n      // Assign default color for booleans or strings\n      rootColor = isString(config) ? config : rootColor; // Set the default root\n\n      root = { ...normAttr\n      };\n    } else if (isObject(config)) {\n      if (hasAny(config, targetProps)) {\n        // Mixin target configs\n        root = { ...config\n        };\n      } else {\n        // Mixin display configs\n        root = {\n          base: { ...config\n          },\n          start: { ...config\n          },\n          end: { ...config\n          }\n        };\n      }\n    } else {\n      return null;\n    } // Fill in missing targets\n\n\n    defaults(root, {\n      start: root.startEnd,\n      end: root.startEnd\n    }, normAttr); // Normalize each target\n\n    toPairs(root).forEach(([targetType, targetConfig]) => {\n      let targetColor = rootColor;\n\n      if (targetConfig === true || isString(targetConfig)) {\n        targetColor = isString(targetConfig) ? targetConfig : targetColor;\n        root[targetType] = {\n          color: targetColor\n        };\n      } else if (isObject(targetConfig)) {\n        if (hasAny(targetConfig, displayProps)) {\n          root[targetType] = { ...targetConfig\n          };\n        } else {\n          root[targetType] = {};\n        }\n      } // Fill in missing options\n\n\n      root[targetType] = this.mergeTargets(root[targetType], normAttr[targetType]); // Set the theme color if it is missing\n\n      if (!has(root, `${targetType}.color`)) {\n        set(root, `${targetType}.color`, targetColor);\n      }\n    });\n    return root;\n  }\n\n  getHighlightBgClass(fillMode, config = this._config) {\n    switch (fillMode) {\n      case 'none':\n        return this.getConfig('bgLow', config);\n\n      case 'light':\n        return this.getConfig('bgAccentLow', config);\n\n      case 'solid':\n        return this.getConfig('bgAccentHigh', config);\n\n      default:\n        return '';\n    }\n  }\n\n  getHighlightContentClass(fillMode, config = this._config) {\n    switch (fillMode) {\n      case 'none':\n        return this.getConfig('contentAccent', config);\n\n      case 'light':\n        return this.getConfig('contentAccent', config);\n\n      case 'solid':\n        return this.getConfig('contentAccentContrast', config);\n\n      default:\n        return '';\n    }\n  }\n\n  normalizeHighlight(config) {\n    const highlight = this.normalizeAttr({\n      config,\n      type: 'highlight'\n    });\n    toPairs(highlight).forEach(([_, targetConfig]) => {\n      const {\n        fillMode\n      } = defaults(targetConfig, {\n        isDark: this.isDark,\n        color: this.color\n      });\n      concatClass(targetConfig, 'class', this.getHighlightBgClass(fillMode, targetConfig));\n      concatClass(targetConfig, 'contentClass', this.getHighlightContentClass(fillMode, targetConfig));\n    });\n    return highlight;\n  }\n\n  normalizeDot(config) {\n    const dot = this.normalizeAttr({\n      config,\n      type: 'dot'\n    });\n    toPairs(dot).forEach(([_, targetConfig]) => {\n      defaults(targetConfig, {\n        isDark: this.isDark,\n        color: this.color\n      });\n      concatClass(targetConfig, 'class', this.getConfig('bgAccentHigh', targetConfig));\n    });\n    return dot;\n  }\n\n  normalizeBar(config) {\n    const bar = this.normalizeAttr({\n      config,\n      type: 'bar'\n    });\n    toPairs(bar).forEach(([_, targetConfig]) => {\n      defaults(targetConfig, {\n        isDark: this.isDark,\n        color: this.color\n      });\n      concatClass(targetConfig, 'class', this.getConfig('bgAccentHigh', targetConfig));\n    });\n    return bar;\n  }\n\n  normalizeContent(config) {\n    const content = this.normalizeAttr({\n      config,\n      type: 'content'\n    });\n    toPairs(content).forEach(([_, targetConfig]) => {\n      defaults(targetConfig, {\n        isDark: this.isDark,\n        color: this.color\n      });\n      concatClass(targetConfig, 'class', this.getConfig('contentAccent', targetConfig));\n    });\n    return content;\n  }\n\n}",{"version":3,"sources":["/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/theme.js"],"names":["isObject","isString","isUndefined","has","hasAny","get","set","toPairs","defaults","defaultsDeep","upperFirst","defConfig","targetProps","displayProps","concatClass","obj","prop","className","Theme","constructor","config","_config","forEach","Object","defineProperty","enumerable","getConfig","buildNormalizedAttrs","normalizedAttrs","highlight","opts","dot","bar","content","type","attr","base","start","end","opt","prefix","suffix","startEnd","color","isDark","undefined","propVal","dark","light","replace","mergeTargets","to","from","class","includes","normalizeAttr","rootColor","root","normAttr","targetType","targetConfig","targetColor","getHighlightBgClass","fillMode","getHighlightContentClass","normalizeHighlight","_","normalizeDot","normalizeBar","normalizeContent"],"mappings":"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","sourcesContent":["import {\n  isObject,\n  isString,\n  isUndefined,\n  has,\n  hasAny,\n  get,\n  set,\n  toPairs,\n  defaults,\n  defaultsDeep,\n  upperFirst,\n} from './_';\nimport defConfig from './defaults/theme';\n\nconst targetProps = ['base', 'start', 'end', 'startEnd'];\nconst displayProps = ['class', 'color', 'fillMode'];\n\nfunction concatClass(obj, prop, className) {\n  if (!obj || !prop || !className) return;\n  obj[prop] = `${obj[prop] ? `${obj[prop]} ` : ''}${className}`;\n}\n\nexport default class Theme {\n  constructor(config) {\n    this._config = defaults(config, defConfig);\n    // Make properties of config appear as properties of theme\n    toPairs(this._config).forEach(([prop]) => {\n      Object.defineProperty(this, prop, {\n        enumerable: true,\n        get() {\n          return this.getConfig(prop, {});\n        },\n      });\n    });\n    // Build and cache normalized attributes\n    this.buildNormalizedAttrs();\n  }\n\n  buildNormalizedAttrs() {\n    this.normalizedAttrs = {\n      highlight: {\n        opts: ['fillMode', 'class', 'contentClass'],\n      },\n      dot: { opts: ['class'] },\n      bar: { opts: ['class'] },\n      content: { opts: ['class'] },\n    };\n    toPairs(this.normalizedAttrs).forEach(([type, config]) => {\n      const attr = { base: {}, start: {}, end: {} };\n      config.opts.forEach(opt => {\n        const prefix = type;\n        const suffix = upperFirst(opt);\n        const base = this[`${prefix}Base${suffix}`];\n        const startEnd = this[`${prefix}StartEnd${suffix}`] || base;\n        const start = this[`${prefix}Start${suffix}`] || startEnd;\n        const end = this[`${prefix}End${suffix}`] || start;\n        if (!isUndefined(base)) {\n          attr.base[opt] = base;\n        }\n        if (!isUndefined(start)) {\n          attr.start[opt] = start;\n        }\n        if (!isUndefined(end)) {\n          attr.end[opt] = end;\n        }\n      });\n      config.attr = attr;\n    });\n  }\n\n  getConfig(\n    prop,\n    { color = this._config.color, isDark = this._config.isDark },\n  ) {\n    if (!has(this._config, prop)) return undefined;\n    let propVal = get(this._config, prop);\n    if (isObject(propVal) && hasAny(propVal, ['light', 'dark'])) {\n      propVal = isDark ? propVal.dark : propVal.light;\n    }\n    if (isString(propVal)) {\n      return propVal.replace(/{color}/g, color);\n    }\n    return propVal;\n  }\n\n  mergeTargets(to, from) {\n    const config = {};\n    defaultsDeep(config, to, from);\n    // Combine target classes together\n    if (to.class && from.class && !to.class.includes(from.class)) {\n      config.class = `${to.class} ${from.class}`;\n    }\n    return config;\n  }\n\n  // Normalizes attribute config to the structure defined by the properties\n  normalizeAttr({ config, type }) {\n    let rootColor = this.color;\n    let root = {};\n    // Get the normalized root config\n    const normAttr = this.normalizedAttrs[type].attr;\n    if (config === true || isString(config)) {\n      // Assign default color for booleans or strings\n      rootColor = isString(config) ? config : rootColor;\n      // Set the default root\n      root = { ...normAttr };\n    } else if (isObject(config)) {\n      if (hasAny(config, targetProps)) {\n        // Mixin target configs\n        root = { ...config };\n      } else {\n        // Mixin display configs\n        root = {\n          base: { ...config },\n          start: { ...config },\n          end: { ...config },\n        };\n      }\n    } else {\n      return null;\n    }\n    // Fill in missing targets\n    defaults(root, { start: root.startEnd, end: root.startEnd }, normAttr);\n    // Normalize each target\n    toPairs(root).forEach(([targetType, targetConfig]) => {\n      let targetColor = rootColor;\n      if (targetConfig === true || isString(targetConfig)) {\n        targetColor = isString(targetConfig) ? targetConfig : targetColor;\n        root[targetType] = { color: targetColor };\n      } else if (isObject(targetConfig)) {\n        if (hasAny(targetConfig, displayProps)) {\n          root[targetType] = { ...targetConfig };\n        } else {\n          root[targetType] = {};\n        }\n      }\n      // Fill in missing options\n      root[targetType] = this.mergeTargets(\n        root[targetType],\n        normAttr[targetType],\n      );\n      // Set the theme color if it is missing\n      if (!has(root, `${targetType}.color`)) {\n        set(root, `${targetType}.color`, targetColor);\n      }\n    });\n    return root;\n  }\n\n  getHighlightBgClass(fillMode, config = this._config) {\n    switch (fillMode) {\n      case 'none':\n        return this.getConfig('bgLow', config);\n      case 'light':\n        return this.getConfig('bgAccentLow', config);\n      case 'solid':\n        return this.getConfig('bgAccentHigh', config);\n      default:\n        return '';\n    }\n  }\n\n  getHighlightContentClass(fillMode, config = this._config) {\n    switch (fillMode) {\n      case 'none':\n        return this.getConfig('contentAccent', config);\n      case 'light':\n        return this.getConfig('contentAccent', config);\n      case 'solid':\n        return this.getConfig('contentAccentContrast', config);\n      default:\n        return '';\n    }\n  }\n\n  normalizeHighlight(config) {\n    const highlight = this.normalizeAttr({\n      config,\n      type: 'highlight',\n    });\n    toPairs(highlight).forEach(([_, targetConfig]) => {\n      const { fillMode } = defaults(targetConfig, {\n        isDark: this.isDark,\n        color: this.color,\n      });\n      concatClass(\n        targetConfig,\n        'class',\n        this.getHighlightBgClass(fillMode, targetConfig),\n      );\n      concatClass(\n        targetConfig,\n        'contentClass',\n        this.getHighlightContentClass(fillMode, targetConfig),\n      );\n    });\n    return highlight;\n  }\n\n  normalizeDot(config) {\n    const dot = this.normalizeAttr({\n      config,\n      type: 'dot',\n    });\n    toPairs(dot).forEach(([_, targetConfig]) => {\n      defaults(targetConfig, { isDark: this.isDark, color: this.color });\n      concatClass(\n        targetConfig,\n        'class',\n        this.getConfig('bgAccentHigh', targetConfig),\n      );\n    });\n    return dot;\n  }\n\n  normalizeBar(config) {\n    const bar = this.normalizeAttr({\n      config,\n      type: 'bar',\n    });\n    toPairs(bar).forEach(([_, targetConfig]) => {\n      defaults(targetConfig, { isDark: this.isDark, color: this.color });\n      concatClass(\n        targetConfig,\n        'class',\n        this.getConfig('bgAccentHigh', targetConfig),\n      );\n    });\n    return bar;\n  }\n\n  normalizeContent(config) {\n    const content = this.normalizeAttr({\n      config,\n      type: 'content',\n    });\n    toPairs(content).forEach(([_, targetConfig]) => {\n      defaults(targetConfig, { isDark: this.isDark, color: this.color });\n      concatClass(\n        targetConfig,\n        'class',\n        this.getConfig('contentAccent', targetConfig),\n      );\n    });\n    return content;\n  }\n}\n"]}]}