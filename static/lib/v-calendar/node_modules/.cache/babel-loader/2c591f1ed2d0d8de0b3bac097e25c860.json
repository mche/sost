{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js!/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js??ref--13-0!/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/fecha.js","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/fecha.js","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/* eslint-disable no-bitwise, no-mixed-operators, no-useless-escape, no-multi-assign */\n\n/* DATE FORMATTING & PARSING USING A SLIGHTLY MODIFIED VERSION OF FECHA (https://github.com/taylorhakes/fecha) */\n\n/* ADDS A NARROW WEEKDAY FORMAT 'dd' */\nimport { isNumber, isString, isArray, isDate } from './_';\nconst token = /d{1,2}|W{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nconst twoDigits = /\\d\\d?/;\nconst threeDigits = /\\d{3}/;\nconst fourDigits = /\\d{4}/;\nconst word = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\nconst literal = /\\[([^]*?)\\]/gm;\n\nconst noop = () => {};\n\nfunction monthUpdate(arrName) {\n  return (d, v, i18n) => {\n    const index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());\n\n    if (~index) {\n      d.month = index;\n    }\n  };\n}\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n\n  while (val.length < len) {\n    val = `0${val}`;\n  }\n\n  return val;\n}\n\nconst formatFlags = {\n  D(dateObj) {\n    return dateObj.getDate();\n  },\n\n  DD(dateObj) {\n    return pad(dateObj.getDate());\n  },\n\n  Do(dateObj, i18n) {\n    return i18n.DoFn(dateObj.getDate());\n  },\n\n  d(dateObj) {\n    return dateObj.getDay();\n  },\n\n  dd(dateObj) {\n    return pad(dateObj.getDay());\n  },\n\n  W(dateObj, i18n) {\n    return i18n.dayNamesNarrow[dateObj.getDay()];\n  },\n\n  WW(dateObj, i18n) {\n    return i18n.dayNamesShorter[dateObj.getDay()];\n  },\n\n  WWW(dateObj, i18n) {\n    return i18n.dayNamesShort[dateObj.getDay()];\n  },\n\n  WWWW(dateObj, i18n) {\n    return i18n.dayNames[dateObj.getDay()];\n  },\n\n  M(dateObj) {\n    return dateObj.getMonth() + 1;\n  },\n\n  MM(dateObj) {\n    return pad(dateObj.getMonth() + 1);\n  },\n\n  MMM(dateObj, i18n) {\n    return i18n.monthNamesShort[dateObj.getMonth()];\n  },\n\n  MMMM(dateObj, i18n) {\n    return i18n.monthNames[dateObj.getMonth()];\n  },\n\n  YY(dateObj) {\n    return String(dateObj.getFullYear()).substr(2);\n  },\n\n  YYYY(dateObj) {\n    return pad(dateObj.getFullYear(), 4);\n  },\n\n  h(dateObj) {\n    return dateObj.getHours() % 12 || 12;\n  },\n\n  hh(dateObj) {\n    return pad(dateObj.getHours() % 12 || 12);\n  },\n\n  H(dateObj) {\n    return dateObj.getHours();\n  },\n\n  HH(dateObj) {\n    return pad(dateObj.getHours());\n  },\n\n  m(dateObj) {\n    return dateObj.getMinutes();\n  },\n\n  mm(dateObj) {\n    return pad(dateObj.getMinutes());\n  },\n\n  s(dateObj) {\n    return dateObj.getSeconds();\n  },\n\n  ss(dateObj) {\n    return pad(dateObj.getSeconds());\n  },\n\n  S(dateObj) {\n    return Math.round(dateObj.getMilliseconds() / 100);\n  },\n\n  SS(dateObj) {\n    return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n  },\n\n  SSS(dateObj) {\n    return pad(dateObj.getMilliseconds(), 3);\n  },\n\n  a(dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n  },\n\n  A(dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();\n  },\n\n  ZZ(dateObj) {\n    const o = dateObj.getTimezoneOffset();\n    return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);\n  }\n\n};\nconst parseFlags = {\n  D: [twoDigits, (d, v) => {\n    d.day = v;\n  }],\n  Do: [new RegExp(twoDigits.source + word.source), (d, v) => {\n    d.day = parseInt(v, 10);\n  }],\n  d: [twoDigits, noop],\n  W: [word, noop],\n  M: [twoDigits, (d, v) => {\n    d.month = v - 1;\n  }],\n  MMM: [word, monthUpdate('monthNamesShort')],\n  MMMM: [word, monthUpdate('monthNames')],\n  YY: [twoDigits, (d, v) => {\n    const da = new Date();\n    const cent = +da.getFullYear().toString().substr(0, 2);\n    d.year = `${v > 68 ? cent - 1 : cent}${v}`;\n  }],\n  YYYY: [fourDigits, (d, v) => {\n    d.year = v;\n  }],\n  S: [/\\d/, (d, v) => {\n    d.millisecond = v * 100;\n  }],\n  SS: [/\\d{2}/, (d, v) => {\n    d.millisecond = v * 10;\n  }],\n  SSS: [threeDigits, (d, v) => {\n    d.millisecond = v;\n  }],\n  h: [twoDigits, (d, v) => {\n    d.hour = v;\n  }],\n  m: [twoDigits, (d, v) => {\n    d.minute = v;\n  }],\n  s: [twoDigits, (d, v) => {\n    d.second = v;\n  }],\n  a: [word, (d, v, i18n) => {\n    const val = v.toLowerCase();\n\n    if (val === i18n.amPm[0]) {\n      d.isPm = false;\n    } else if (val === i18n.amPm[1]) {\n      d.isPm = true;\n    }\n  }],\n  ZZ: [/([\\+\\-]\\d\\d:?\\d\\d|Z)/, (d, v) => {\n    if (v === 'Z') v = '+00:00';\n    const parts = `${v}`.match(/([+-]|\\d\\d)/gi);\n\n    if (parts) {\n      const minutes = +(parts[1] * 60) + parseInt(parts[2], 10);\n      d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;\n    }\n  }]\n};\nparseFlags.DD = parseFlags.D;\nparseFlags.dd = parseFlags.d;\nparseFlags.WWWW = parseFlags.WWW = parseFlags.WW = parseFlags.W;\nparseFlags.MM = parseFlags.M;\nparseFlags.mm = parseFlags.m;\nparseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;\nparseFlags.ss = parseFlags.s;\nparseFlags.A = parseFlags.a;\nexport const format = (dateObj, mask, locale) => {\n  if (isNumber) {\n    dateObj = new Date(dateObj);\n  }\n\n  if (!isDate(dateObj)) {\n    throw new Error('Invalid Date in fecha.format');\n  }\n\n  mask = locale.masks[mask] || mask;\n  const literals = []; // Make literals inactive by replacing them with ??\n\n  mask = mask.replace(literal, ($0, $1) => {\n    literals.push($1);\n    return '??';\n  }); // Apply formatting rules\n\n  mask = mask.replace(token, $0 => $0 in formatFlags ? formatFlags[$0](dateObj, locale) : $0.slice(1, $0.length - 1)); // Inline literal values back into the formatted value\n\n  return mask.replace(/\\?\\?/g, () => literals.shift());\n};\n\nconst parseString = (dateStr, mask, locale) => {\n  if (typeof mask !== 'string') {\n    throw new Error('Invalid mask in fecha.parse');\n  }\n\n  mask = locale.masks[mask] || mask; // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n\n  if (dateStr.length > 1000) {\n    return false;\n  }\n\n  let isValid = true;\n  const dateInfo = {};\n  mask.replace(token, $0 => {\n    if (parseFlags[$0]) {\n      const info = parseFlags[$0];\n      const index = dateStr.search(info[0]);\n\n      if (!~index) {\n        isValid = false;\n      } else {\n        dateStr.replace(info[0], result => {\n          info[1](dateInfo, result, locale);\n          dateStr = dateStr.substr(index + result.length);\n          return result;\n        });\n      }\n    }\n\n    return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);\n  });\n\n  if (!isValid) {\n    return false;\n  }\n\n  const today = new Date();\n\n  if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  let date;\n\n  if (dateInfo.timezoneOffset != null) {\n    dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;\n    date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));\n  } else {\n    date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);\n  }\n\n  return date;\n};\n\nexport const parse = (dateStr, mask, locale) => {\n  const masks = isArray(mask) && mask || [isString(mask) && mask || 'YYYY-MM-DD'];\n  return masks.map(m => parseString(dateStr, m, locale)).find(d => d) || new Date(dateStr);\n};",{"version":3,"sources":["/home/guest/Ostanin-dev/static/lib/v-calendar/src/utils/fecha.js"],"names":["isNumber","isString","isArray","isDate","token","twoDigits","threeDigits","fourDigits","word","literal","noop","monthUpdate","arrName","d","v","i18n","index","indexOf","charAt","toUpperCase","substr","toLowerCase","month","pad","val","len","String","length","formatFlags","D","dateObj","getDate","DD","Do","DoFn","getDay","dd","W","dayNamesNarrow","WW","dayNamesShorter","WWW","dayNamesShort","WWWW","dayNames","M","getMonth","MM","MMM","monthNamesShort","MMMM","monthNames","YY","getFullYear","YYYY","h","getHours","hh","H","HH","m","getMinutes","mm","s","getSeconds","ss","S","Math","round","getMilliseconds","SS","SSS","a","amPm","A","ZZ","o","getTimezoneOffset","floor","abs","parseFlags","day","RegExp","source","parseInt","da","Date","cent","toString","year","millisecond","hour","minute","second","isPm","parts","match","minutes","timezoneOffset","format","mask","locale","Error","masks","literals","replace","$0","$1","push","slice","shift","parseString","dateStr","isValid","dateInfo","info","search","result","today","date","UTC","parse","map","find"],"mappings":"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","sourcesContent":["/* eslint-disable no-bitwise, no-mixed-operators, no-useless-escape, no-multi-assign */\n/* DATE FORMATTING & PARSING USING A SLIGHTLY MODIFIED VERSION OF FECHA (https://github.com/taylorhakes/fecha) */\n/* ADDS A NARROW WEEKDAY FORMAT 'dd' */\nimport { isNumber, isString, isArray, isDate } from './_';\n\nconst token = /d{1,2}|W{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nconst twoDigits = /\\d\\d?/;\nconst threeDigits = /\\d{3}/;\nconst fourDigits = /\\d{4}/;\nconst word = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\nconst literal = /\\[([^]*?)\\]/gm;\nconst noop = () => {};\n\nfunction monthUpdate(arrName) {\n  return (d, v, i18n) => {\n    const index = i18n[arrName].indexOf(\n      v.charAt(0).toUpperCase() + v.substr(1).toLowerCase(),\n    );\n    if (~index) {\n      d.month = index;\n    }\n  };\n}\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = `0${val}`;\n  }\n  return val;\n}\n\nconst formatFlags = {\n  D(dateObj) {\n    return dateObj.getDate();\n  },\n  DD(dateObj) {\n    return pad(dateObj.getDate());\n  },\n  Do(dateObj, i18n) {\n    return i18n.DoFn(dateObj.getDate());\n  },\n  d(dateObj) {\n    return dateObj.getDay();\n  },\n  dd(dateObj) {\n    return pad(dateObj.getDay());\n  },\n  W(dateObj, i18n) {\n    return i18n.dayNamesNarrow[dateObj.getDay()];\n  },\n  WW(dateObj, i18n) {\n    return i18n.dayNamesShorter[dateObj.getDay()];\n  },\n  WWW(dateObj, i18n) {\n    return i18n.dayNamesShort[dateObj.getDay()];\n  },\n  WWWW(dateObj, i18n) {\n    return i18n.dayNames[dateObj.getDay()];\n  },\n  M(dateObj) {\n    return dateObj.getMonth() + 1;\n  },\n  MM(dateObj) {\n    return pad(dateObj.getMonth() + 1);\n  },\n  MMM(dateObj, i18n) {\n    return i18n.monthNamesShort[dateObj.getMonth()];\n  },\n  MMMM(dateObj, i18n) {\n    return i18n.monthNames[dateObj.getMonth()];\n  },\n  YY(dateObj) {\n    return String(dateObj.getFullYear()).substr(2);\n  },\n  YYYY(dateObj) {\n    return pad(dateObj.getFullYear(), 4);\n  },\n  h(dateObj) {\n    return dateObj.getHours() % 12 || 12;\n  },\n  hh(dateObj) {\n    return pad(dateObj.getHours() % 12 || 12);\n  },\n  H(dateObj) {\n    return dateObj.getHours();\n  },\n  HH(dateObj) {\n    return pad(dateObj.getHours());\n  },\n  m(dateObj) {\n    return dateObj.getMinutes();\n  },\n  mm(dateObj) {\n    return pad(dateObj.getMinutes());\n  },\n  s(dateObj) {\n    return dateObj.getSeconds();\n  },\n  ss(dateObj) {\n    return pad(dateObj.getSeconds());\n  },\n  S(dateObj) {\n    return Math.round(dateObj.getMilliseconds() / 100);\n  },\n  SS(dateObj) {\n    return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n  },\n  SSS(dateObj) {\n    return pad(dateObj.getMilliseconds(), 3);\n  },\n  a(dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n  },\n  A(dateObj, i18n) {\n    return dateObj.getHours() < 12\n      ? i18n.amPm[0].toUpperCase()\n      : i18n.amPm[1].toUpperCase();\n  },\n  ZZ(dateObj) {\n    const o = dateObj.getTimezoneOffset();\n    return (\n      (o > 0 ? '-' : '+') +\n      pad(Math.floor(Math.abs(o) / 60) * 100 + (Math.abs(o) % 60), 4)\n    );\n  },\n};\n\nconst parseFlags = {\n  D: [\n    twoDigits,\n    (d, v) => {\n      d.day = v;\n    },\n  ],\n  Do: [\n    new RegExp(twoDigits.source + word.source),\n    (d, v) => {\n      d.day = parseInt(v, 10);\n    },\n  ],\n  d: [twoDigits, noop],\n  W: [word, noop],\n  M: [\n    twoDigits,\n    (d, v) => {\n      d.month = v - 1;\n    },\n  ],\n  MMM: [word, monthUpdate('monthNamesShort')],\n  MMMM: [word, monthUpdate('monthNames')],\n  YY: [\n    twoDigits,\n    (d, v) => {\n      const da = new Date();\n      const cent = +da\n        .getFullYear()\n        .toString()\n        .substr(0, 2);\n      d.year = `${v > 68 ? cent - 1 : cent}${v}`;\n    },\n  ],\n  YYYY: [\n    fourDigits,\n    (d, v) => {\n      d.year = v;\n    },\n  ],\n  S: [\n    /\\d/,\n    (d, v) => {\n      d.millisecond = v * 100;\n    },\n  ],\n  SS: [\n    /\\d{2}/,\n    (d, v) => {\n      d.millisecond = v * 10;\n    },\n  ],\n  SSS: [\n    threeDigits,\n    (d, v) => {\n      d.millisecond = v;\n    },\n  ],\n  h: [\n    twoDigits,\n    (d, v) => {\n      d.hour = v;\n    },\n  ],\n  m: [\n    twoDigits,\n    (d, v) => {\n      d.minute = v;\n    },\n  ],\n  s: [\n    twoDigits,\n    (d, v) => {\n      d.second = v;\n    },\n  ],\n  a: [\n    word,\n    (d, v, i18n) => {\n      const val = v.toLowerCase();\n      if (val === i18n.amPm[0]) {\n        d.isPm = false;\n      } else if (val === i18n.amPm[1]) {\n        d.isPm = true;\n      }\n    },\n  ],\n  ZZ: [\n    /([\\+\\-]\\d\\d:?\\d\\d|Z)/,\n    (d, v) => {\n      if (v === 'Z') v = '+00:00';\n      const parts = `${v}`.match(/([+-]|\\d\\d)/gi);\n      if (parts) {\n        const minutes = +(parts[1] * 60) + parseInt(parts[2], 10);\n        d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;\n      }\n    },\n  ],\n};\nparseFlags.DD = parseFlags.D;\nparseFlags.dd = parseFlags.d;\nparseFlags.WWWW = parseFlags.WWW = parseFlags.WW = parseFlags.W;\nparseFlags.MM = parseFlags.M;\nparseFlags.mm = parseFlags.m;\nparseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;\nparseFlags.ss = parseFlags.s;\nparseFlags.A = parseFlags.a;\n\nexport const format = (dateObj, mask, locale) => {\n  if (isNumber) {\n    dateObj = new Date(dateObj);\n  }\n  if (!isDate(dateObj)) {\n    throw new Error('Invalid Date in fecha.format');\n  }\n  mask = locale.masks[mask] || mask;\n  const literals = [];\n  // Make literals inactive by replacing them with ??\n  mask = mask.replace(literal, ($0, $1) => {\n    literals.push($1);\n    return '??';\n  });\n  // Apply formatting rules\n  mask = mask.replace(token, $0 =>\n    $0 in formatFlags\n      ? formatFlags[$0](dateObj, locale)\n      : $0.slice(1, $0.length - 1),\n  );\n  // Inline literal values back into the formatted value\n  return mask.replace(/\\?\\?/g, () => literals.shift());\n};\n\nconst parseString = (dateStr, mask, locale) => {\n  if (typeof mask !== 'string') {\n    throw new Error('Invalid mask in fecha.parse');\n  }\n  mask = locale.masks[mask] || mask;\n  // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n  if (dateStr.length > 1000) {\n    return false;\n  }\n\n  let isValid = true;\n  const dateInfo = {};\n  mask.replace(token, $0 => {\n    if (parseFlags[$0]) {\n      const info = parseFlags[$0];\n      const index = dateStr.search(info[0]);\n      if (!~index) {\n        isValid = false;\n      } else {\n        dateStr.replace(info[0], result => {\n          info[1](dateInfo, result, locale);\n          dateStr = dateStr.substr(index + result.length);\n          return result;\n        });\n      }\n    }\n\n    return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);\n  });\n\n  if (!isValid) {\n    return false;\n  }\n\n  const today = new Date();\n  if (\n    dateInfo.isPm === true &&\n    dateInfo.hour != null &&\n    +dateInfo.hour !== 12\n  ) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  let date;\n  if (dateInfo.timezoneOffset != null) {\n    dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;\n    date = new Date(\n      Date.UTC(\n        dateInfo.year || today.getFullYear(),\n        dateInfo.month || 0,\n        dateInfo.day || 1,\n        dateInfo.hour || 0,\n        dateInfo.minute || 0,\n        dateInfo.second || 0,\n        dateInfo.millisecond || 0,\n      ),\n    );\n  } else {\n    date = new Date(\n      dateInfo.year || today.getFullYear(),\n      dateInfo.month || 0,\n      dateInfo.day || 1,\n      dateInfo.hour || 0,\n      dateInfo.minute || 0,\n      dateInfo.second || 0,\n      dateInfo.millisecond || 0,\n    );\n  }\n  return date;\n};\n\nexport const parse = (dateStr, mask, locale) => {\n  const masks = (isArray(mask) && mask) || [\n    (isString(mask) && mask) || 'YYYY-MM-DD',\n  ];\n  return (\n    masks.map(m => parseString(dateStr, m, locale)).find(d => d) ||\n    new Date(dateStr)\n  );\n};\n"]}]}