{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/PopoverRef.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/PopoverRef.vue","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport { popoversMixin } from '../utils/popovers';\nimport { on, off, elementContains } from '../utils/helpers';\n\nexport default {\n  name: 'PopoverRef',\n  mixins: [popoversMixin],\n  props: {\n    id: { type: String, default: 'default' },\n    element: null,\n    args: null,\n    visibility: {\n      type: String,\n      default: 'hover-focus',\n      validator: value =>\n        ['hover-focus', 'hover', 'focus', 'click', 'visible', 'hidden'].indexOf(\n          value,\n        ) !== -1,\n    },\n    placement: { type: String, default: 'bottom' },\n    positionFixed: Boolean,\n    modifiers: { type: Object, default: () => {} },\n    isInteractive: Boolean,\n    showDelay: { type: Number, default: 10 },\n    hideDelay: { type: Number, default: 150 },\n  },\n  data() {\n    return {\n      reference: null,\n      isHovered: false,\n      isFocused: false,\n    };\n  },\n  computed: {\n    isActive() {\n      return this.$popoverIsActive(this.id, this.reference);\n    },\n  },\n  render() {\n    return this.$slots.default[0];\n  },\n  watch: {\n    visibility() {\n      this.refreshVisibility();\n    },\n    args() {\n      this.$nextTick(() => {\n        if (this.isActive) {\n          this.update();\n        }\n      });\n    },\n  },\n  mounted() {\n    this.reference = this.element || this.$slots.default[0].elm;\n    this.addEvents();\n    this.$once('beforeDestroy', () => this.removeEvents());\n    this.refreshVisibility();\n  },\n  methods: {\n    addEvents() {\n      on(this.reference, 'click', this.onClick);\n      on(this.reference, 'mouseover', this.onMouseOver);\n      on(this.reference, 'mouseleave', this.onMouseLeave);\n      on(this.reference, 'focusin', this.onFocusIn);\n      on(this.reference, 'focusout', this.onFocusOut);\n      // on(this.reference, 'blur', this.onFocusOut);\n    },\n    removeEvents() {\n      off(this.reference, 'click', this.onClick);\n      off(this.reference, 'mouseover', this.onMouseOver);\n      off(this.reference, 'mouseleave', this.onMouseLeave);\n      off(this.reference, 'focusin', this.onFocusIn);\n      off(this.reference, 'focusout', this.onFocusOut);\n      // off(this.reference, 'blur', this.onFocusOut);\n    },\n    onClick() {\n      if (this.visibility === 'click') {\n        this.toggle();\n      }\n    },\n    onMouseOver() {\n      if (!this.isHovered) {\n        this.isHovered = true;\n        if (this.visibility.includes('hover')) {\n          this.refreshVisibility();\n        }\n      }\n    },\n    onMouseLeave() {\n      if (this.isHovered) {\n        this.isHovered = false;\n        if (\n          this.visibility === 'hover' ||\n          (this.visibility === 'hover-focus' && !this.isFocused)\n        ) {\n          this.refreshVisibility();\n        }\n      }\n    },\n    onFocusIn() {\n      if (!this.isFocused) {\n        this.isFocused = true;\n        if (this.visibility.includes('focus')) {\n          this.refreshVisibility();\n        }\n      }\n    },\n    onFocusOut(e) {\n      if (this.isFocused && !elementContains(this.reference, e.relatedTarget)) {\n        this.isFocused = false;\n        if (this.visibility.includes('focus')) {\n          this.refreshVisibility();\n        }\n      }\n    },\n    refreshVisibility() {\n      switch (this.visibility) {\n        case 'hover':\n          if (this.isHovered) {\n            this.show();\n          } else if (this.isActive) {\n            this.hide();\n          }\n          break;\n        case 'focus':\n          if (this.isFocused) {\n            this.show();\n          } else if (this.isActive) {\n            this.hide();\n          }\n          break;\n        case 'hover-focus':\n          if (this.isHovered || this.isFocused) {\n            this.show({ visibility: this.isFocused ? 'focus' : 'hover' });\n          } else if (this.isActive) {\n            this.hide();\n          }\n          break;\n        case 'visible':\n          this.show();\n          break;\n        case 'hidden':\n          if (this.isActive) {\n            this.hide();\n          }\n          break;\n      }\n    },\n    toggle() {\n      if (this.isActive) {\n        this.hide();\n      } else {\n        this.$nextTick(() => {\n          this.show();\n        });\n      }\n    },\n    show({ visibility } = {}) {\n      this.$showPopover({\n        id: this.id,\n        ref: this.reference,\n        args: this.args,\n        visibility: visibility || this.visibility,\n        placement: this.placement,\n        positionFixed: this.positionFixed,\n        modifiers: this.modifiers,\n        isInteractive: this.isInteractive,\n        delay: this.showDelay,\n      });\n    },\n    hide({ delay = this.hideDelay } = {}) {\n      this.$hidePopover({\n        id: this.id,\n        ref: this.reference,\n        delay,\n      });\n    },\n    update() {\n      this.$updatePopover({\n        id: this.id,\n        ref: this.reference,\n        args: this.args,\n      });\n    },\n  },\n};\n",{"version":3,"sources":["PopoverRef.vue"],"names":[],"mappingsfile":"PopoverRef.vue","sourceRoot":"src/components","sourcesContent":["<script>\nimport { popoversMixin } from '../utils/popovers';\nimport { on, off, elementContains } from '../utils/helpers';\n\nexport default {\n  name: 'PopoverRef',\n  mixins: [popoversMixin],\n  props: {\n    id: { type: String, default: 'default' },\n    element: null,\n    args: null,\n    visibility: {\n      type: String,\n      default: 'hover-focus',\n      validator: value =>\n        ['hover-focus', 'hover', 'focus', 'click', 'visible', 'hidden'].indexOf(\n          value,\n        ) !== -1,\n    },\n    placement: { type: String, default: 'bottom' },\n    positionFixed: Boolean,\n    modifiers: { type: Object, default: () => {} },\n    isInteractive: Boolean,\n    showDelay: { type: Number, default: 10 },\n    hideDelay: { type: Number, default: 150 },\n  },\n  data() {\n    return {\n      reference: null,\n      isHovered: false,\n      isFocused: false,\n    };\n  },\n  computed: {\n    isActive() {\n      return this.$popoverIsActive(this.id, this.reference);\n    },\n  },\n  render() {\n    return this.$slots.default[0];\n  },\n  watch: {\n    visibility() {\n      this.refreshVisibility();\n    },\n    args() {\n      this.$nextTick(() => {\n        if (this.isActive) {\n          this.update();\n        }\n      });\n    },\n  },\n  mounted() {\n    this.reference = this.element || this.$slots.default[0].elm;\n    this.addEvents();\n    this.$once('beforeDestroy', () => this.removeEvents());\n    this.refreshVisibility();\n  },\n  methods: {\n    addEvents() {\n      on(this.reference, 'click', this.onClick);\n      on(this.reference, 'mouseover', this.onMouseOver);\n      on(this.reference, 'mouseleave', this.onMouseLeave);\n      on(this.reference, 'focusin', this.onFocusIn);\n      on(this.reference, 'focusout', this.onFocusOut);\n      // on(this.reference, 'blur', this.onFocusOut);\n    },\n    removeEvents() {\n      off(this.reference, 'click', this.onClick);\n      off(this.reference, 'mouseover', this.onMouseOver);\n      off(this.reference, 'mouseleave', this.onMouseLeave);\n      off(this.reference, 'focusin', this.onFocusIn);\n      off(this.reference, 'focusout', this.onFocusOut);\n      // off(this.reference, 'blur', this.onFocusOut);\n    },\n    onClick() {\n      if (this.visibility === 'click') {\n        this.toggle();\n      }\n    },\n    onMouseOver() {\n      if (!this.isHovered) {\n        this.isHovered = true;\n        if (this.visibility.includes('hover')) {\n          this.refreshVisibility();\n        }\n      }\n    },\n    onMouseLeave() {\n      if (this.isHovered) {\n        this.isHovered = false;\n        if (\n          this.visibility === 'hover' ||\n          (this.visibility === 'hover-focus' && !this.isFocused)\n        ) {\n          this.refreshVisibility();\n        }\n      }\n    },\n    onFocusIn() {\n      if (!this.isFocused) {\n        this.isFocused = true;\n        if (this.visibility.includes('focus')) {\n          this.refreshVisibility();\n        }\n      }\n    },\n    onFocusOut(e) {\n      if (this.isFocused && !elementContains(this.reference, e.relatedTarget)) {\n        this.isFocused = false;\n        if (this.visibility.includes('focus')) {\n          this.refreshVisibility();\n        }\n      }\n    },\n    refreshVisibility() {\n      switch (this.visibility) {\n        case 'hover':\n          if (this.isHovered) {\n            this.show();\n          } else if (this.isActive) {\n            this.hide();\n          }\n          break;\n        case 'focus':\n          if (this.isFocused) {\n            this.show();\n          } else if (this.isActive) {\n            this.hide();\n          }\n          break;\n        case 'hover-focus':\n          if (this.isHovered || this.isFocused) {\n            this.show({ visibility: this.isFocused ? 'focus' : 'hover' });\n          } else if (this.isActive) {\n            this.hide();\n          }\n          break;\n        case 'visible':\n          this.show();\n          break;\n        case 'hidden':\n          if (this.isActive) {\n            this.hide();\n          }\n          break;\n      }\n    },\n    toggle() {\n      if (this.isActive) {\n        this.hide();\n      } else {\n        this.$nextTick(() => {\n          this.show();\n        });\n      }\n    },\n    show({ visibility } = {}) {\n      this.$showPopover({\n        id: this.id,\n        ref: this.reference,\n        args: this.args,\n        visibility: visibility || this.visibility,\n        placement: this.placement,\n        positionFixed: this.positionFixed,\n        modifiers: this.modifiers,\n        isInteractive: this.isInteractive,\n        delay: this.showDelay,\n      });\n    },\n    hide({ delay = this.hideDelay } = {}) {\n      this.$hidePopover({\n        id: this.id,\n        ref: this.reference,\n        delay,\n      });\n    },\n    update() {\n      this.$updatePopover({\n        id: this.id,\n        ref: this.reference,\n        args: this.args,\n      });\n    },\n  },\n};\n</script>\n"]}]}