{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/CalendarNav.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/CalendarNav.vue","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Grid from './Grid';\nimport SvgIcon from './SvgIcon';\nimport { childMixin } from '../utils/mixins';\nimport { head, last } from '../utils/_';\nimport { pageForDate, onSpaceOrEnter } from '../utils/helpers';\n\nconst _yearGroupCount = 12;\n\nexport default {\n  name: 'CalendarNav',\n  components: {\n    Grid,\n    SvgIcon,\n  },\n  mixins: [childMixin],\n  props: {\n    value: { type: Object, default: () => ({ month: 0, year: 0 }) },\n    validator: { type: Function, default: () => () => true },\n  },\n  data() {\n    return {\n      monthMode: true,\n      yearIndex: 0,\n      yearGroupIndex: 0,\n      onSpaceOrEnter,\n    };\n  },\n  computed: {\n    month() {\n      return this.value ? this.value.month || 0 : 0;\n    },\n    year() {\n      return this.value ? this.value.year || 0 : 0;\n    },\n    title() {\n      return this.monthMode\n        ? this.yearIndex\n        : `${this.firstYear} - ${this.lastYear}`;\n    },\n    monthItems() {\n      const { month: thisMonth, year: thisYear } = pageForDate(new Date());\n      return this.locale.getMonthDates().map((d, i) => {\n        const month = i + 1;\n        return {\n          label: this.locale.format(d, this.masks.navMonths),\n          ariaLabel: this.locale.format(d, 'MMMM YYYY'),\n          isActive: month === this.month && this.yearIndex === this.year,\n          isCurrent: month === thisMonth && this.yearIndex === thisYear,\n          isDisabled: !this.validator({ month, year: this.yearIndex }),\n          click: () => this.monthClick(month),\n        };\n      });\n    },\n    yearItems() {\n      const { _, year: thisYear } = pageForDate(new Date());\n      const startYear = this.yearGroupIndex * _yearGroupCount;\n      const endYear = startYear + _yearGroupCount;\n      const items = [];\n      for (let year = startYear; year < endYear; year += 1) {\n        items.push({\n          year,\n          label: year,\n          ariaLabel: year,\n          isActive: year === this.year,\n          isCurrent: year === thisYear,\n          isDisabled: !this.validator({ month: this.month, year }),\n          click: () => this.yearClick(year),\n        });\n      }\n      return items;\n    },\n    activeItems() {\n      return this.monthMode ? this.monthItems : this.yearItems;\n    },\n    firstYear() {\n      return head(this.yearItems.map(i => i.year));\n    },\n    lastYear() {\n      return last(this.yearItems.map(i => i.year));\n    },\n  },\n  watch: {\n    year() {\n      this.yearIndex = this.year;\n    },\n    yearIndex(val) {\n      this.yearGroupIndex = this.getYearGroupIndex(val);\n    },\n  },\n  created() {\n    this.yearIndex = this.year;\n  },\n  mounted() {\n    this.$refs.itemsGrid.tryFocus();\n  },\n  methods: {\n    getItemClasses({ isActive, isCurrent, isDisabled }) {\n      const classes = [this.theme.navCell];\n      if (isActive) {\n        classes.push(this.theme.navCellActive, 'vc-grid-focus');\n      } else if (isCurrent) {\n        classes.push(this.theme.navCellInactiveCurrent);\n      } else {\n        classes.push(this.theme.navCellInactive);\n      }\n      if (isDisabled) {\n        classes.push('vc-opacity-25 vc-pointer-events-none');\n      }\n      return classes;\n    },\n    getYearGroupIndex(year) {\n      return Math.floor(year / _yearGroupCount);\n    },\n    monthClick(month) {\n      this.$emit('input', { month, year: this.yearIndex });\n    },\n    yearClick(year) {\n      this.yearIndex = year;\n      this.monthMode = true;\n      this.$refs.itemsGrid.tryFocus();\n    },\n    toggleMode() {\n      this.monthMode = !this.monthMode;\n    },\n    movePrev() {\n      if (this.monthMode) {\n        this.movePrevYear();\n      }\n      this.movePrevYearGroup();\n    },\n    moveNext() {\n      if (this.monthMode) {\n        this.moveNextYear();\n      }\n      this.moveNextYearGroup();\n    },\n    movePrevYear() {\n      this.yearIndex--;\n    },\n    moveNextYear() {\n      this.yearIndex++;\n    },\n    movePrevYearGroup() {\n      this.yearGroupIndex--;\n    },\n    moveNextYearGroup() {\n      this.yearGroupIndex++;\n    },\n    onHeaderRollover(e) {\n      switch (e.direction) {\n        case 'vertical-trailing':\n          this.$refs.itemsGrid.tryFocus();\n          break;\n      }\n      e.handled = true;\n    },\n    onItemsRollover(e) {\n      switch (e.direction) {\n        case 'horizontal-leading': {\n          this.movePrev();\n          break;\n        }\n        case 'horizontal-trailing': {\n          this.moveNext();\n          break;\n        }\n        case 'vertical-leading': {\n          this.$refs.headerGrid.tryFocus();\n          e.handled = true;\n          break;\n        }\n        case 'vertical-trailing': {\n          e.handled = true;\n          break;\n        }\n      }\n    },\n  },\n};\n",{"version":3,"sources":["CalendarNav.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CalendarNav.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <!--Nav panel-->\n  <div class=\"vc-nav-container\">\n    <!--Nav header-->\n    <grid :columns=\"3\" ref=\"headerGrid\" @rollover=\"onHeaderRollover\">\n      <!--Move prev button-->\n      <span\n        role=\"button\"\n        class=\"vc-nav-arrow vc-flex vc-justify-center vc-items-center vc-mr-auto\"\n        :class=\"theme.navArrows\"\n        tabindex=\"-1\"\n        @click=\"movePrev\"\n        @keydown=\"e => onSpaceOrEnter(e, movePrev)\"\n        ref=\"prevButton\"\n      >\n        <slot name=\"nav-left-button\">\n          <svg-icon name=\"left-arrow\" width=\"20px\" height=\"24px\" />\n        </slot>\n      </span>\n      <!--Mode switch button-->\n      <span\n        role=\"button\"\n        class=\"vc-nav-title vc-grid-focus\"\n        :class=\"theme.navTitle\"\n        :style=\"{ whiteSpace: 'nowrap' }\"\n        tabindex=\"0\"\n        @click=\"toggleMode\"\n        @keydown=\"e => onSpaceOrEnter(e, toggleMode)\"\n        ref=\"titleButton\"\n      >\n        {{ title }}\n      </span>\n      <!--Move next button-->\n      <span\n        role=\"button\"\n        class=\"vc-nav-arrow vc-flex vc-justify-center vc-items-center vc-ml-auto\"\n        :class=\"theme.navArrows\"\n        tabindex=\"-1\"\n        @click=\"moveNext\"\n        @keydown=\"e => onSpaceOrEnter(e, moveNext)\"\n        ref=\"nextButton\"\n      >\n        <slot name=\"nav-right-button\">\n          <svg-icon name=\"right-arrow\" width=\"20px\" height=\"24px\" />\n        </slot>\n      </span>\n    </grid>\n    <!--Navigation items-->\n    <grid\n      :rows=\"4\"\n      :columns=\"3\"\n      gap=\"2px 5px\"\n      ref=\"itemsGrid\"\n      @rollover=\"onItemsRollover\"\n    >\n      <span\n        v-for=\"item in activeItems\"\n        :key=\"item.label\"\n        role=\"button\"\n        :aria-label=\"item.ariaLabel\"\n        :class=\"getItemClasses(item)\"\n        :tabindex=\"item.isDisabled ? undefined : item.isActive ? 0 : -1\"\n        @click=\"item.click\"\n        @keydown=\"e => onSpaceOrEnter(e, item.click)\"\n        ref=\"items\"\n      >\n        {{ item.label }}\n      </span>\n    </grid>\n  </div>\n</template>\n\n<script>\nimport Grid from './Grid';\nimport SvgIcon from './SvgIcon';\nimport { childMixin } from '../utils/mixins';\nimport { head, last } from '../utils/_';\nimport { pageForDate, onSpaceOrEnter } from '../utils/helpers';\n\nconst _yearGroupCount = 12;\n\nexport default {\n  name: 'CalendarNav',\n  components: {\n    Grid,\n    SvgIcon,\n  },\n  mixins: [childMixin],\n  props: {\n    value: { type: Object, default: () => ({ month: 0, year: 0 }) },\n    validator: { type: Function, default: () => () => true },\n  },\n  data() {\n    return {\n      monthMode: true,\n      yearIndex: 0,\n      yearGroupIndex: 0,\n      onSpaceOrEnter,\n    };\n  },\n  computed: {\n    month() {\n      return this.value ? this.value.month || 0 : 0;\n    },\n    year() {\n      return this.value ? this.value.year || 0 : 0;\n    },\n    title() {\n      return this.monthMode\n        ? this.yearIndex\n        : `${this.firstYear} - ${this.lastYear}`;\n    },\n    monthItems() {\n      const { month: thisMonth, year: thisYear } = pageForDate(new Date());\n      return this.locale.getMonthDates().map((d, i) => {\n        const month = i + 1;\n        return {\n          label: this.locale.format(d, this.masks.navMonths),\n          ariaLabel: this.locale.format(d, 'MMMM YYYY'),\n          isActive: month === this.month && this.yearIndex === this.year,\n          isCurrent: month === thisMonth && this.yearIndex === thisYear,\n          isDisabled: !this.validator({ month, year: this.yearIndex }),\n          click: () => this.monthClick(month),\n        };\n      });\n    },\n    yearItems() {\n      const { _, year: thisYear } = pageForDate(new Date());\n      const startYear = this.yearGroupIndex * _yearGroupCount;\n      const endYear = startYear + _yearGroupCount;\n      const items = [];\n      for (let year = startYear; year < endYear; year += 1) {\n        items.push({\n          year,\n          label: year,\n          ariaLabel: year,\n          isActive: year === this.year,\n          isCurrent: year === thisYear,\n          isDisabled: !this.validator({ month: this.month, year }),\n          click: () => this.yearClick(year),\n        });\n      }\n      return items;\n    },\n    activeItems() {\n      return this.monthMode ? this.monthItems : this.yearItems;\n    },\n    firstYear() {\n      return head(this.yearItems.map(i => i.year));\n    },\n    lastYear() {\n      return last(this.yearItems.map(i => i.year));\n    },\n  },\n  watch: {\n    year() {\n      this.yearIndex = this.year;\n    },\n    yearIndex(val) {\n      this.yearGroupIndex = this.getYearGroupIndex(val);\n    },\n  },\n  created() {\n    this.yearIndex = this.year;\n  },\n  mounted() {\n    this.$refs.itemsGrid.tryFocus();\n  },\n  methods: {\n    getItemClasses({ isActive, isCurrent, isDisabled }) {\n      const classes = [this.theme.navCell];\n      if (isActive) {\n        classes.push(this.theme.navCellActive, 'vc-grid-focus');\n      } else if (isCurrent) {\n        classes.push(this.theme.navCellInactiveCurrent);\n      } else {\n        classes.push(this.theme.navCellInactive);\n      }\n      if (isDisabled) {\n        classes.push('vc-opacity-25 vc-pointer-events-none');\n      }\n      return classes;\n    },\n    getYearGroupIndex(year) {\n      return Math.floor(year / _yearGroupCount);\n    },\n    monthClick(month) {\n      this.$emit('input', { month, year: this.yearIndex });\n    },\n    yearClick(year) {\n      this.yearIndex = year;\n      this.monthMode = true;\n      this.$refs.itemsGrid.tryFocus();\n    },\n    toggleMode() {\n      this.monthMode = !this.monthMode;\n    },\n    movePrev() {\n      if (this.monthMode) {\n        this.movePrevYear();\n      }\n      this.movePrevYearGroup();\n    },\n    moveNext() {\n      if (this.monthMode) {\n        this.moveNextYear();\n      }\n      this.moveNextYearGroup();\n    },\n    movePrevYear() {\n      this.yearIndex--;\n    },\n    moveNextYear() {\n      this.yearIndex++;\n    },\n    movePrevYearGroup() {\n      this.yearGroupIndex--;\n    },\n    moveNextYearGroup() {\n      this.yearGroupIndex++;\n    },\n    onHeaderRollover(e) {\n      switch (e.direction) {\n        case 'vertical-trailing':\n          this.$refs.itemsGrid.tryFocus();\n          break;\n      }\n      e.handled = true;\n    },\n    onItemsRollover(e) {\n      switch (e.direction) {\n        case 'horizontal-leading': {\n          this.movePrev();\n          break;\n        }\n        case 'horizontal-trailing': {\n          this.moveNext();\n          break;\n        }\n        case 'vertical-leading': {\n          this.$refs.headerGrid.tryFocus();\n          e.handled = true;\n          break;\n        }\n        case 'vertical-trailing': {\n          e.handled = true;\n          break;\n        }\n      }\n    },\n  },\n};\n</script>\n"]}]}