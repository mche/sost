{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/DatePicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/DatePicker.vue","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport Calendar from './Calendar';\r\nimport Popover from './Popover';\r\nimport PopoverRef from './PopoverRef';\r\nimport SinglePicker from '../utils/pickers/single';\r\nimport MultiplePicker from '../utils/pickers/multiple';\r\nimport RangePicker from '../utils/pickers/range';\r\nimport {\r\n  rootMixin,\r\n  propOrDefaultMixin,\r\n  safeScopedSlotMixin,\r\n} from '../utils/mixins';\r\nimport { addTapOrClickHandler } from '../utils/touch';\r\nimport { createGuid, elementContains, on, off } from '../utils/helpers';\r\nimport { isString, isArray } from '../utils/_';\r\nimport '../styles/tailwind-lib.css';\r\n\r\nexport default {\r\n  name: 'DatePicker',\r\n  render(h) {\r\n    const calendar = () =>\r\n      h(Calendar, {\r\n        attrs: {\r\n          ...this.$attrs,\r\n          attributes: this.attributes_,\r\n          theme: this.$theme,\r\n          locale: this.$locale,\r\n        },\r\n        props: {\r\n          minDate: this.minDate,\r\n          maxDate: this.maxDate,\r\n          disabledDates: this.disabledDates,\r\n          availableDates: this.availableDates,\r\n        },\r\n        on: {\r\n          ...this.$listeners,\r\n          dayclick: this.onDayClick,\r\n          daymouseenter: this.onDayMouseEnter,\r\n          daykeydown: this.onDayKeydown,\r\n          dayfocusin: this.onDayFocusIn,\r\n        },\r\n        scopedSlots: this.$scopedSlots,\r\n        ref: 'calendar',\r\n      });\r\n    // If inline just return the calendar\r\n    if (this.isInline) return calendar();\r\n    // Render the slot or ihput\r\n    const inputSlot =\r\n      this.safeScopedSlot('default', {\r\n        inputClass: this.inputClass,\r\n        inputValue: this.inputValue,\r\n        inputProps: this.inputProps_,\r\n        inputEvents: this.inputEvents,\r\n        isDragging: !!this.dragValue,\r\n        updateValue: this.updateValue,\r\n        hidePopover: this.hidePopover,\r\n      }) ||\r\n      h('input', {\r\n        class: this.inputClass,\r\n        attrs: this.inputProps_,\r\n        domProps: {\r\n          value: this.inputValue,\r\n        },\r\n        on: this.inputEvents,\r\n      });\r\n    // Convert this span to a fragment when supported in Vue\r\n    return h('span', [\r\n      h(\r\n        PopoverRef,\r\n        {\r\n          props: {\r\n            ...this.popover_,\r\n            id: this.datePickerPopoverId,\r\n            isInteractive: true,\r\n          },\r\n        },\r\n        [inputSlot],\r\n      ),\r\n      // Picker popover\r\n      h(Popover, {\r\n        props: {\r\n          id: this.datePickerPopoverId,\r\n          placement: 'bottom-start',\r\n          contentClass: this.$theme.container,\r\n        },\r\n        on: {\r\n          beforeShow: e => this.$emit('popoverWillShow', e),\r\n          afterShow: e => this.$emit('popoverDidShow', e),\r\n          beforeHide: e => this.$emit('popoverWillHide', e),\r\n          afterHide: e => this.$emit('popoverDidHide', e),\r\n        },\r\n        scopedSlots: {\r\n          default() {\r\n            return calendar();\r\n          },\r\n        },\r\n        ref: 'popover',\r\n      }),\r\n    ]);\r\n  },\r\n  mixins: [rootMixin, propOrDefaultMixin, safeScopedSlotMixin],\r\n  props: {\r\n    mode: { type: String, default: 'single' },\r\n    value: { type: null, required: true },\r\n    isRequired: Boolean,\r\n    isInline: Boolean,\r\n    updateOnInput: Boolean,\r\n    inputDebounce: Number,\r\n    inputProps: { type: Object, default: () => ({}) },\r\n    popover: { type: Object, default: () => ({}) },\r\n    dragAttribute: Object,\r\n    selectAttribute: Object,\r\n    attributes: Array,\r\n  },\r\n  data() {\r\n    return {\r\n      value_: null,\r\n      dragValue: null,\r\n      inputValue: '',\r\n      doFormatInput: true,\r\n      doHidePopover: false,\r\n      doAdjustPageRange: false,\r\n      updateTimeout: null,\r\n      datePickerPopoverId: createGuid(),\r\n    };\r\n  },\r\n  computed: {\r\n    updateOnInput_() {\r\n      return this.propOrDefault('updateOnInput', 'datePicker.updateOnInput');\r\n    },\r\n    inputDebounce_() {\r\n      return this.propOrDefault('inputDebounce', 'datePicker.inputDebounce');\r\n    },\r\n    inputMasks() {\r\n      const inputFormat = this.$locale.masks.input;\r\n      return (isArray(inputFormat) && inputFormat) || [inputFormat];\r\n    },\r\n    inputClass() {\r\n      const inputClass = this.inputProps.class || this.$theme.datePickerInput;\r\n      const inputDragClass =\r\n        this.inputProps.dragClass || this.$theme.datePickerInputDrag;\r\n      return this.picker.hasValue(this.dragValue)\r\n        ? inputDragClass || inputClass\r\n        : inputClass;\r\n    },\r\n    inputProps_() {\r\n      // Merge the user props with local\r\n      const props = {\r\n        ...this.inputProps,\r\n        value: this.inputValue,\r\n        type: 'input',\r\n      };\r\n      // Delete class properties\r\n      delete props.class;\r\n      delete props.dragClass;\r\n      return props;\r\n    },\r\n    inputEvents() {\r\n      return {\r\n        input: this.inputInput,\r\n        change: this.inputChange,\r\n        // keydown: this.inputKeydown,\r\n        keyup: this.inputKeyup,\r\n      };\r\n    },\r\n    popover_() {\r\n      return this.propOrDefault('popover', 'datePicker.popover', 'merge');\r\n    },\r\n    canHidePopover() {\r\n      return !(\r\n        this.popover.keepVisibleOnInput ||\r\n        this.popover_.visibility !== 'visible'\r\n      );\r\n    },\r\n    selectAttribute_() {\r\n      if (!this.picker.hasValue(this.value_)) return null;\r\n      const attribute = {\r\n        key: 'select-drag',\r\n        ...this.selectAttribute,\r\n        dates: this.value_,\r\n        pinPage: true,\r\n      };\r\n      const { dot, bar, highlight, content } = attribute;\r\n      if (!dot && !bar && !highlight && !content) {\r\n        attribute.highlight = true;\r\n      }\r\n      return attribute;\r\n    },\r\n    dragAttribute_() {\r\n      if (this.mode !== 'range' || !this.picker.hasValue(this.dragValue)) {\r\n        return null;\r\n      }\r\n      const attribute = {\r\n        key: 'select-drag',\r\n        ...this.dragAttribute,\r\n        dates: this.dragValue,\r\n      };\r\n      const { dot, bar, highlight, content } = attribute;\r\n      if (!dot && !bar && !highlight && !content) {\r\n        attribute.highlight = {\r\n          startEnd: {\r\n            fillMode: 'none',\r\n          },\r\n        };\r\n      }\r\n      return attribute;\r\n    },\r\n    attributes_() {\r\n      const attrs = isArray(this.attributes) ? [...this.attributes] : [];\r\n      if (this.dragAttribute_) {\r\n        attrs.push(this.dragAttribute_);\r\n      } else if (this.selectAttribute_) {\r\n        attrs.push(this.selectAttribute_);\r\n      }\r\n      return attrs;\r\n    },\r\n    picker() {\r\n      const opts = {\r\n        locale: this.$locale,\r\n        format: d => this.$locale.format(d, this.inputMasks[0]),\r\n        parse: s => this.$locale.parse(s, this.inputMasks),\r\n      };\r\n      switch (this.mode) {\r\n        case 'multiple':\r\n          return new MultiplePicker(opts);\r\n        case 'range':\r\n          return new RangePicker(opts);\r\n        default:\r\n          return new SinglePicker(opts);\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    mode() {\r\n      // Clear value on select mode change\r\n      this.value_ = null;\r\n    },\r\n    value: {\r\n      handler() {\r\n        this.value_ = this.picker.filterDisabled({\r\n          value: this.value,\r\n          isRequired: this.isRequired,\r\n          disabled: this.disabledAttribute,\r\n          fallbackValue: null,\r\n        });\r\n        if (this.value && !this.value_) {\r\n          this.$emit('input', null);\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n    value_: {\r\n      handler(val) {\r\n        // Only emit events for internal updates and value changes\r\n        if (!this.picker.valuesAreEqual(val, this.value)) {\r\n          this.$emit('input', val);\r\n        }\r\n        // Execute side-effects for non-inline pickers\r\n        if (!this.isInline) {\r\n          if (this.doFormatInput) this.formatInput();\r\n          if (this.doHidePopover) this.hidePopover();\r\n          if (this.doAdjustPageRange) this.adjustPageRange();\r\n        }\r\n        this.doFormatInput = true;\r\n        this.doHidePopover = false;\r\n        this.doAdjustPageRange = false;\r\n      },\r\n      immediate: true,\r\n    },\r\n    dragValue(val) {\r\n      this.formatInput();\r\n      this.$emit('drag', this.picker.normalize(val));\r\n    },\r\n  },\r\n  mounted() {\r\n    // Handle escape key presses\r\n    on(document, 'keydown', this.onDocumentKeyDown);\r\n    // Clear drag on background click\r\n    const offTapOrClickHandler = addTapOrClickHandler(document, e => {\r\n      if (\r\n        document.body.contains(e.target) &&\r\n        !elementContains(this.$el, e.target) &&\r\n        this.dragValue\r\n      ) {\r\n        this.dragValue = null;\r\n      }\r\n    });\r\n    // Clean up handlers\r\n    this.$once('beforeDestroy', () => {\r\n      off(document, 'keydown', this.onDocumentKeyDown);\r\n      offTapOrClickHandler();\r\n    });\r\n  },\r\n  methods: {\r\n    dateIsValid(date) {\r\n      if (!date) return true;\r\n      return (\r\n        !!this.disabledAttribute && !this.disabledAttribute.intersectsDate(date)\r\n      );\r\n    },\r\n    onDocumentKeyDown(e) {\r\n      // Clear drag on escape keydown\r\n      if (this.dragValue && e.keyCode === 27) {\r\n        this.dragValue = null;\r\n      }\r\n    },\r\n    onDayClick(day) {\r\n      this.picker.handleDayClick(day, this);\r\n      // Re-emit event\r\n      this.$emit('dayclick', day);\r\n    },\r\n    onDayMouseEnter(day) {\r\n      this.picker.handleDayMouseEnter(day, this);\r\n      // Re-emit event\r\n      this.$emit('daymouseenter', day);\r\n    },\r\n    onDayFocusIn(day) {\r\n      this.picker.handleDayMouseEnter(day, this);\r\n      // Re-emit event\r\n      this.$emit('dayfocusin', day);\r\n    },\r\n    onDayKeydown(day) {\r\n      switch (day.event.key) {\r\n        case ' ':\r\n        case 'Enter': {\r\n          this.picker.handleDayClick(day, this);\r\n          day.event.preventDefault();\r\n          break;\r\n        }\r\n        case 'Escape': {\r\n          this.hidePopover();\r\n        }\r\n      }\r\n      // Re-emit event\r\n      this.$emit('daykeydown', day);\r\n    },\r\n    inputInput(e) {\r\n      this.inputValue = e.target.value;\r\n      if (this.updateOnInput_) {\r\n        this.updateValue(this.inputValue, {\r\n          formatInput: false,\r\n          hidePopover: false,\r\n          adjustPageRange: true,\r\n          debounce: this.inputDebounce_,\r\n        });\r\n      }\r\n    },\r\n    inputChange() {\r\n      this.updateValue(this.inputValue, {\r\n        formatInput: true,\r\n        hidePopover: false,\r\n        adjustPageRange: false,\r\n      });\r\n    },\r\n    inputKeyup(e) {\r\n      // Escape key\r\n      if (e.keyCode === 27) {\r\n        this.updateValue(this.value_, {\r\n          formatInput: true,\r\n          hidePopover: true,\r\n          adjustPageRange: false,\r\n        });\r\n      }\r\n    },\r\n    updateValue(\r\n      value = this.inputValue,\r\n      { formatInput, hidePopover, adjustPageRange, debounce } = {},\r\n    ) {\r\n      clearTimeout(this.updateTimeout);\r\n      if (debounce === undefined || debounce < 0) {\r\n        this.forceUpdateValue(value, {\r\n          formatInput,\r\n          hidePopover,\r\n          adjustPageRange,\r\n        });\r\n      } else {\r\n        this.updateTimeout = setTimeout(() => {\r\n          this.updateTimeout = null;\r\n          this.forceUpdateValue(value, {\r\n            formatInput,\r\n            hidePopover,\r\n            adjustPageRange,\r\n          });\r\n        }, debounce);\r\n      }\r\n    },\r\n    forceUpdateValue(value, { formatInput, hidePopover, adjustPageRange }) {\r\n      // Reassign input value for good measure\r\n      this.inputValue = isString(value) ? value : this.inputValue;\r\n      // Parse value if needed\r\n      const userValue = isString(value) ? this.picker.parse(value) : value;\r\n      // Set state for handling value change\r\n      this.doFormatInput = formatInput;\r\n      this.doHidePopover = hidePopover;\r\n      this.doAdjustPageRange = adjustPageRange;\r\n      // Sanitize and assign new value\r\n      this.value_ = this.picker.filterDisabled({\r\n        value: this.picker.normalize(userValue),\r\n        disabled: this.disabledAttribute,\r\n        fallbackValue: this.value_,\r\n      });\r\n    },\r\n    formatInput() {\r\n      this.$nextTick(() => {\r\n        const value = this.picker.hasValue(this.dragValue)\r\n          ? this.dragValue\r\n          : this.value_;\r\n        this.inputValue = this.picker.format(value);\r\n      });\r\n    },\r\n    hidePopover() {\r\n      const popover = this.$refs.popover;\r\n      if (popover) {\r\n        popover.hide({ priority: 10, delay: 250 });\r\n      }\r\n    },\r\n    adjustPageRange() {\r\n      if (this.picker.hasValue(this.value_) && this.$refs.calendar) {\r\n        this.$refs.calendar.showPageRange(\r\n          this.picker.getPageRange(this.value_),\r\n        );\r\n      }\r\n    },\r\n  },\r\n};\r\n",{"version":3,"sources":["DatePicker.vue"],"names":[],"mappingsfile":"DatePicker.vue","sourceRoot":"src/components","sourcesContent":["<script>\r\nimport Calendar from './Calendar';\r\nimport Popover from './Popover';\r\nimport PopoverRef from './PopoverRef';\r\nimport SinglePicker from '../utils/pickers/single';\r\nimport MultiplePicker from '../utils/pickers/multiple';\r\nimport RangePicker from '../utils/pickers/range';\r\nimport {\r\n  rootMixin,\r\n  propOrDefaultMixin,\r\n  safeScopedSlotMixin,\r\n} from '../utils/mixins';\r\nimport { addTapOrClickHandler } from '../utils/touch';\r\nimport { createGuid, elementContains, on, off } from '../utils/helpers';\r\nimport { isString, isArray } from '../utils/_';\r\nimport '../styles/tailwind-lib.css';\r\n\r\nexport default {\r\n  name: 'DatePicker',\r\n  render(h) {\r\n    const calendar = () =>\r\n      h(Calendar, {\r\n        attrs: {\r\n          ...this.$attrs,\r\n          attributes: this.attributes_,\r\n          theme: this.$theme,\r\n          locale: this.$locale,\r\n        },\r\n        props: {\r\n          minDate: this.minDate,\r\n          maxDate: this.maxDate,\r\n          disabledDates: this.disabledDates,\r\n          availableDates: this.availableDates,\r\n        },\r\n        on: {\r\n          ...this.$listeners,\r\n          dayclick: this.onDayClick,\r\n          daymouseenter: this.onDayMouseEnter,\r\n          daykeydown: this.onDayKeydown,\r\n          dayfocusin: this.onDayFocusIn,\r\n        },\r\n        scopedSlots: this.$scopedSlots,\r\n        ref: 'calendar',\r\n      });\r\n    // If inline just return the calendar\r\n    if (this.isInline) return calendar();\r\n    // Render the slot or ihput\r\n    const inputSlot =\r\n      this.safeScopedSlot('default', {\r\n        inputClass: this.inputClass,\r\n        inputValue: this.inputValue,\r\n        inputProps: this.inputProps_,\r\n        inputEvents: this.inputEvents,\r\n        isDragging: !!this.dragValue,\r\n        updateValue: this.updateValue,\r\n        hidePopover: this.hidePopover,\r\n      }) ||\r\n      h('input', {\r\n        class: this.inputClass,\r\n        attrs: this.inputProps_,\r\n        domProps: {\r\n          value: this.inputValue,\r\n        },\r\n        on: this.inputEvents,\r\n      });\r\n    // Convert this span to a fragment when supported in Vue\r\n    return h('span', [\r\n      h(\r\n        PopoverRef,\r\n        {\r\n          props: {\r\n            ...this.popover_,\r\n            id: this.datePickerPopoverId,\r\n            isInteractive: true,\r\n          },\r\n        },\r\n        [inputSlot],\r\n      ),\r\n      // Picker popover\r\n      h(Popover, {\r\n        props: {\r\n          id: this.datePickerPopoverId,\r\n          placement: 'bottom-start',\r\n          contentClass: this.$theme.container,\r\n        },\r\n        on: {\r\n          beforeShow: e => this.$emit('popoverWillShow', e),\r\n          afterShow: e => this.$emit('popoverDidShow', e),\r\n          beforeHide: e => this.$emit('popoverWillHide', e),\r\n          afterHide: e => this.$emit('popoverDidHide', e),\r\n        },\r\n        scopedSlots: {\r\n          default() {\r\n            return calendar();\r\n          },\r\n        },\r\n        ref: 'popover',\r\n      }),\r\n    ]);\r\n  },\r\n  mixins: [rootMixin, propOrDefaultMixin, safeScopedSlotMixin],\r\n  props: {\r\n    mode: { type: String, default: 'single' },\r\n    value: { type: null, required: true },\r\n    isRequired: Boolean,\r\n    isInline: Boolean,\r\n    updateOnInput: Boolean,\r\n    inputDebounce: Number,\r\n    inputProps: { type: Object, default: () => ({}) },\r\n    popover: { type: Object, default: () => ({}) },\r\n    dragAttribute: Object,\r\n    selectAttribute: Object,\r\n    attributes: Array,\r\n  },\r\n  data() {\r\n    return {\r\n      value_: null,\r\n      dragValue: null,\r\n      inputValue: '',\r\n      doFormatInput: true,\r\n      doHidePopover: false,\r\n      doAdjustPageRange: false,\r\n      updateTimeout: null,\r\n      datePickerPopoverId: createGuid(),\r\n    };\r\n  },\r\n  computed: {\r\n    updateOnInput_() {\r\n      return this.propOrDefault('updateOnInput', 'datePicker.updateOnInput');\r\n    },\r\n    inputDebounce_() {\r\n      return this.propOrDefault('inputDebounce', 'datePicker.inputDebounce');\r\n    },\r\n    inputMasks() {\r\n      const inputFormat = this.$locale.masks.input;\r\n      return (isArray(inputFormat) && inputFormat) || [inputFormat];\r\n    },\r\n    inputClass() {\r\n      const inputClass = this.inputProps.class || this.$theme.datePickerInput;\r\n      const inputDragClass =\r\n        this.inputProps.dragClass || this.$theme.datePickerInputDrag;\r\n      return this.picker.hasValue(this.dragValue)\r\n        ? inputDragClass || inputClass\r\n        : inputClass;\r\n    },\r\n    inputProps_() {\r\n      // Merge the user props with local\r\n      const props = {\r\n        ...this.inputProps,\r\n        value: this.inputValue,\r\n        type: 'input',\r\n      };\r\n      // Delete class properties\r\n      delete props.class;\r\n      delete props.dragClass;\r\n      return props;\r\n    },\r\n    inputEvents() {\r\n      return {\r\n        input: this.inputInput,\r\n        change: this.inputChange,\r\n        // keydown: this.inputKeydown,\r\n        keyup: this.inputKeyup,\r\n      };\r\n    },\r\n    popover_() {\r\n      return this.propOrDefault('popover', 'datePicker.popover', 'merge');\r\n    },\r\n    canHidePopover() {\r\n      return !(\r\n        this.popover.keepVisibleOnInput ||\r\n        this.popover_.visibility !== 'visible'\r\n      );\r\n    },\r\n    selectAttribute_() {\r\n      if (!this.picker.hasValue(this.value_)) return null;\r\n      const attribute = {\r\n        key: 'select-drag',\r\n        ...this.selectAttribute,\r\n        dates: this.value_,\r\n        pinPage: true,\r\n      };\r\n      const { dot, bar, highlight, content } = attribute;\r\n      if (!dot && !bar && !highlight && !content) {\r\n        attribute.highlight = true;\r\n      }\r\n      return attribute;\r\n    },\r\n    dragAttribute_() {\r\n      if (this.mode !== 'range' || !this.picker.hasValue(this.dragValue)) {\r\n        return null;\r\n      }\r\n      const attribute = {\r\n        key: 'select-drag',\r\n        ...this.dragAttribute,\r\n        dates: this.dragValue,\r\n      };\r\n      const { dot, bar, highlight, content } = attribute;\r\n      if (!dot && !bar && !highlight && !content) {\r\n        attribute.highlight = {\r\n          startEnd: {\r\n            fillMode: 'none',\r\n          },\r\n        };\r\n      }\r\n      return attribute;\r\n    },\r\n    attributes_() {\r\n      const attrs = isArray(this.attributes) ? [...this.attributes] : [];\r\n      if (this.dragAttribute_) {\r\n        attrs.push(this.dragAttribute_);\r\n      } else if (this.selectAttribute_) {\r\n        attrs.push(this.selectAttribute_);\r\n      }\r\n      return attrs;\r\n    },\r\n    picker() {\r\n      const opts = {\r\n        locale: this.$locale,\r\n        format: d => this.$locale.format(d, this.inputMasks[0]),\r\n        parse: s => this.$locale.parse(s, this.inputMasks),\r\n      };\r\n      switch (this.mode) {\r\n        case 'multiple':\r\n          return new MultiplePicker(opts);\r\n        case 'range':\r\n          return new RangePicker(opts);\r\n        default:\r\n          return new SinglePicker(opts);\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    mode() {\r\n      // Clear value on select mode change\r\n      this.value_ = null;\r\n    },\r\n    value: {\r\n      handler() {\r\n        this.value_ = this.picker.filterDisabled({\r\n          value: this.value,\r\n          isRequired: this.isRequired,\r\n          disabled: this.disabledAttribute,\r\n          fallbackValue: null,\r\n        });\r\n        if (this.value && !this.value_) {\r\n          this.$emit('input', null);\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n    value_: {\r\n      handler(val) {\r\n        // Only emit events for internal updates and value changes\r\n        if (!this.picker.valuesAreEqual(val, this.value)) {\r\n          this.$emit('input', val);\r\n        }\r\n        // Execute side-effects for non-inline pickers\r\n        if (!this.isInline) {\r\n          if (this.doFormatInput) this.formatInput();\r\n          if (this.doHidePopover) this.hidePopover();\r\n          if (this.doAdjustPageRange) this.adjustPageRange();\r\n        }\r\n        this.doFormatInput = true;\r\n        this.doHidePopover = false;\r\n        this.doAdjustPageRange = false;\r\n      },\r\n      immediate: true,\r\n    },\r\n    dragValue(val) {\r\n      this.formatInput();\r\n      this.$emit('drag', this.picker.normalize(val));\r\n    },\r\n  },\r\n  mounted() {\r\n    // Handle escape key presses\r\n    on(document, 'keydown', this.onDocumentKeyDown);\r\n    // Clear drag on background click\r\n    const offTapOrClickHandler = addTapOrClickHandler(document, e => {\r\n      if (\r\n        document.body.contains(e.target) &&\r\n        !elementContains(this.$el, e.target) &&\r\n        this.dragValue\r\n      ) {\r\n        this.dragValue = null;\r\n      }\r\n    });\r\n    // Clean up handlers\r\n    this.$once('beforeDestroy', () => {\r\n      off(document, 'keydown', this.onDocumentKeyDown);\r\n      offTapOrClickHandler();\r\n    });\r\n  },\r\n  methods: {\r\n    dateIsValid(date) {\r\n      if (!date) return true;\r\n      return (\r\n        !!this.disabledAttribute && !this.disabledAttribute.intersectsDate(date)\r\n      );\r\n    },\r\n    onDocumentKeyDown(e) {\r\n      // Clear drag on escape keydown\r\n      if (this.dragValue && e.keyCode === 27) {\r\n        this.dragValue = null;\r\n      }\r\n    },\r\n    onDayClick(day) {\r\n      this.picker.handleDayClick(day, this);\r\n      // Re-emit event\r\n      this.$emit('dayclick', day);\r\n    },\r\n    onDayMouseEnter(day) {\r\n      this.picker.handleDayMouseEnter(day, this);\r\n      // Re-emit event\r\n      this.$emit('daymouseenter', day);\r\n    },\r\n    onDayFocusIn(day) {\r\n      this.picker.handleDayMouseEnter(day, this);\r\n      // Re-emit event\r\n      this.$emit('dayfocusin', day);\r\n    },\r\n    onDayKeydown(day) {\r\n      switch (day.event.key) {\r\n        case ' ':\r\n        case 'Enter': {\r\n          this.picker.handleDayClick(day, this);\r\n          day.event.preventDefault();\r\n          break;\r\n        }\r\n        case 'Escape': {\r\n          this.hidePopover();\r\n        }\r\n      }\r\n      // Re-emit event\r\n      this.$emit('daykeydown', day);\r\n    },\r\n    inputInput(e) {\r\n      this.inputValue = e.target.value;\r\n      if (this.updateOnInput_) {\r\n        this.updateValue(this.inputValue, {\r\n          formatInput: false,\r\n          hidePopover: false,\r\n          adjustPageRange: true,\r\n          debounce: this.inputDebounce_,\r\n        });\r\n      }\r\n    },\r\n    inputChange() {\r\n      this.updateValue(this.inputValue, {\r\n        formatInput: true,\r\n        hidePopover: false,\r\n        adjustPageRange: false,\r\n      });\r\n    },\r\n    inputKeyup(e) {\r\n      // Escape key\r\n      if (e.keyCode === 27) {\r\n        this.updateValue(this.value_, {\r\n          formatInput: true,\r\n          hidePopover: true,\r\n          adjustPageRange: false,\r\n        });\r\n      }\r\n    },\r\n    updateValue(\r\n      value = this.inputValue,\r\n      { formatInput, hidePopover, adjustPageRange, debounce } = {},\r\n    ) {\r\n      clearTimeout(this.updateTimeout);\r\n      if (debounce === undefined || debounce < 0) {\r\n        this.forceUpdateValue(value, {\r\n          formatInput,\r\n          hidePopover,\r\n          adjustPageRange,\r\n        });\r\n      } else {\r\n        this.updateTimeout = setTimeout(() => {\r\n          this.updateTimeout = null;\r\n          this.forceUpdateValue(value, {\r\n            formatInput,\r\n            hidePopover,\r\n            adjustPageRange,\r\n          });\r\n        }, debounce);\r\n      }\r\n    },\r\n    forceUpdateValue(value, { formatInput, hidePopover, adjustPageRange }) {\r\n      // Reassign input value for good measure\r\n      this.inputValue = isString(value) ? value : this.inputValue;\r\n      // Parse value if needed\r\n      const userValue = isString(value) ? this.picker.parse(value) : value;\r\n      // Set state for handling value change\r\n      this.doFormatInput = formatInput;\r\n      this.doHidePopover = hidePopover;\r\n      this.doAdjustPageRange = adjustPageRange;\r\n      // Sanitize and assign new value\r\n      this.value_ = this.picker.filterDisabled({\r\n        value: this.picker.normalize(userValue),\r\n        disabled: this.disabledAttribute,\r\n        fallbackValue: this.value_,\r\n      });\r\n    },\r\n    formatInput() {\r\n      this.$nextTick(() => {\r\n        const value = this.picker.hasValue(this.dragValue)\r\n          ? this.dragValue\r\n          : this.value_;\r\n        this.inputValue = this.picker.format(value);\r\n      });\r\n    },\r\n    hidePopover() {\r\n      const popover = this.$refs.popover;\r\n      if (popover) {\r\n        popover.hide({ priority: 10, delay: 250 });\r\n      }\r\n    },\r\n    adjustPageRange() {\r\n      if (this.picker.hasValue(this.value_) && this.$refs.calendar) {\r\n        this.$refs.calendar.showPageRange(\r\n          this.picker.getPageRange(this.value_),\r\n        );\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"postcss\" scoped>\r\n::v-deep .vc-container {\r\n  border: none;\r\n}\r\n</style>\r\n"]}]}