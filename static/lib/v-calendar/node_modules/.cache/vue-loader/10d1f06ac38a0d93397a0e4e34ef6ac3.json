{"remainingRequest":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/Calendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/src/components/Calendar.vue","mtime":1592351795000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guest/Ostanin-dev/static/lib/v-calendar/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport { addDays, addMonths, addYears } from 'date-fns';\r\nimport Popover from './Popover';\r\nimport PopoverRow from './PopoverRow';\r\nimport Grid from './Grid';\r\nimport CalendarPane from './CalendarPane';\r\nimport CustomTransition from './CustomTransition';\r\nimport SvgIcon from './SvgIcon';\r\nimport AttributeStore from '../utils/attributeStore';\r\nimport {\r\n  propOrDefaultMixin,\r\n  rootMixin,\r\n  safeScopedSlotMixin,\r\n} from '../utils/mixins';\r\nimport { addHorizontalSwipeHandler } from '../utils/touch';\r\nimport {\r\n  pageForDate,\r\n  pageForThisMonth,\r\n  addPages,\r\n  pageIsValid,\r\n  pageIsEqualToPage,\r\n  pageIsBeforePage,\r\n  pageIsAfterPage,\r\n  pageIsBetweenPages,\r\n  createGuid,\r\n  arrayHasItems,\r\n  onSpaceOrEnter,\r\n} from '../utils/helpers';\r\nimport {\r\n  isNumber,\r\n  isDate,\r\n  isObject,\r\n  hasAny,\r\n  omit,\r\n  head,\r\n  last,\r\n} from '../utils/_';\r\nimport '../styles/tailwind-lib.css';\r\n\r\nexport default {\r\n  name: 'Calendar',\r\n  render(h) {\r\n    // Renderer for calendar panes\r\n    const panes = this.pages.map((page, i) =>\r\n      h(CalendarPane, {\r\n        attrs: {\r\n          ...this.$attrs,\r\n          attributes: this.store,\r\n        },\r\n        props: {\r\n          titlePosition: this.titlePosition_,\r\n          page,\r\n          minPage: this.minPage_,\r\n          maxPage: this.maxPage_,\r\n          canMove: this.canMove,\r\n        },\r\n        on: {\r\n          ...this.$listeners,\r\n          'update:page': e => this.refreshPages({ page: e, position: i + 1 }),\r\n          dayfocusin: e => {\r\n            this.lastFocusedDay = e;\r\n            this.$emit('dayfocusin', e);\r\n          },\r\n          dayfocusout: e => {\r\n            this.lastFocusedDay = null;\r\n            this.$emit('dayfocusout', e);\r\n          },\r\n        },\r\n        scopedSlots: this.$scopedSlots,\r\n        key: page.key,\r\n        ref: 'pages',\r\n        refInFor: true,\r\n      }),\r\n    );\r\n\r\n    // Renderer for calendar arrows\r\n    const getArrowButton = isPrev => {\r\n      const click = () => this.move(isPrev ? -this.step_ : this.step_);\r\n      const keydown = e => onSpaceOrEnter(e, click);\r\n      const isDisabled = isPrev ? !this.canMovePrev : !this.canMoveNext;\r\n      return h(\r\n        'div',\r\n        {\r\n          class: [\r\n            `vc-flex vc-justify-center vc-items-center vc-cursor-pointer vc-select-none ${\r\n              isDisabled\r\n                ? 'vc-opacity-25 vc-pointer-events-none vc-cursor-not-allowed'\r\n                : 'vc-pointer-events-auto'\r\n            }`,\r\n            this.$theme.arrows,\r\n          ],\r\n          attrs: {\r\n            role: 'button',\r\n          },\r\n          on: {\r\n            click,\r\n            keydown,\r\n          },\r\n        },\r\n        [\r\n          (isPrev\r\n            ? this.safeScopedSlot('header-left-button', { click })\r\n            : this.safeScopedSlot('header-right-button', { click })) ||\r\n            h(SvgIcon, {\r\n              props: {\r\n                name: isPrev ? 'left-arrow' : 'right-arrow',\r\n              },\r\n            }),\r\n        ],\r\n      );\r\n    };\r\n\r\n    // Day popover\r\n    const getDayPopover = () =>\r\n      h(Popover, {\r\n        props: {\r\n          id: this.sharedState.dayPopoverId,\r\n          contentClass: this.$theme.dayPopoverContainer,\r\n        },\r\n        scopedSlots: {\r\n          default: ({ args: day, updateLayout, hide }) => {\r\n            const attributes = Object.values(day.attributes).filter(\r\n              a => a.popover,\r\n            );\r\n            const masks = this.$locale.masks;\r\n            const format = this.format;\r\n            const dayTitle = format(day.date, masks.dayPopover);\r\n            return (\r\n              this.safeScopedSlot('day-popover', {\r\n                day,\r\n                attributes,\r\n                masks,\r\n                format,\r\n                dayTitle,\r\n                updateLayout,\r\n                hide,\r\n              }) ||\r\n              h('div', [\r\n                // Show popover header only if format is defined\r\n                masks.dayPopover &&\r\n                  h(\r\n                    'div',\r\n                    {\r\n                      class: ['vc-text-center', this.$theme.dayPopoverHeader],\r\n                    },\r\n                    [dayTitle],\r\n                  ),\r\n                attributes.map(attribute =>\r\n                  h(PopoverRow, {\r\n                    key: attribute.key,\r\n                    props: {\r\n                      attribute,\r\n                    },\r\n                  }),\r\n                ),\r\n              ])\r\n            );\r\n          },\r\n        },\r\n      });\r\n\r\n    // Renderer for calendar container\r\n    const getContainerGrid = () =>\r\n      h(\r\n        'div',\r\n        {\r\n          attrs: {\r\n            'data-helptext':\r\n              'Press the arrow keys to navigate by day, Home and End to navigate to week ends, PageUp and PageDown to navigate by month, Alt+PageUp and Alt+PageDown to navigate by year',\r\n          },\r\n          class: [\r\n            'vc-container',\r\n            'vc-reset',\r\n            {\r\n              'vc-min-w-full': this.isExpanded,\r\n            },\r\n            this.$theme.container,\r\n          ],\r\n          on: {\r\n            keydown: this.handleKeydown,\r\n            mouseup: e => e.preventDefault(),\r\n          },\r\n          ref: 'container',\r\n        },\r\n        [\r\n          h(\r\n            'div',\r\n            {\r\n              class: [\r\n                'vc-w-full vc-relative',\r\n                { 'vc-overflow-hidden': this.inTransition },\r\n              ],\r\n            },\r\n            [\r\n              h(\r\n                CustomTransition,\r\n                {\r\n                  props: {\r\n                    name: this.transitionName,\r\n                  },\r\n                  on: {\r\n                    beforeEnter: () => {\r\n                      this.inTransition = true;\r\n                    },\r\n                    afterEnter: () => {\r\n                      this.inTransition = false;\r\n                    },\r\n                  },\r\n                },\r\n                [\r\n                  h(\r\n                    Grid,\r\n                    {\r\n                      class: 'grid',\r\n                      props: {\r\n                        rows: this.rows,\r\n                        columns: this.columns,\r\n                        columnWidth: 'minmax(256px, 1fr)',\r\n                        disableFocus: true,\r\n                      },\r\n                      attrs: {\r\n                        ...this.$attrs,\r\n                      },\r\n                      key: arrayHasItems(this.pages) ? this.pages[0].key : '',\r\n                    },\r\n                    panes,\r\n                  ),\r\n                ],\r\n              ),\r\n              h(\r\n                'div',\r\n                {\r\n                  class: [`vc-arrows-container title-${this.titlePosition_}`],\r\n                },\r\n                [getArrowButton(true), getArrowButton(false)],\r\n              ),\r\n            ],\r\n          ),\r\n          getDayPopover(),\r\n        ],\r\n      );\r\n\r\n    return getContainerGrid();\r\n  },\r\n  mixins: [propOrDefaultMixin, rootMixin, safeScopedSlotMixin],\r\n  provide() {\r\n    return {\r\n      sharedState: this.sharedState,\r\n    };\r\n  },\r\n  props: {\r\n    rows: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    columns: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    step: Number,\r\n    titlePosition: String,\r\n    isExpanded: Boolean,\r\n    fromDate: Date,\r\n    toDate: Date,\r\n    fromPage: Object,\r\n    toPage: Object,\r\n    minPage: Object,\r\n    maxPage: Object,\r\n    transition: String,\r\n    attributes: [Object, Array],\r\n    disablePageSwipe: Boolean,\r\n  },\r\n  data() {\r\n    return {\r\n      pages: [],\r\n      store: null,\r\n      lastFocusedDay: null,\r\n      focusableDay: new Date().getDate(),\r\n      transitionName: '',\r\n      inTransition: false,\r\n      sharedState: {\r\n        dayPopoverId: createGuid(),\r\n        theme: {},\r\n        masks: {},\r\n        locale: {},\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    titlePosition_() {\r\n      return this.propOrDefault('titlePosition', 'titlePosition');\r\n    },\r\n    minPage_() {\r\n      return this.minPage || pageForDate(this.$locale.toDate(this.minDate));\r\n    },\r\n    maxPage_() {\r\n      return this.maxPage || pageForDate(this.$locale.toDate(this.maxDate));\r\n    },\r\n    count() {\r\n      return this.rows * this.columns;\r\n    },\r\n    step_() {\r\n      return this.step || this.count;\r\n    },\r\n    canMovePrev() {\r\n      return (\r\n        !pageIsValid(this.minPage_) ||\r\n        pageIsAfterPage(this.pages[0], this.minPage_)\r\n      );\r\n    },\r\n    canMoveNext() {\r\n      return (\r\n        !pageIsValid(this.maxPage_) ||\r\n        pageIsBeforePage(this.pages[this.pages.length - 1], this.maxPage_)\r\n      );\r\n    },\r\n  },\r\n  watch: {\r\n    $locale() {\r\n      this.refreshLocale();\r\n      this.refreshPages({ page: head(this.pages), ignoreCache: true });\r\n      this.initStore();\r\n    },\r\n    $theme() {\r\n      this.refreshTheme();\r\n      this.initStore();\r\n    },\r\n    fromDate() {\r\n      this.refreshPages();\r\n    },\r\n    fromPage(val) {\r\n      const firstPage = this.pages && this.pages[0];\r\n      if (pageIsEqualToPage(val, firstPage)) return;\r\n      this.refreshPages();\r\n    },\r\n    toPage(val) {\r\n      const lastPage = this.pages && this.pages[this.pages.length - 1];\r\n      if (pageIsEqualToPage(val, lastPage)) return;\r\n      this.refreshPages();\r\n    },\r\n    count() {\r\n      this.refreshPages();\r\n    },\r\n    attributes(val) {\r\n      const { adds, deletes } = this.store.refresh(val);\r\n      this.refreshAttrs(this.pages, adds, deletes);\r\n    },\r\n    pages(val) {\r\n      this.refreshAttrs(val, this.store.list, null, true);\r\n    },\r\n    disabledAttribute() {\r\n      this.refreshDisabledDays();\r\n    },\r\n    lastFocusedDay(val) {\r\n      if (val) {\r\n        this.focusableDay = val.day;\r\n        this.refreshFocusableDays();\r\n      }\r\n    },\r\n    inTransition(val) {\r\n      if (val) {\r\n        this.$emit('transition-start');\r\n      } else {\r\n        this.$emit('transition-end');\r\n        if (this.transitionPromise) {\r\n          this.transitionPromise.resolve();\r\n          this.transitionPromise = null;\r\n        }\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.refreshLocale();\r\n    this.refreshTheme();\r\n    this.initStore();\r\n    this.refreshPages();\r\n  },\r\n  mounted() {\r\n    if (!this.disablePageSwipe) {\r\n      // Add swipe handler to move to next and previous pages\r\n      const removeHandlers = addHorizontalSwipeHandler(\r\n        this.$refs.container,\r\n        ({ toLeft, toRight }) => {\r\n          if (toLeft) {\r\n            this.moveNext();\r\n          } else if (toRight) {\r\n            this.movePrev();\r\n          }\r\n        },\r\n        this.$defaults.touch,\r\n      );\r\n      // Clean up on destroy\r\n      this.$once('beforeDestroy', () => removeHandlers());\r\n    }\r\n  },\r\n  methods: {\r\n    refreshLocale() {\r\n      this.sharedState.locale = this.$locale;\r\n      this.sharedState.masks = this.$locale.masks;\r\n    },\r\n    refreshTheme() {\r\n      this.sharedState.theme = this.$theme;\r\n    },\r\n    canMove(page) {\r\n      return pageIsBetweenPages(page, this.minPage_, this.maxPage_);\r\n    },\r\n    async movePrev(opts) {\r\n      const result = await this.move(-this.step_, opts);\r\n      return result;\r\n    },\r\n    async moveNext(opts) {\r\n      const result = this.move(this.step_, opts);\r\n      return result;\r\n    },\r\n    async move(arg, opts) {\r\n      const page = this.$locale.toPage(arg, this.pages[0]);\r\n      if (!page) {\r\n        return null;\r\n      }\r\n      const result = await this.refreshPages({\r\n        ...opts,\r\n        page,\r\n      });\r\n      return result;\r\n    },\r\n    async focusDate(date, opts = {}) {\r\n      const page = pageForDate(date);\r\n      // Calculate new fromPage\r\n      let fromPage = null;\r\n      if (opts.position) {\r\n        fromPage = this.getTargetPageRange(page, opts.position).fromPage;\r\n      } else if (pageIsBeforePage(page, this.pages[0])) {\r\n        fromPage = this.getTargetPageRange(page, -1).fromPage;\r\n      } else if (pageIsAfterPage(page, last(this.pages))) {\r\n        fromPage = this.getTargetPageRange(page, 1).fromPage;\r\n      }\r\n      // Move to new fromPage if it's different from the current one\r\n      if (fromPage && !pageIsEqualToPage(fromPage, this.pages[0])) {\r\n        await this.refreshPages({\r\n          ...opts,\r\n          position: 1,\r\n          page: fromPage,\r\n        });\r\n      }\r\n      // Set focus on the element for the date\r\n      const focusableEl = this.$el.querySelector(\r\n        `.id-${this.$locale.format(date, 'YYYY-MM-DD')}.in-month .vc-focusable`,\r\n      );\r\n      if (focusableEl) {\r\n        focusableEl.focus();\r\n      }\r\n    },\r\n    async showPageRange(range, opts) {\r\n      let fromPage;\r\n      let toPage;\r\n      if (isDate(range)) {\r\n        fromPage = pageForDate(range);\r\n      } else if (isObject(range)) {\r\n        const { month, year } = range;\r\n        const { from, to } = range;\r\n        if (isNumber(month) && isNumber(year)) {\r\n          fromPage = range;\r\n        } else if (from || to) {\r\n          fromPage = isDate(from) ? pageForDate(from) : from;\r\n          toPage = isDate(to) ? pageForDate(to) : to;\r\n        }\r\n      } else {\r\n        return;\r\n      }\r\n      const lastPage = last(this.pages);\r\n      let page = fromPage;\r\n      // Offset page from the desired `toPage`\r\n      if (pageIsAfterPage(toPage, lastPage)) {\r\n        page = addPages(toPage, -(this.pages.length - 1));\r\n      }\r\n      // But no earlier than the desired `fromPage`\r\n      if (pageIsBeforePage(fromPage, page)) {\r\n        page = fromPage;\r\n      }\r\n      await this.refreshPages({ ...opts, page });\r\n    },\r\n    getTargetPageRange(page, position) {\r\n      // Calculate the page to start displaying from\r\n      let fromPage = null;\r\n      // 1. Try the page parameter\r\n      if (pageIsValid(page)) {\r\n        const pagesToAdd =\r\n          position > 0 ? 1 - position : -(this.count + position);\r\n        fromPage = addPages(page, pagesToAdd);\r\n      } else {\r\n        // 2. Try the fromPage prop\r\n        fromPage =\r\n          this.fromPage || pageForDate(this.$locale.toDate(this.fromDate));\r\n        if (!pageIsValid(fromPage)) {\r\n          // 3. Try the toPage prop\r\n          const toPage =\r\n            this.toPage || pageForDate(this.$locale.toDate(this.toPage));\r\n          if (pageIsValid(toPage)) {\r\n            fromPage = addPages(toPage, 1 - this.count);\r\n          } else {\r\n            // 4. Try the first attribute\r\n            fromPage = this.getPageForAttributes();\r\n          }\r\n        }\r\n      }\r\n      // 5. Fall back to today's page\r\n      fromPage = pageIsValid(fromPage) ? fromPage : pageForThisMonth();\r\n      // Adjust from page within allowed min/max pages\r\n      const toPage = addPages(fromPage, this.count - 1);\r\n      if (pageIsBeforePage(fromPage, this.minPage_)) {\r\n        fromPage = this.minPage_;\r\n      } else if (pageIsAfterPage(toPage, this.maxPage_)) {\r\n        fromPage = addPages(this.maxPage_, 1 - this.count);\r\n      }\r\n      return { fromPage, toPage };\r\n    },\r\n    async refreshPages({ page, position = 1, transition, ignoreCache } = {}) {\r\n      return new Promise((resolve, reject) => {\r\n        const { fromPage, toPage } = this.getTargetPageRange(page, position);\r\n        // Create the new pages\r\n        const pages = [];\r\n        for (let i = 0; i < this.count; i++) {\r\n          pages.push(this.buildPage(addPages(fromPage, i), ignoreCache));\r\n        }\r\n        // Refresh disabled days for new pages\r\n        this.refreshDisabledDays(pages);\r\n        // Refresh focusable days for new pages\r\n        this.refreshFocusableDays(pages);\r\n        // Assign the transition\r\n        this.transitionName = this.getPageTransition(\r\n          this.pages[0],\r\n          pages[0],\r\n          transition,\r\n        );\r\n        // Assign the new pages\r\n        this.pages = pages;\r\n        // Emit page update events\r\n        this.$emit('update:from-page', fromPage);\r\n        this.$emit('update:to-page', toPage);\r\n        if (this.transitionName && this.transitionName !== 'none') {\r\n          this.transitionPromise = {\r\n            resolve,\r\n            reject,\r\n          };\r\n        } else {\r\n          resolve();\r\n        }\r\n      });\r\n    },\r\n    refreshDisabledDays(pages) {\r\n      this.getPageDays(pages).forEach(d => {\r\n        d.isDisabled =\r\n          !!this.disabledAttribute && this.disabledAttribute.includesDay(d);\r\n      });\r\n    },\r\n    refreshFocusableDays(pages) {\r\n      this.getPageDays(pages).forEach(d => {\r\n        d.isFocusable = d.inMonth && d.day === this.focusableDay;\r\n      });\r\n    },\r\n    getPageDays(pages = this.pages) {\r\n      return pages.reduce((prev, curr) => prev.concat(curr.days), []);\r\n    },\r\n    getPageTransition(oldPage, newPage, transition = this.transition) {\r\n      if (transition === 'none') return transition;\r\n      if (\r\n        transition === 'fade' ||\r\n        (!transition && this.count > 1) ||\r\n        !pageIsValid(oldPage) ||\r\n        !pageIsValid(newPage)\r\n      ) {\r\n        return 'fade';\r\n      }\r\n      // Moving to a previous page\r\n      const movePrev = pageIsBeforePage(newPage, oldPage);\r\n      // Vertical slide\r\n      if (transition === 'slide-v') {\r\n        return movePrev ? 'slide-down' : 'slide-up';\r\n      }\r\n      // Horizontal slide\r\n      return movePrev ? 'slide-right' : 'slide-left';\r\n    },\r\n    getPageForAttributes() {\r\n      let page = null;\r\n      const attr = this.store.pinAttr;\r\n      if (attr && attr.hasDates) {\r\n        let [date] = attr.dates;\r\n        date = date.start || date.date;\r\n        page = pageForDate(this.$locale.toDate(date));\r\n      }\r\n      return page;\r\n    },\r\n    buildPage({ month, year }, ignoreCache) {\r\n      const key = `${year.toString()}-${month.toString()}`;\r\n      let page = this.pages.find(p => p.key === key);\r\n      if (!page || ignoreCache) {\r\n        const date = new Date(year, month - 1, 15);\r\n        const monthComps = this.$locale.getMonthComps(month, year);\r\n        const prevMonthComps = this.$locale.getPrevMonthComps(month, year);\r\n        const nextMonthComps = this.$locale.getNextMonthComps(month, year);\r\n        page = {\r\n          key,\r\n          month,\r\n          year,\r\n          title: this.$locale.format(date, this.$locale.masks.title),\r\n          shortMonthLabel: this.$locale.format(date, 'MMM'),\r\n          monthLabel: this.$locale.format(date, 'MMMM'),\r\n          shortYearLabel: year.toString().substring(2),\r\n          yearLabel: year.toString(),\r\n          monthComps,\r\n          prevMonthComps,\r\n          nextMonthComps,\r\n          canMove: pg => this.canMove(pg),\r\n          move: pg => this.move(pg),\r\n          moveThisMonth: () => this.moveThisMonth(),\r\n          movePrevMonth: () => this.move(prevMonthComps),\r\n          moveNextMonth: () => this.move(nextMonthComps),\r\n          refresh: true,\r\n        };\r\n        // Assign day info\r\n        page.days = this.$locale.getCalendarDays(page);\r\n      }\r\n      return page;\r\n    },\r\n    initStore() {\r\n      // Create a new attribute store\r\n      this.store = new AttributeStore(\r\n        this.$theme,\r\n        this.$locale,\r\n        this.attributes,\r\n      );\r\n      // Refresh attributes for existing pages\r\n      this.refreshAttrs(this.pages, this.store.list, [], true);\r\n    },\r\n    refreshAttrs(pages = [], adds = [], deletes = [], reset) {\r\n      if (!arrayHasItems(pages)) return;\r\n      // For each page...\r\n      pages.forEach(p => {\r\n        // For each day...\r\n        p.days.forEach(d => {\r\n          let map = {};\r\n          // If resetting...\r\n          if (reset) {\r\n            // Flag day for refresh if it has attributes\r\n            d.refresh = arrayHasItems(d.attributes);\r\n          } else if (hasAny(d.attributesMap, deletes)) {\r\n            // Delete attributes from the delete list\r\n            map = omit(d.attributesMap, deletes);\r\n            // Flag day for refresh\r\n            d.refresh = true;\r\n          } else {\r\n            // Get the existing attributes\r\n            map = d.attributesMap || {};\r\n          }\r\n          // For each attribute to add...\r\n          adds.forEach(attr => {\r\n            // Add it if it includes the current day\r\n            const targetDate = attr.includesDay(d);\r\n            if (targetDate) {\r\n              const newAttr = {\r\n                ...attr,\r\n                targetDate,\r\n              };\r\n              map[attr.key] = newAttr;\r\n              // Flag day for refresh\r\n              d.refresh = true;\r\n            }\r\n          });\r\n          // Reassign day attributes\r\n          if (d.refresh) {\r\n            d.attributesMap = map;\r\n          }\r\n        });\r\n      });\r\n      // Refresh pages\r\n      this.$nextTick(() => {\r\n        this.$refs.pages.forEach(p => p.refresh());\r\n      });\r\n    },\r\n    handleKeydown(e) {\r\n      const day = this.lastFocusedDay;\r\n      if (day != null) {\r\n        day.event = e;\r\n        this.handleDayKeydown(day);\r\n      }\r\n    },\r\n    handleDayKeydown(day) {\r\n      const { date, event } = day;\r\n      let newDate = null;\r\n      switch (event.key) {\r\n        case 'ArrowLeft': {\r\n          // Move to previous day\r\n          newDate = addDays(date, -1);\r\n          break;\r\n        }\r\n        case 'ArrowRight': {\r\n          // Move to next day\r\n          newDate = addDays(date, 1);\r\n          break;\r\n        }\r\n        case 'ArrowUp': {\r\n          // Move to previous week\r\n          newDate = addDays(date, -7);\r\n          break;\r\n        }\r\n        case 'ArrowDown': {\r\n          // Move to next week\r\n          newDate = addDays(date, 7);\r\n          break;\r\n        }\r\n        case 'Home': {\r\n          // Move to first weekday position\r\n          newDate = addDays(date, -day.weekdayPosition + 1);\r\n          break;\r\n        }\r\n        case 'End': {\r\n          // Move to last weekday position\r\n          newDate = addDays(date, day.weekdayPositionFromEnd);\r\n          break;\r\n        }\r\n        case 'PageUp': {\r\n          if (event.altKey) {\r\n            // Move to previous year w/ Alt/Option key\r\n            newDate = addYears(date, -1);\r\n          } else {\r\n            // Move to previous month\r\n            newDate = addMonths(date, -1);\r\n          }\r\n          break;\r\n        }\r\n        case 'PageDown': {\r\n          if (event.altKey) {\r\n            // Move to next year w/ Alt/Option key\r\n            newDate = addYears(date, 1);\r\n          } else {\r\n            // Move to next month\r\n            newDate = addMonths(date, 1);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (newDate) {\r\n        event.preventDefault();\r\n        this.focusDate(newDate);\r\n      }\r\n    },\r\n  },\r\n};\r\n",{"version":3,"sources":["Calendar.vue"],"names":[],"mappingsfile":"Calendar.vue","sourceRoot":"src/components","sourcesContent":["<script>\r\nimport { addDays, addMonths, addYears } from 'date-fns';\r\nimport Popover from './Popover';\r\nimport PopoverRow from './PopoverRow';\r\nimport Grid from './Grid';\r\nimport CalendarPane from './CalendarPane';\r\nimport CustomTransition from './CustomTransition';\r\nimport SvgIcon from './SvgIcon';\r\nimport AttributeStore from '../utils/attributeStore';\r\nimport {\r\n  propOrDefaultMixin,\r\n  rootMixin,\r\n  safeScopedSlotMixin,\r\n} from '../utils/mixins';\r\nimport { addHorizontalSwipeHandler } from '../utils/touch';\r\nimport {\r\n  pageForDate,\r\n  pageForThisMonth,\r\n  addPages,\r\n  pageIsValid,\r\n  pageIsEqualToPage,\r\n  pageIsBeforePage,\r\n  pageIsAfterPage,\r\n  pageIsBetweenPages,\r\n  createGuid,\r\n  arrayHasItems,\r\n  onSpaceOrEnter,\r\n} from '../utils/helpers';\r\nimport {\r\n  isNumber,\r\n  isDate,\r\n  isObject,\r\n  hasAny,\r\n  omit,\r\n  head,\r\n  last,\r\n} from '../utils/_';\r\nimport '../styles/tailwind-lib.css';\r\n\r\nexport default {\r\n  name: 'Calendar',\r\n  render(h) {\r\n    // Renderer for calendar panes\r\n    const panes = this.pages.map((page, i) =>\r\n      h(CalendarPane, {\r\n        attrs: {\r\n          ...this.$attrs,\r\n          attributes: this.store,\r\n        },\r\n        props: {\r\n          titlePosition: this.titlePosition_,\r\n          page,\r\n          minPage: this.minPage_,\r\n          maxPage: this.maxPage_,\r\n          canMove: this.canMove,\r\n        },\r\n        on: {\r\n          ...this.$listeners,\r\n          'update:page': e => this.refreshPages({ page: e, position: i + 1 }),\r\n          dayfocusin: e => {\r\n            this.lastFocusedDay = e;\r\n            this.$emit('dayfocusin', e);\r\n          },\r\n          dayfocusout: e => {\r\n            this.lastFocusedDay = null;\r\n            this.$emit('dayfocusout', e);\r\n          },\r\n        },\r\n        scopedSlots: this.$scopedSlots,\r\n        key: page.key,\r\n        ref: 'pages',\r\n        refInFor: true,\r\n      }),\r\n    );\r\n\r\n    // Renderer for calendar arrows\r\n    const getArrowButton = isPrev => {\r\n      const click = () => this.move(isPrev ? -this.step_ : this.step_);\r\n      const keydown = e => onSpaceOrEnter(e, click);\r\n      const isDisabled = isPrev ? !this.canMovePrev : !this.canMoveNext;\r\n      return h(\r\n        'div',\r\n        {\r\n          class: [\r\n            `vc-flex vc-justify-center vc-items-center vc-cursor-pointer vc-select-none ${\r\n              isDisabled\r\n                ? 'vc-opacity-25 vc-pointer-events-none vc-cursor-not-allowed'\r\n                : 'vc-pointer-events-auto'\r\n            }`,\r\n            this.$theme.arrows,\r\n          ],\r\n          attrs: {\r\n            role: 'button',\r\n          },\r\n          on: {\r\n            click,\r\n            keydown,\r\n          },\r\n        },\r\n        [\r\n          (isPrev\r\n            ? this.safeScopedSlot('header-left-button', { click })\r\n            : this.safeScopedSlot('header-right-button', { click })) ||\r\n            h(SvgIcon, {\r\n              props: {\r\n                name: isPrev ? 'left-arrow' : 'right-arrow',\r\n              },\r\n            }),\r\n        ],\r\n      );\r\n    };\r\n\r\n    // Day popover\r\n    const getDayPopover = () =>\r\n      h(Popover, {\r\n        props: {\r\n          id: this.sharedState.dayPopoverId,\r\n          contentClass: this.$theme.dayPopoverContainer,\r\n        },\r\n        scopedSlots: {\r\n          default: ({ args: day, updateLayout, hide }) => {\r\n            const attributes = Object.values(day.attributes).filter(\r\n              a => a.popover,\r\n            );\r\n            const masks = this.$locale.masks;\r\n            const format = this.format;\r\n            const dayTitle = format(day.date, masks.dayPopover);\r\n            return (\r\n              this.safeScopedSlot('day-popover', {\r\n                day,\r\n                attributes,\r\n                masks,\r\n                format,\r\n                dayTitle,\r\n                updateLayout,\r\n                hide,\r\n              }) ||\r\n              h('div', [\r\n                // Show popover header only if format is defined\r\n                masks.dayPopover &&\r\n                  h(\r\n                    'div',\r\n                    {\r\n                      class: ['vc-text-center', this.$theme.dayPopoverHeader],\r\n                    },\r\n                    [dayTitle],\r\n                  ),\r\n                attributes.map(attribute =>\r\n                  h(PopoverRow, {\r\n                    key: attribute.key,\r\n                    props: {\r\n                      attribute,\r\n                    },\r\n                  }),\r\n                ),\r\n              ])\r\n            );\r\n          },\r\n        },\r\n      });\r\n\r\n    // Renderer for calendar container\r\n    const getContainerGrid = () =>\r\n      h(\r\n        'div',\r\n        {\r\n          attrs: {\r\n            'data-helptext':\r\n              'Press the arrow keys to navigate by day, Home and End to navigate to week ends, PageUp and PageDown to navigate by month, Alt+PageUp and Alt+PageDown to navigate by year',\r\n          },\r\n          class: [\r\n            'vc-container',\r\n            'vc-reset',\r\n            {\r\n              'vc-min-w-full': this.isExpanded,\r\n            },\r\n            this.$theme.container,\r\n          ],\r\n          on: {\r\n            keydown: this.handleKeydown,\r\n            mouseup: e => e.preventDefault(),\r\n          },\r\n          ref: 'container',\r\n        },\r\n        [\r\n          h(\r\n            'div',\r\n            {\r\n              class: [\r\n                'vc-w-full vc-relative',\r\n                { 'vc-overflow-hidden': this.inTransition },\r\n              ],\r\n            },\r\n            [\r\n              h(\r\n                CustomTransition,\r\n                {\r\n                  props: {\r\n                    name: this.transitionName,\r\n                  },\r\n                  on: {\r\n                    beforeEnter: () => {\r\n                      this.inTransition = true;\r\n                    },\r\n                    afterEnter: () => {\r\n                      this.inTransition = false;\r\n                    },\r\n                  },\r\n                },\r\n                [\r\n                  h(\r\n                    Grid,\r\n                    {\r\n                      class: 'grid',\r\n                      props: {\r\n                        rows: this.rows,\r\n                        columns: this.columns,\r\n                        columnWidth: 'minmax(256px, 1fr)',\r\n                        disableFocus: true,\r\n                      },\r\n                      attrs: {\r\n                        ...this.$attrs,\r\n                      },\r\n                      key: arrayHasItems(this.pages) ? this.pages[0].key : '',\r\n                    },\r\n                    panes,\r\n                  ),\r\n                ],\r\n              ),\r\n              h(\r\n                'div',\r\n                {\r\n                  class: [`vc-arrows-container title-${this.titlePosition_}`],\r\n                },\r\n                [getArrowButton(true), getArrowButton(false)],\r\n              ),\r\n            ],\r\n          ),\r\n          getDayPopover(),\r\n        ],\r\n      );\r\n\r\n    return getContainerGrid();\r\n  },\r\n  mixins: [propOrDefaultMixin, rootMixin, safeScopedSlotMixin],\r\n  provide() {\r\n    return {\r\n      sharedState: this.sharedState,\r\n    };\r\n  },\r\n  props: {\r\n    rows: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    columns: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    step: Number,\r\n    titlePosition: String,\r\n    isExpanded: Boolean,\r\n    fromDate: Date,\r\n    toDate: Date,\r\n    fromPage: Object,\r\n    toPage: Object,\r\n    minPage: Object,\r\n    maxPage: Object,\r\n    transition: String,\r\n    attributes: [Object, Array],\r\n    disablePageSwipe: Boolean,\r\n  },\r\n  data() {\r\n    return {\r\n      pages: [],\r\n      store: null,\r\n      lastFocusedDay: null,\r\n      focusableDay: new Date().getDate(),\r\n      transitionName: '',\r\n      inTransition: false,\r\n      sharedState: {\r\n        dayPopoverId: createGuid(),\r\n        theme: {},\r\n        masks: {},\r\n        locale: {},\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    titlePosition_() {\r\n      return this.propOrDefault('titlePosition', 'titlePosition');\r\n    },\r\n    minPage_() {\r\n      return this.minPage || pageForDate(this.$locale.toDate(this.minDate));\r\n    },\r\n    maxPage_() {\r\n      return this.maxPage || pageForDate(this.$locale.toDate(this.maxDate));\r\n    },\r\n    count() {\r\n      return this.rows * this.columns;\r\n    },\r\n    step_() {\r\n      return this.step || this.count;\r\n    },\r\n    canMovePrev() {\r\n      return (\r\n        !pageIsValid(this.minPage_) ||\r\n        pageIsAfterPage(this.pages[0], this.minPage_)\r\n      );\r\n    },\r\n    canMoveNext() {\r\n      return (\r\n        !pageIsValid(this.maxPage_) ||\r\n        pageIsBeforePage(this.pages[this.pages.length - 1], this.maxPage_)\r\n      );\r\n    },\r\n  },\r\n  watch: {\r\n    $locale() {\r\n      this.refreshLocale();\r\n      this.refreshPages({ page: head(this.pages), ignoreCache: true });\r\n      this.initStore();\r\n    },\r\n    $theme() {\r\n      this.refreshTheme();\r\n      this.initStore();\r\n    },\r\n    fromDate() {\r\n      this.refreshPages();\r\n    },\r\n    fromPage(val) {\r\n      const firstPage = this.pages && this.pages[0];\r\n      if (pageIsEqualToPage(val, firstPage)) return;\r\n      this.refreshPages();\r\n    },\r\n    toPage(val) {\r\n      const lastPage = this.pages && this.pages[this.pages.length - 1];\r\n      if (pageIsEqualToPage(val, lastPage)) return;\r\n      this.refreshPages();\r\n    },\r\n    count() {\r\n      this.refreshPages();\r\n    },\r\n    attributes(val) {\r\n      const { adds, deletes } = this.store.refresh(val);\r\n      this.refreshAttrs(this.pages, adds, deletes);\r\n    },\r\n    pages(val) {\r\n      this.refreshAttrs(val, this.store.list, null, true);\r\n    },\r\n    disabledAttribute() {\r\n      this.refreshDisabledDays();\r\n    },\r\n    lastFocusedDay(val) {\r\n      if (val) {\r\n        this.focusableDay = val.day;\r\n        this.refreshFocusableDays();\r\n      }\r\n    },\r\n    inTransition(val) {\r\n      if (val) {\r\n        this.$emit('transition-start');\r\n      } else {\r\n        this.$emit('transition-end');\r\n        if (this.transitionPromise) {\r\n          this.transitionPromise.resolve();\r\n          this.transitionPromise = null;\r\n        }\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.refreshLocale();\r\n    this.refreshTheme();\r\n    this.initStore();\r\n    this.refreshPages();\r\n  },\r\n  mounted() {\r\n    if (!this.disablePageSwipe) {\r\n      // Add swipe handler to move to next and previous pages\r\n      const removeHandlers = addHorizontalSwipeHandler(\r\n        this.$refs.container,\r\n        ({ toLeft, toRight }) => {\r\n          if (toLeft) {\r\n            this.moveNext();\r\n          } else if (toRight) {\r\n            this.movePrev();\r\n          }\r\n        },\r\n        this.$defaults.touch,\r\n      );\r\n      // Clean up on destroy\r\n      this.$once('beforeDestroy', () => removeHandlers());\r\n    }\r\n  },\r\n  methods: {\r\n    refreshLocale() {\r\n      this.sharedState.locale = this.$locale;\r\n      this.sharedState.masks = this.$locale.masks;\r\n    },\r\n    refreshTheme() {\r\n      this.sharedState.theme = this.$theme;\r\n    },\r\n    canMove(page) {\r\n      return pageIsBetweenPages(page, this.minPage_, this.maxPage_);\r\n    },\r\n    async movePrev(opts) {\r\n      const result = await this.move(-this.step_, opts);\r\n      return result;\r\n    },\r\n    async moveNext(opts) {\r\n      const result = this.move(this.step_, opts);\r\n      return result;\r\n    },\r\n    async move(arg, opts) {\r\n      const page = this.$locale.toPage(arg, this.pages[0]);\r\n      if (!page) {\r\n        return null;\r\n      }\r\n      const result = await this.refreshPages({\r\n        ...opts,\r\n        page,\r\n      });\r\n      return result;\r\n    },\r\n    async focusDate(date, opts = {}) {\r\n      const page = pageForDate(date);\r\n      // Calculate new fromPage\r\n      let fromPage = null;\r\n      if (opts.position) {\r\n        fromPage = this.getTargetPageRange(page, opts.position).fromPage;\r\n      } else if (pageIsBeforePage(page, this.pages[0])) {\r\n        fromPage = this.getTargetPageRange(page, -1).fromPage;\r\n      } else if (pageIsAfterPage(page, last(this.pages))) {\r\n        fromPage = this.getTargetPageRange(page, 1).fromPage;\r\n      }\r\n      // Move to new fromPage if it's different from the current one\r\n      if (fromPage && !pageIsEqualToPage(fromPage, this.pages[0])) {\r\n        await this.refreshPages({\r\n          ...opts,\r\n          position: 1,\r\n          page: fromPage,\r\n        });\r\n      }\r\n      // Set focus on the element for the date\r\n      const focusableEl = this.$el.querySelector(\r\n        `.id-${this.$locale.format(date, 'YYYY-MM-DD')}.in-month .vc-focusable`,\r\n      );\r\n      if (focusableEl) {\r\n        focusableEl.focus();\r\n      }\r\n    },\r\n    async showPageRange(range, opts) {\r\n      let fromPage;\r\n      let toPage;\r\n      if (isDate(range)) {\r\n        fromPage = pageForDate(range);\r\n      } else if (isObject(range)) {\r\n        const { month, year } = range;\r\n        const { from, to } = range;\r\n        if (isNumber(month) && isNumber(year)) {\r\n          fromPage = range;\r\n        } else if (from || to) {\r\n          fromPage = isDate(from) ? pageForDate(from) : from;\r\n          toPage = isDate(to) ? pageForDate(to) : to;\r\n        }\r\n      } else {\r\n        return;\r\n      }\r\n      const lastPage = last(this.pages);\r\n      let page = fromPage;\r\n      // Offset page from the desired `toPage`\r\n      if (pageIsAfterPage(toPage, lastPage)) {\r\n        page = addPages(toPage, -(this.pages.length - 1));\r\n      }\r\n      // But no earlier than the desired `fromPage`\r\n      if (pageIsBeforePage(fromPage, page)) {\r\n        page = fromPage;\r\n      }\r\n      await this.refreshPages({ ...opts, page });\r\n    },\r\n    getTargetPageRange(page, position) {\r\n      // Calculate the page to start displaying from\r\n      let fromPage = null;\r\n      // 1. Try the page parameter\r\n      if (pageIsValid(page)) {\r\n        const pagesToAdd =\r\n          position > 0 ? 1 - position : -(this.count + position);\r\n        fromPage = addPages(page, pagesToAdd);\r\n      } else {\r\n        // 2. Try the fromPage prop\r\n        fromPage =\r\n          this.fromPage || pageForDate(this.$locale.toDate(this.fromDate));\r\n        if (!pageIsValid(fromPage)) {\r\n          // 3. Try the toPage prop\r\n          const toPage =\r\n            this.toPage || pageForDate(this.$locale.toDate(this.toPage));\r\n          if (pageIsValid(toPage)) {\r\n            fromPage = addPages(toPage, 1 - this.count);\r\n          } else {\r\n            // 4. Try the first attribute\r\n            fromPage = this.getPageForAttributes();\r\n          }\r\n        }\r\n      }\r\n      // 5. Fall back to today's page\r\n      fromPage = pageIsValid(fromPage) ? fromPage : pageForThisMonth();\r\n      // Adjust from page within allowed min/max pages\r\n      const toPage = addPages(fromPage, this.count - 1);\r\n      if (pageIsBeforePage(fromPage, this.minPage_)) {\r\n        fromPage = this.minPage_;\r\n      } else if (pageIsAfterPage(toPage, this.maxPage_)) {\r\n        fromPage = addPages(this.maxPage_, 1 - this.count);\r\n      }\r\n      return { fromPage, toPage };\r\n    },\r\n    async refreshPages({ page, position = 1, transition, ignoreCache } = {}) {\r\n      return new Promise((resolve, reject) => {\r\n        const { fromPage, toPage } = this.getTargetPageRange(page, position);\r\n        // Create the new pages\r\n        const pages = [];\r\n        for (let i = 0; i < this.count; i++) {\r\n          pages.push(this.buildPage(addPages(fromPage, i), ignoreCache));\r\n        }\r\n        // Refresh disabled days for new pages\r\n        this.refreshDisabledDays(pages);\r\n        // Refresh focusable days for new pages\r\n        this.refreshFocusableDays(pages);\r\n        // Assign the transition\r\n        this.transitionName = this.getPageTransition(\r\n          this.pages[0],\r\n          pages[0],\r\n          transition,\r\n        );\r\n        // Assign the new pages\r\n        this.pages = pages;\r\n        // Emit page update events\r\n        this.$emit('update:from-page', fromPage);\r\n        this.$emit('update:to-page', toPage);\r\n        if (this.transitionName && this.transitionName !== 'none') {\r\n          this.transitionPromise = {\r\n            resolve,\r\n            reject,\r\n          };\r\n        } else {\r\n          resolve();\r\n        }\r\n      });\r\n    },\r\n    refreshDisabledDays(pages) {\r\n      this.getPageDays(pages).forEach(d => {\r\n        d.isDisabled =\r\n          !!this.disabledAttribute && this.disabledAttribute.includesDay(d);\r\n      });\r\n    },\r\n    refreshFocusableDays(pages) {\r\n      this.getPageDays(pages).forEach(d => {\r\n        d.isFocusable = d.inMonth && d.day === this.focusableDay;\r\n      });\r\n    },\r\n    getPageDays(pages = this.pages) {\r\n      return pages.reduce((prev, curr) => prev.concat(curr.days), []);\r\n    },\r\n    getPageTransition(oldPage, newPage, transition = this.transition) {\r\n      if (transition === 'none') return transition;\r\n      if (\r\n        transition === 'fade' ||\r\n        (!transition && this.count > 1) ||\r\n        !pageIsValid(oldPage) ||\r\n        !pageIsValid(newPage)\r\n      ) {\r\n        return 'fade';\r\n      }\r\n      // Moving to a previous page\r\n      const movePrev = pageIsBeforePage(newPage, oldPage);\r\n      // Vertical slide\r\n      if (transition === 'slide-v') {\r\n        return movePrev ? 'slide-down' : 'slide-up';\r\n      }\r\n      // Horizontal slide\r\n      return movePrev ? 'slide-right' : 'slide-left';\r\n    },\r\n    getPageForAttributes() {\r\n      let page = null;\r\n      const attr = this.store.pinAttr;\r\n      if (attr && attr.hasDates) {\r\n        let [date] = attr.dates;\r\n        date = date.start || date.date;\r\n        page = pageForDate(this.$locale.toDate(date));\r\n      }\r\n      return page;\r\n    },\r\n    buildPage({ month, year }, ignoreCache) {\r\n      const key = `${year.toString()}-${month.toString()}`;\r\n      let page = this.pages.find(p => p.key === key);\r\n      if (!page || ignoreCache) {\r\n        const date = new Date(year, month - 1, 15);\r\n        const monthComps = this.$locale.getMonthComps(month, year);\r\n        const prevMonthComps = this.$locale.getPrevMonthComps(month, year);\r\n        const nextMonthComps = this.$locale.getNextMonthComps(month, year);\r\n        page = {\r\n          key,\r\n          month,\r\n          year,\r\n          title: this.$locale.format(date, this.$locale.masks.title),\r\n          shortMonthLabel: this.$locale.format(date, 'MMM'),\r\n          monthLabel: this.$locale.format(date, 'MMMM'),\r\n          shortYearLabel: year.toString().substring(2),\r\n          yearLabel: year.toString(),\r\n          monthComps,\r\n          prevMonthComps,\r\n          nextMonthComps,\r\n          canMove: pg => this.canMove(pg),\r\n          move: pg => this.move(pg),\r\n          moveThisMonth: () => this.moveThisMonth(),\r\n          movePrevMonth: () => this.move(prevMonthComps),\r\n          moveNextMonth: () => this.move(nextMonthComps),\r\n          refresh: true,\r\n        };\r\n        // Assign day info\r\n        page.days = this.$locale.getCalendarDays(page);\r\n      }\r\n      return page;\r\n    },\r\n    initStore() {\r\n      // Create a new attribute store\r\n      this.store = new AttributeStore(\r\n        this.$theme,\r\n        this.$locale,\r\n        this.attributes,\r\n      );\r\n      // Refresh attributes for existing pages\r\n      this.refreshAttrs(this.pages, this.store.list, [], true);\r\n    },\r\n    refreshAttrs(pages = [], adds = [], deletes = [], reset) {\r\n      if (!arrayHasItems(pages)) return;\r\n      // For each page...\r\n      pages.forEach(p => {\r\n        // For each day...\r\n        p.days.forEach(d => {\r\n          let map = {};\r\n          // If resetting...\r\n          if (reset) {\r\n            // Flag day for refresh if it has attributes\r\n            d.refresh = arrayHasItems(d.attributes);\r\n          } else if (hasAny(d.attributesMap, deletes)) {\r\n            // Delete attributes from the delete list\r\n            map = omit(d.attributesMap, deletes);\r\n            // Flag day for refresh\r\n            d.refresh = true;\r\n          } else {\r\n            // Get the existing attributes\r\n            map = d.attributesMap || {};\r\n          }\r\n          // For each attribute to add...\r\n          adds.forEach(attr => {\r\n            // Add it if it includes the current day\r\n            const targetDate = attr.includesDay(d);\r\n            if (targetDate) {\r\n              const newAttr = {\r\n                ...attr,\r\n                targetDate,\r\n              };\r\n              map[attr.key] = newAttr;\r\n              // Flag day for refresh\r\n              d.refresh = true;\r\n            }\r\n          });\r\n          // Reassign day attributes\r\n          if (d.refresh) {\r\n            d.attributesMap = map;\r\n          }\r\n        });\r\n      });\r\n      // Refresh pages\r\n      this.$nextTick(() => {\r\n        this.$refs.pages.forEach(p => p.refresh());\r\n      });\r\n    },\r\n    handleKeydown(e) {\r\n      const day = this.lastFocusedDay;\r\n      if (day != null) {\r\n        day.event = e;\r\n        this.handleDayKeydown(day);\r\n      }\r\n    },\r\n    handleDayKeydown(day) {\r\n      const { date, event } = day;\r\n      let newDate = null;\r\n      switch (event.key) {\r\n        case 'ArrowLeft': {\r\n          // Move to previous day\r\n          newDate = addDays(date, -1);\r\n          break;\r\n        }\r\n        case 'ArrowRight': {\r\n          // Move to next day\r\n          newDate = addDays(date, 1);\r\n          break;\r\n        }\r\n        case 'ArrowUp': {\r\n          // Move to previous week\r\n          newDate = addDays(date, -7);\r\n          break;\r\n        }\r\n        case 'ArrowDown': {\r\n          // Move to next week\r\n          newDate = addDays(date, 7);\r\n          break;\r\n        }\r\n        case 'Home': {\r\n          // Move to first weekday position\r\n          newDate = addDays(date, -day.weekdayPosition + 1);\r\n          break;\r\n        }\r\n        case 'End': {\r\n          // Move to last weekday position\r\n          newDate = addDays(date, day.weekdayPositionFromEnd);\r\n          break;\r\n        }\r\n        case 'PageUp': {\r\n          if (event.altKey) {\r\n            // Move to previous year w/ Alt/Option key\r\n            newDate = addYears(date, -1);\r\n          } else {\r\n            // Move to previous month\r\n            newDate = addMonths(date, -1);\r\n          }\r\n          break;\r\n        }\r\n        case 'PageDown': {\r\n          if (event.altKey) {\r\n            // Move to next year w/ Alt/Option key\r\n            newDate = addYears(date, 1);\r\n          } else {\r\n            // Move to next month\r\n            newDate = addMonths(date, 1);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (newDate) {\r\n        event.preventDefault();\r\n        this.focusDate(newDate);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.vc-container {\r\n  --slide-translate: 22px;\r\n  --slide-duration: 0.15s;\r\n  --slide-timing: ease;\r\n\r\n  --header-padding: 10px 10px 0 10px;\r\n  --title-padding: 0 8px;\r\n  --arrows-padding: 8px 10px;\r\n  --arrow-font-size: 26px;\r\n  --weekday-padding: 5px 0;\r\n  --weeks-padding: 5px 6px 7px 6px;\r\n\r\n  --nav-container-width: 170px;\r\n\r\n  --day-min-height: 28px;\r\n  --day-content-width: 28px;\r\n  --day-content-height: 28px;\r\n  --day-content-margin: 1.6px auto;\r\n  --day-content-transition-time: 0.13s ease-in;\r\n  --day-content-bg-color-hover: hsla(211, 25%, 84%, 0.3);\r\n  --day-content-dark-bg-color-hover: hsla(216, 15%, 52%, 0.3);\r\n  --day-content-bg-color-focus: hsla(211, 25%, 84%, 0.4);\r\n  --day-content-dark-bg-color-focus: hsla(216, 15%, 52%, 0.4);\r\n\r\n  --highlight-height: 28px;\r\n\r\n  --dot-diameter: 5px;\r\n  --dot-border-radius: 50%;\r\n  --dot-spacing: 3px;\r\n\r\n  --bar-height: 3px;\r\n  --bars-width: 75%;\r\n\r\n  font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    'Helvetica', 'Arial', sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  position: relative;\r\n  width: max-content;\r\n  -webkit-tap-highlight-color: transparent;\r\n}\r\n\r\n.vc-arrows-container {\r\n  width: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: var(--arrows-padding);\r\n  pointer-events: none;\r\n  &.title-left {\r\n    justify-content: flex-end;\r\n  }\r\n  &.title-right {\r\n    justify-content: flex-start;\r\n  }\r\n}\r\n</style>\r\n"]}]}