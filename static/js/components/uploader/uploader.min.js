(function(){'use strict';var moduleName="UploaderBtn";try{angular.module(moduleName);return}catch(e){}var module=angular.module(moduleName,['UploaderCommon']);module.factory('$UploaderBtn',function($templateCache,$UploaderMixins){const props={directory:{type:Boolean,default:false},single:{type:Boolean,default:false},attrs:{type:Object,default(){return{}}}};const util={};const methods={};const data=function(){let vm=this};const mounted=function(){this.$nextTick(()=>{this.uploader.uploader.assignBrowse(this.$refs.btn,this.directory,this.single,this.attrs)})};var $Компонент={props,mixins:[$UploaderMixins.uploader,$UploaderMixins.support],methods,mounted,};const $Конструктор=function(){let $this=this;$Компонент.template=$templateCache.get('uploader/btn');return $Компонент};return $Конструктор});}());(function(){'use strict';var moduleName="UploaderCommon";try{angular.module(moduleName);return}catch(e){}var module=angular.module(moduleName,[]);module.factory('$UploaderUtil',function(){return{secondsToStr(temp){const years=Math.floor(temp/31536000);if(years){return years+' year'+numberEnding(years)}const days=Math.floor((temp%=31536000)/86400);if(days){return days+' day'+numberEnding(days)}const hours=Math.floor((temp%=86400)/3600);if(hours){return hours+' hour'+numberEnding(hours)}const minutes=Math.floor((temp%=3600)/60);if(minutes){return minutes+' minute'+numberEnding(minutes)}const seconds=temp%60;return seconds+' second'+numberEnding(seconds);function numberEnding(number){return(number>1)?'s':''}},kebabCase(s){return s.replace(/[A-Z]/g,(m)=>`-${m.toLowerCase()}`)},};});module.factory('$UploaderMixins',function(){return{uploader:{inject:['uploader']},support:{data(){return{support:true}},mounted(){this.support=this.uploader.uploader.support}},};});module.factory('$UploaderEvents',function(){return['fileProgress','fileSuccess','fileComplete','fileError']});}());(function(){'use strict';var moduleName="UploaderDrop";try{angular.module(moduleName);return}catch(e){}var module=angular.module(moduleName,['UploaderCommon']);module.factory('$UploaderDrop',function($templateCache,$UploaderMixins){const props={};const util={};const methods={onDragEnter(){this.dropClass='uploader-dragover'},onDragLeave(){this.dropClass=''},onDrop(){this.dropClass='uploader-droped'},};const data=function(){let vm=this;return{dropClass:'',}};const mounted=function(){this.$nextTick(()=>{const dropEle=this.$refs.drop;const uploader=this.uploader.uploader;uploader.assignDrop(dropEle);uploader.on('dragenter',this.onDragEnter);uploader.on('dragleave',this.onDragLeave);uploader.on('drop',this.onDrop)})};const beforeDestroy=function(){const dropEle=this.$refs.drop;const uploader=this.uploader.uploader;uploader.off('dragenter',this.onDragEnter);uploader.off('dragleave',this.onDragLeave);uploader.off('drop',this.onDrop);uploader.unAssignDrop(dropEle)};var $Компонент={props,mixins:[$UploaderMixins.uploader,$UploaderMixins.support],data,methods,mounted,beforeDestroy,};const $Конструктор=function(){let $this=this;$Компонент.template=$templateCache.get('uploader/drop');return $Компонент};return $Конструктор});}());(function(){'use strict';var moduleName="UploaderFile";try{angular.module(moduleName);return}catch(e){}var module=angular.module(moduleName,['UploaderCommon']);module.factory('$UploaderFile',function($templateCache,$UploaderEvents,$UploaderUtil){const props={file:{type:Object,default(){return{}},},list:{type:Boolean,default:false,},};const util={};const methods={_actionCheck(){this.paused=this.file.paused;this.error=this.file.error;this.isUploading=this.file.isUploading()},pause(){this.file.pause();this._actionCheck();this._fileProgress()},resume(){this.file.resume();this._actionCheck()},remove(){this.file.cancel()},retry(){this.file.retry();this._actionCheck()},processResponse(message){let res=message;try{res=JSON.parse(message)}catch(e){}this.response=res},fileEventsHandler(event,args){const rootFile=args[0];const file=args[1];const target=this.list?rootFile:file;if(this.file===target){if(this.list&&event==='fileSuccess'){this.processResponse(args[2]);return}this[`_${event}`].apply(this,args)}},_fileProgress(){this.progress=this.file.progress();this.averageSpeed=this.file.averageSpeed;this.currentSpeed=this.file.currentSpeed;this.timeRemaining=this.file.timeRemaining();this.uploadedSize=this.file.sizeUploaded();this._actionCheck()},_fileSuccess(rootFile,file,message){if(rootFile){this.processResponse(message)}this._fileProgress();this.error=false;this.isComplete=true;this.isUploading=false},_fileComplete(){this._fileSuccess()},_fileError(rootFile,file,message){this._fileProgress();this.processResponse(message);this.error=true;this.isComplete=false;this.isUploading=false},};const data=function(){let vm=this;return{response:null,paused:false,error:false,averageSpeed:0,currentSpeed:0,isComplete:false,isUploading:false,size:0,formatedSize:'',uploadedSize:0,progress:0,timeRemaining:0,type:'',extension:'',progressingClass:'',}};const computed={fileCategory(){const extension=this.extension;const isFolder=this.file.isFolder;let type=isFolder?'folder':'unknown';const categoryMap=this.file.uploader.opts.categoryMap;const typeMap=categoryMap||{image:['gif','jpg','jpeg','png','bmp','webp'],video:['mp4','m3u8','rmvb','avi','swf','3gp','mkv','flv'],audio:['mp3','wav','wma','ogg','aac','flac'],document:['doc','txt','docx','pages','epub','pdf','numbers','csv','xls','xlsx','keynote','ppt','pptx']};Object.keys(typeMap).forEach((_type)=>{const extensions=typeMap[_type];if(extensions.indexOf(extension)>-1){type=_type}});return type},progressStyle(){const progress=Math.floor(this.progress*100);const style=`translateX(${Math.floor(progress-100)}%)`;return{progress:`${progress}%`,webkitTransform:style,mozTransform:style,msTransform:style,transform:style,}},formatedAverageSpeed(){return`${Uploader.utils.formatSize(this.averageSpeed)}/s`},status(){const isUploading=this.isUploading;const isComplete=this.isComplete;const isError=this.error;const paused=this.paused;if(isComplete){return'success'}else if(isError){return'error'}else if(isUploading){return'uploading'}else if(paused){return'paused'}else{return'waiting'}},statusText(){const status=this.status;const fileStatusText=this.file.uploader.fileStatusText;let txt=status;if(typeof fileStatusText==='function'){txt=fileStatusText(status,this.response)}else{txt=fileStatusText[status]}return txt||status},formatedTimeRemaining(){const timeRemaining=this.timeRemaining;const file=this.file;if(timeRemaining===Number.POSITIVE_INFINITY||timeRemaining===0){return''}let parsedTimeRemaining=$UploaderUtil.secondsToStr(timeRemaining);const parseTimeRemaining=file.uploader.opts.parseTimeRemaining;if(parseTimeRemaining){parsedTimeRemaining=parseTimeRemaining(timeRemaining,parsedTimeRemaining)}return parsedTimeRemaining},};const watch={status(newStatus,oldStatus){if(oldStatus&&newStatus==='uploading'&&oldStatus!=='uploading'){this.tid=setTimeout(()=>{this.progressingClass='uploader-file-progressing'},200)}else{clearTimeout(this.tid);this.progressingClass=''}},};const mounted=function(){const staticProps=['paused','error','averageSpeed','currentSpeed'];const fnProps=['isComplete','isUploading',{key:'size',fn:'getSize'},{key:'formatedSize',fn:'getFormatSize'},{key:'uploadedSize',fn:'sizeUploaded'},'progress','timeRemaining',{key:'type',fn:'getType'},{key:'extension',fn:'getExtension'}];staticProps.forEach(prop=>{this[prop]=this.file[prop]});fnProps.forEach((fnProp)=>{if(typeof fnProp==='string'){this[fnProp]=this.file[fnProp]()}else{this[fnProp.key]=this.file[fnProp.fn]()}});const handlers=this._handlers={};const eventHandler=(event)=>{handlers[event]=(...args)=>{this.fileEventsHandler(event,args)};return handlers[event]};$UploaderEvents.forEach((event)=>{this.file.uploader.on(event,eventHandler(event))})};const destroyed=function(){$UploaderEvents.forEach((event)=>{this.file.uploader.off(event,this._handlers[event])});this._handlers=null};var $Компонент={props,data,methods,computed,watch,mounted,destroyed,};const $Конструктор=function(){let $this=this;$Компонент.template=$templateCache.get('uploader/file');return $Компонент};return $Конструктор});}());(function(){'use strict';var moduleName="UploaderFiles";try{angular.module(moduleName);return}catch(e){}var module=angular.module(moduleName,['UploaderFile','UploaderCommon']);module.factory('$UploaderFiles',function($templateCache,$UploaderFile,$UploaderMixins){const props={};const util={};const methods={};const data=function(){let vm=this};const mounted=function(){};const computed={files(){return this.uploader.files}};var $Компонент={mixins:[$UploaderMixins.uploader],computed,"components":{},};const $Конструктор=function(){let $this=this;$Компонент.template=$templateCache.get('uploader/files');$Компонент.components['uploader-file']=new $UploaderFile();return $Компонент};return $Конструктор});}());(function(){'use strict';var moduleName="UploaderList";try{angular.module(moduleName);return}catch(e){}var module=angular.module(moduleName,['UploaderFile','UploaderCommon']);module.factory('$UploaderList',function($templateCache,$UploaderFile,$UploaderMixins){const props={};const util={};const methods={};const data=function(){let vm=this};const computed={fileList(){return this.uploader.fileList}};var $Компонент={mixins:[$UploaderMixins.uploader],computed,components:{},};const $Конструктор=function(){let $this=this;$Компонент.template=$templateCache.get('uploader/list');$Компонент.components['uploader-file']=new $UploaderFile();return $Компонент};return $Конструктор});}());(function(){'use strict';var moduleName="Uploader";try{angular.module(moduleName);return}catch(e){}var module=angular.module(moduleName,['UploaderCommon','UploaderBtn','UploaderDrop','UploaderList','UploaderFiles','UploaderFile',]);module.factory('$Uploader',function($templateCache,$UploaderUtil,$UploaderBtn,$UploaderDrop,$UploaderList,$UploaderFiles,$UploaderFile){const FILE_ADDED_EVENT='fileAdded';const FILES_ADDED_EVENT='filesAdded';const UPLOAD_START_EVENT='uploadStart';const provide=function(){return{uploader:this,}};const props={options:{type:Object,default(){return{}},},autoStart:{type:Boolean,default:true,},fileStatusText:{type:[Object,Function],default(){return{success:'success',error:'error',uploading:'uploading',paused:'paused',waiting:'waiting',}}},};const methods={uploadStart(){this.started=true},fileAdded(file){this.$emit($UploaderUtil.kebabCase(FILE_ADDED_EVENT),file);if(file.ignored){return false}},filesAdded(files,fileList){this.$emit($UploaderUtil.kebabCase(FILES_ADDED_EVENT),files,fileList);if(files.ignored||fileList.ignored){return false}},fileRemoved(file){this.files=this.uploader.files;this.fileList=this.uploader.fileList},filesSubmitted(files,fileList){this.files=this.uploader.files;this.fileList=this.uploader.fileList;if(this.autoStart){this.uploader.upload()}},allEvent(...args){const name=args[0];const EVENTSMAP={[FILE_ADDED_EVENT]:true,[FILES_ADDED_EVENT]:true,[UPLOAD_START_EVENT]:'uploadStart',};const handler=EVENTSMAP[name];if(handler){if(handler===true){return}this[handler].apply(this,args.slice(1))}args[0]=$UploaderUtil.kebabCase(name);this.$emit.apply(this,args)},};const data=function(){let vm=this;return{started:false,files:[],fileList:[],}};const created=function(){this.options.initialPaused=!this.autoStart;const uploader=new Uploader(this.options);this.uploader=uploader;this.uploader.fileStatusText=this.fileStatusText;uploader.on('catchAll',this.allEvent);uploader.on(FILE_ADDED_EVENT,this.fileAdded);uploader.on(FILES_ADDED_EVENT,this.filesAdded);uploader.on('fileRemoved',this.fileRemoved);uploader.on('filesSubmitted',this.filesSubmitted)};const destroyed=function(){const uploader=this.uploader;uploader.off('catchAll',this.allEvent);uploader.off(FILE_ADDED_EVENT,this.fileAdded);uploader.off(FILES_ADDED_EVENT,this.filesAdded);uploader.off('fileRemoved',this.fileRemoved);uploader.off('filesSubmitted',this.filesSubmitted);this.uploader=null};const mounted=function(){};var $Компонент={provide,props,data,methods,created,destroyed,mounted,components:{},};const $Конструктор=function(){let $this=this;$Компонент.template=$templateCache.get('uploader');$Компонент.components['uploader-btn']=new $UploaderBtn();$Компонент.components['uploader-drop']=new $UploaderDrop();$Компонент.components['uploader-list']=new $UploaderList();$Компонент.components['uploader-files']=new $UploaderFiles();$Компонент.components['uploader-file']=new $UploaderFile();return $Компонент};return $Конструктор});}());(function(){'use strict';var moduleName="Uploader пример";try{angular.module(moduleName);return}catch(e){}var module=angular.module(moduleName,['Uploader']);module.factory('$КомпонентФайлов',function($templateCache,appRoutes,$Uploader){const props={};const util={};const methods={Complete(){console.log('complete',arguments)},FileComplete(){console.log('file complete',arguments)},FileSuccess(){console.log('file success',arguments)},};const data=function(){let vm=this;return{options:{target:appRoutes.urlFor('выгрузить файл'),testChunks:false},attrs:{accept:'image/*'},statusText:{success:'Успешно сохранено',error:'Ошибка загрузки',uploading:'Загружается...',paused:'Остановлено',waiting:'Ожидание'}}};const mounted=function(){this.$nextTick(()=>{window.uploader=this.$refs.uploader.uploader})};var $Компонент={data,methods,mounted,components:{},};const $Конструктор=function(){let $this=this;$Компонент.template=$templateCache.get('uploader/пример');$Компонент.components['v-uploader']=new $Uploader();return $Компонент};return $Конструктор});}());